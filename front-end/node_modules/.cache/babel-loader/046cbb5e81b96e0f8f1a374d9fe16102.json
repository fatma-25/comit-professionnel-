{"ast":null,"code":"var _jsxFileName = \"/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/src/components/Auth /Register/Register.component.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { useState } from 'react';\n// import { Grid, Form, Segment, Header, Icon, Button, Message } from 'semantic-ui-react'\n// import firebase from '../../../server/firebase';\n// import \"../Auth.css\"\n// import { Link } from 'react-router-dom';\n// const Register = () => {\n//     let user = {\n//         userName: '',\n//         email: '',\n//         password: '',\n//         confirmpassword: ''\n//     }\n//     let errors = [];\n//     let userCollectionRef = firebase.database().ref('users');\n//     const [userState, setuserState] = useState(user);\n//     const [errorState, seterrorState] = useState(errors);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [isSuccess, setIsSuccess] = useState(false);\n//     const handleInput = (event) => {\n//         let target = event.target;\n//         setuserState((currentState) => {\n//             let currentuser = { ...currentState };\n//             currentuser[target.name] = target.value;\n//             return currentuser;\n//         })\n//     }\n//     const checkForm = () => {\n//         if (isFormEmpty()) {\n//             seterrorState((error) => error.concat({ message: \"Please fill in all fields\" }));\n//             return false;\n//         }\n//         else if (!checkPassword()) {\n//             return false;\n//         }\n//         return true;\n//     }\n//     const isFormEmpty = () => {\n//         return !userState.userName.length ||\n//             !userState.password.length ||\n//             !userState.confirmpassword.length ||\n//             !userState.email.length;\n//     }\n//     const checkPassword = () => {\n//         if (userState.password.length < 8) {\n//             seterrorState((error) => error.concat({ message: \"Password length should be greater than 8\" }));\n//             return false;\n//         }\n//         else if (userState.password !== userState.confirmpassword) {\n//             seterrorState((error) => error.concat({ message: \"Password and Confirm Password does not match\" }));\n//             return false;\n//         }\n//         return true;\n//     }\n//     const onSubmit = (event) => {\n//         seterrorState(() => []);\n//         setIsSuccess(false);\n//         if (checkForm()) {\n//             setIsLoading(true);\n//             firebase.auth()\n//                 .createUserWithEmailAndPassword(userState.email, userState.password)\n//                 .then(createdUser => {\n//                     setIsLoading(false);\n//                     updateuserDetails(createdUser);\n//                 })\n//                 .catch(serverError => {\n//                     setIsLoading(false);\n//                     seterrorState((error) => error.concat(serverError));\n//                 })\n//         }\n//     }\n//     const updateuserDetails = (createdUser) => {\n//         if (createdUser) {\n//             setIsLoading(true);\n//             createdUser.user\n//                 .updateProfile({\n//                     displayName: userState.userName,\n//                     photoURL: `http://gravatar.com/avatar/${createdUser.user.uid}?d=identicon`\n//                 })\n//                 .then(() => {\n//                     setIsLoading(false);\n//                     saveUserInDB(createdUser);\n//                 })\n//                 .catch((serverError) => {\n//                     setIsLoading(false);\n//                     seterrorState((error) => error.concat(serverError));\n//                 })\n//         }\n//     }\n//     const saveUserInDB = (createdUser) => {\n//         setIsLoading(true);\n//         userCollectionRef.child(createdUser.user.uid).set({\n//             displayName: createdUser.user.displayName,\n//             photoURL: createdUser.user.photoURL\n//         })\n//             .then(() => {\n//                 setIsLoading(false);\n//                 setIsSuccess(true);\n//             })\n//             .catch(serverError => {\n//                 setIsLoading(false);\n//                 seterrorState((error) => error.concat(serverError));\n//             })\n//     }\n//     const formaterrors = () => {\n//         return errorState.map((error, index) => <p key={index}>{error.message}</p>)\n//     }\n//     return (<Grid verticalAlign=\"middle\" textAlign=\"center\" className=\"grid-form\" >\n//         <Grid.Column style={{ maxWidth: '500px' }}>\n//             <Header icon as=\"h2\">\n//                 <Icon name=\"slack\" />\n//                 Register\n//             </Header>\n//             <Form onSubmit={onSubmit}>\n//                 <Segment stacked>\n//                     <Form.Input\n//                         name=\"userName\"\n//                         value={userState.userName}\n//                         icon=\"user\"\n//                         iconPosition=\"left\"\n//                         onChange={handleInput}\n//                         type=\"text\"\n//                         placeholder=\"User Name\"\n//                     />\n//                     <Form.Input\n//                         name=\"email\"\n//                         value={userState.email}\n//                         icon=\"mail\"\n//                         iconPosition=\"left\"\n//                         onChange={handleInput}\n//                         type=\"email\"\n//                         placeholder=\"User Email\"\n//                     />\n//                     <Form.Input\n//                         name=\"password\"\n//                         value={userState.password}\n//                         icon=\"lock\"\n//                         iconPosition=\"left\"\n//                         onChange={handleInput}\n//                         type=\"password\"\n//                         placeholder=\"User Password\"\n//                     />\n//                     <Form.Input\n//                         name=\"confirmpassword\"\n//                         value={userState.confirmpassword}\n//                         icon=\"lock\"\n//                         iconPosition=\"left\"\n//                         onChange={handleInput}\n//                         type=\"password\"\n//                         placeholder=\"Confirm Password\"\n//                     />\n//                 </Segment>\n//                 <Button disabled={isLoading} loading={isLoading}>Submit</Button>\n//             </Form>\n//             {errorState.length > 0 && <Message error>\n//                 <h3>Errors</h3>\n//                 {formaterrors()}\n//             </Message>\n//             }\n//             {isSuccess && <Message success>\n//                 <h3>Successfully Registered</h3>\n//             </Message>\n//             }\n//             <Message>\n//                 Already an User? <Link to=\"/login\" >Login </Link>\n//             </Message>\n//         </Grid.Column>\n//     </Grid>)\n// }\n// export default Register;\nimport React, { useState } from 'react';\nimport { Grid, Form, Segment, Header, Icon, Button, Message } from 'semantic-ui-react';\nimport firebase from '../../../server/firebase';\nimport axios from \"axios\";\nimport \"../Auth.css\";\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from \"react-redux\"; // import { registerHandler } from \"../../redux/action/auth-action\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Register = () => {\n  _s();\n\n  // const dispatch = useDispatch();\n  let user = {\n    userName: '',\n    email: '',\n    password: '',\n    confirmpassword: ''\n  };\n  let errors = [];\n  let userCollectionRef = firebase.database().ref('users');\n  const [userState, setuserState] = useState(user);\n  const [errorState, seterrorState] = useState(errors);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n\n  const handleInput = event => {\n    let target = event.target;\n    setuserState(currentState => {\n      let currentuser = { ...currentState\n      };\n      currentuser[target.name] = target.value;\n      return currentuser;\n    });\n  };\n\n  const checkForm = () => {\n    if (isFormEmpty()) {\n      seterrorState(error => error.concat({\n        message: \"Please fill in all fields\"\n      }));\n      return false;\n    } else if (!checkPassword()) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const isFormEmpty = () => {\n    return !userState.userName.length || !userState.password.length || !userState.confirmpassword.length || !userState.email.length;\n  };\n\n  const checkPassword = () => {\n    if (userState.password.length < 8) {\n      seterrorState(error => error.concat({\n        message: \"Password length should be greater than 8\"\n      }));\n      return false;\n    } else if (userState.password !== userState.confirmpassword) {\n      seterrorState(error => error.concat({\n        message: \"Password and Confirm Password does not match\"\n      }));\n      return false;\n    }\n\n    return true;\n  };\n\n  const onSubmit = event => {\n    seterrorState(() => []);\n    setIsSuccess(false);\n\n    if (checkForm()) {\n      setIsLoading(true);\n      firebase.auth().createUserWithEmailAndPassword(userState.email, userState.password).then(createdUser => {\n        setIsLoading(false);\n        updateuserDetails(createdUser);\n      }) // .then(res=>axios.post(\"http://localhost:2000/register\", {email:userState.email, password:userState.password}))\n      .catch(serverError => {\n        setIsLoading(false);\n        seterrorState(error => error.concat(serverError));\n      });\n    } // const newUser = { name:userState.userName, lastName, email:userState.email, password:userState.password, status: true, account:\"admin\" };\n    // dispatch(registerHandler(newUser));\n    // axios.post(\"http://localhost:2000/register\", {email:userState.email, password:userState.password})\n\n  };\n\n  const updateuserDetails = createdUser => {\n    if (createdUser) {\n      setIsLoading(true);\n      createdUser.user.updateProfile({\n        displayName: userState.userName,\n        photoURL: `http://gravatar.com/avatar/${createdUser.user.uid}?d=identicon`,\n        email: userState.email,\n        status: false,\n        account: \"user\"\n      }).then(() => {\n        setIsLoading(false);\n        saveUserInDB(createdUser);\n      }).catch(serverError => {\n        setIsLoading(false);\n        seterrorState(error => error.concat(serverError));\n      }); // axios.post(\"http://localhost:2000/register\", {email:userState.email, password:userState.password})\n    }\n  };\n\n  const saveUserInDB = createdUser => {\n    setIsLoading(true);\n    userCollectionRef.child(createdUser.user.uid).set({\n      displayName: createdUser.user.displayName,\n      photoURL: createdUser.user.photoURL,\n      email: createdUser.user.email,\n      status: false,\n      account: \"user\"\n    }).then(() => {\n      setIsLoading(false);\n      setIsSuccess(true);\n    }).catch(serverError => {\n      setIsLoading(false);\n      seterrorState(error => error.concat(serverError));\n    });\n  };\n\n  const formaterrors = () => {\n    return errorState.map((error, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error.message\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 49\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    verticalAlign: \"middle\",\n    textAlign: \"center\",\n    className: \"grid-form\",\n    children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n      style: {\n        maxWidth: '500px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        icon: true,\n        as: \"h2\",\n        children: [/*#__PURE__*/_jsxDEV(Icon, {\n          name: \"community\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 17\n        }, this), \"Register\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Segment, {\n          stacked: true,\n          children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n            name: \"userName\",\n            value: userState.userName,\n            icon: \"user\",\n            iconPosition: \"left\",\n            onChange: handleInput,\n            type: \"text\",\n            placeholder: \"User Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n            name: \"email\",\n            value: userState.email,\n            icon: \"mail\",\n            iconPosition: \"left\",\n            onChange: handleInput,\n            type: \"email\",\n            placeholder: \"User Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n            name: \"password\",\n            value: userState.password,\n            icon: \"lock\",\n            iconPosition: \"left\",\n            onChange: handleInput,\n            type: \"password\",\n            placeholder: \"User Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n            name: \"confirmpassword\",\n            value: userState.confirmpassword,\n            icon: \"lock\",\n            iconPosition: \"left\",\n            onChange: handleInput,\n            type: \"password\",\n            placeholder: \"Confirm Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: isLoading,\n          loading: isLoading,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 13\n      }, this), errorState.length > 0 && /*#__PURE__*/_jsxDEV(Message, {\n        error: true,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Errors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 17\n        }, this), formaterrors()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 39\n      }, this), isSuccess && /*#__PURE__*/_jsxDEV(Message, {\n        success: true,\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Successfully Registered\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(Message, {\n        children: [\"Already an User? \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/login\",\n          children: \"Login \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Register, \"I4mEU4JF18Tc1CoNSALgC2AKlpY=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/src/components/Auth /Register/Register.component.jsx"],"names":["React","useState","Grid","Form","Segment","Header","Icon","Button","Message","firebase","axios","Link","useDispatch","Register","user","userName","email","password","confirmpassword","errors","userCollectionRef","database","ref","userState","setuserState","errorState","seterrorState","isLoading","setIsLoading","isSuccess","setIsSuccess","handleInput","event","target","currentState","currentuser","name","value","checkForm","isFormEmpty","error","concat","message","checkPassword","length","onSubmit","auth","createUserWithEmailAndPassword","then","createdUser","updateuserDetails","catch","serverError","updateProfile","displayName","photoURL","uid","status","account","saveUserInDB","child","set","formaterrors","map","index","maxWidth"],"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","sourcesContent":["// import React, { useState } from 'react';\n// import { Grid, Form, Segment, Header, Icon, Button, Message } from 'semantic-ui-react'\n// import firebase from '../../../server/firebase';\n\n// import \"../Auth.css\"\n// import { Link } from 'react-router-dom';\n\n// const Register = () => {\n\n//     let user = {\n//         userName: '',\n//         email: '',\n//         password: '',\n//         confirmpassword: ''\n//     }\n\n//     let errors = [];\n\n//     let userCollectionRef = firebase.database().ref('users');\n\n//     const [userState, setuserState] = useState(user);\n//     const [errorState, seterrorState] = useState(errors);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [isSuccess, setIsSuccess] = useState(false);\n\n//     const handleInput = (event) => {\n//         let target = event.target;\n//         setuserState((currentState) => {\n//             let currentuser = { ...currentState };\n//             currentuser[target.name] = target.value;\n//             return currentuser;\n//         })\n//     }\n\n//     const checkForm = () => {\n//         if (isFormEmpty()) {\n//             seterrorState((error) => error.concat({ message: \"Please fill in all fields\" }));\n//             return false;\n//         }\n//         else if (!checkPassword()) {\n//             return false;\n//         }\n//         return true;\n//     }\n\n//     const isFormEmpty = () => {\n//         return !userState.userName.length ||\n//             !userState.password.length ||\n//             !userState.confirmpassword.length ||\n//             !userState.email.length;\n//     }\n\n//     const checkPassword = () => {\n//         if (userState.password.length < 8) {\n//             seterrorState((error) => error.concat({ message: \"Password length should be greater than 8\" }));\n//             return false;\n//         }\n//         else if (userState.password !== userState.confirmpassword) {\n//             seterrorState((error) => error.concat({ message: \"Password and Confirm Password does not match\" }));\n//             return false;\n//         }\n//         return true;\n//     }\n\n//     const onSubmit = (event) => {\n//         seterrorState(() => []);\n//         setIsSuccess(false);\n//         if (checkForm()) {\n//             setIsLoading(true);\n//             firebase.auth()\n//                 .createUserWithEmailAndPassword(userState.email, userState.password)\n//                 .then(createdUser => {\n//                     setIsLoading(false);\n//                     updateuserDetails(createdUser);\n//                 })\n//                 .catch(serverError => {\n//                     setIsLoading(false);\n//                     seterrorState((error) => error.concat(serverError));\n//                 })\n\n//         }\n//     }\n\n//     const updateuserDetails = (createdUser) => {\n//         if (createdUser) {\n//             setIsLoading(true);\n//             createdUser.user\n//                 .updateProfile({\n//                     displayName: userState.userName,\n//                     photoURL: `http://gravatar.com/avatar/${createdUser.user.uid}?d=identicon`\n//                 })\n//                 .then(() => {\n//                     setIsLoading(false);\n//                     saveUserInDB(createdUser);\n//                 })\n//                 .catch((serverError) => {\n//                     setIsLoading(false);\n//                     seterrorState((error) => error.concat(serverError));\n//                 })\n//         }\n//     }\n\n//     const saveUserInDB = (createdUser) => {\n//         setIsLoading(true);\n//         userCollectionRef.child(createdUser.user.uid).set({\n//             displayName: createdUser.user.displayName,\n//             photoURL: createdUser.user.photoURL\n//         })\n//             .then(() => {\n//                 setIsLoading(false);\n//                 setIsSuccess(true);\n//             })\n//             .catch(serverError => {\n//                 setIsLoading(false);\n//                 seterrorState((error) => error.concat(serverError));\n//             })\n//     }\n\n//     const formaterrors = () => {\n//         return errorState.map((error, index) => <p key={index}>{error.message}</p>)\n//     }\n\n//     return (<Grid verticalAlign=\"middle\" textAlign=\"center\" className=\"grid-form\" >\n//         <Grid.Column style={{ maxWidth: '500px' }}>\n//             <Header icon as=\"h2\">\n//                 <Icon name=\"slack\" />\n//                 Register\n//             </Header>\n//             <Form onSubmit={onSubmit}>\n//                 <Segment stacked>\n//                     <Form.Input\n//                         name=\"userName\"\n//                         value={userState.userName}\n//                         icon=\"user\"\n//                         iconPosition=\"left\"\n//                         onChange={handleInput}\n//                         type=\"text\"\n//                         placeholder=\"User Name\"\n//                     />\n//                     <Form.Input\n//                         name=\"email\"\n//                         value={userState.email}\n//                         icon=\"mail\"\n//                         iconPosition=\"left\"\n//                         onChange={handleInput}\n//                         type=\"email\"\n//                         placeholder=\"User Email\"\n//                     />\n//                     <Form.Input\n//                         name=\"password\"\n//                         value={userState.password}\n//                         icon=\"lock\"\n//                         iconPosition=\"left\"\n//                         onChange={handleInput}\n//                         type=\"password\"\n//                         placeholder=\"User Password\"\n//                     />\n//                     <Form.Input\n//                         name=\"confirmpassword\"\n//                         value={userState.confirmpassword}\n//                         icon=\"lock\"\n//                         iconPosition=\"left\"\n//                         onChange={handleInput}\n//                         type=\"password\"\n//                         placeholder=\"Confirm Password\"\n//                     />\n//                 </Segment>\n//                 <Button disabled={isLoading} loading={isLoading}>Submit</Button>\n//             </Form>\n//             {errorState.length > 0 && <Message error>\n//                 <h3>Errors</h3>\n//                 {formaterrors()}\n//             </Message>\n//             }\n//             {isSuccess && <Message success>\n//                 <h3>Successfully Registered</h3>\n//             </Message>\n//             }\n//             <Message>\n//                 Already an User? <Link to=\"/login\" >Login </Link>\n//             </Message>\n//         </Grid.Column>\n//     </Grid>)\n// }\n\n// export default Register;\n\nimport React, { useState } from 'react';\nimport { Grid, Form, Segment, Header, Icon, Button, Message } from 'semantic-ui-react'\nimport firebase from '../../../server/firebase';\nimport axios from \"axios\";\nimport \"../Auth.css\"\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from \"react-redux\";\n// import { registerHandler } from \"../../redux/action/auth-action\";\nconst Register = () => {\n    // const dispatch = useDispatch();\n    let user = {\n        userName: '',\n        email: '',\n        password: '',\n        confirmpassword: ''\n    }\n\n    let errors = [];\n\n    let userCollectionRef = firebase.database().ref('users');\n\n    const [userState, setuserState] = useState(user);\n    const [errorState, seterrorState] = useState(errors);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isSuccess, setIsSuccess] = useState(false);\n\n    const handleInput = (event) => {\n        let target = event.target;\n        setuserState((currentState) => {\n            let currentuser = { ...currentState };\n            currentuser[target.name] = target.value;\n            return currentuser;\n        })\n    }\n\n    const checkForm = () => {\n        if (isFormEmpty()) {\n            seterrorState((error) => error.concat({ message: \"Please fill in all fields\" }));\n            return false;\n        }\n        else if (!checkPassword()) {\n            return false;\n        }\n        return true;\n    }\n\n    const isFormEmpty = () => {\n        return !userState.userName.length ||\n            !userState.password.length ||\n            !userState.confirmpassword.length ||\n            !userState.email.length;\n    }\n\n    const checkPassword = () => {\n        if (userState.password.length < 8) {\n            seterrorState((error) => error.concat({ message: \"Password length should be greater than 8\" }));\n            return false;\n        }\n        else if (userState.password !== userState.confirmpassword) {\n            seterrorState((error) => error.concat({ message: \"Password and Confirm Password does not match\" }));\n            return false;\n        }\n        return true;\n    }\n\n    const onSubmit = (event) => {\n       \n    \n        seterrorState(() => []);\n        setIsSuccess(false);\n        if (checkForm()) {\n            setIsLoading(true);\n            firebase.auth()\n                .createUserWithEmailAndPassword(userState.email, userState.password)\n                .then(createdUser => {\n                    setIsLoading(false);\n                    updateuserDetails(createdUser);\n\n                })\n                // .then(res=>axios.post(\"http://localhost:2000/register\", {email:userState.email, password:userState.password}))\n                .catch(serverError => {\n                    setIsLoading(false);\n                    seterrorState((error) => error.concat(serverError));\n                })\n\n        }\n        // const newUser = { name:userState.userName, lastName, email:userState.email, password:userState.password, status: true, account:\"admin\" };\n        // dispatch(registerHandler(newUser));\n        // axios.post(\"http://localhost:2000/register\", {email:userState.email, password:userState.password})\n    }\n\n    const updateuserDetails = (createdUser) => {\n        if (createdUser) {\n            \n            setIsLoading(true);\n            createdUser.user\n                .updateProfile({\n                    displayName: userState.userName,\n                    photoURL: `http://gravatar.com/avatar/${createdUser.user.uid}?d=identicon`,\n                    email:userState.email,\n                    status:false,\n                    account:\"user\"\n                })\n                .then(() => {\n                    setIsLoading(false);\n                    saveUserInDB(createdUser);\n                })\n                .catch((serverError) => {\n                    setIsLoading(false);\n                    seterrorState((error) => error.concat(serverError));\n                })\n\n                // axios.post(\"http://localhost:2000/register\", {email:userState.email, password:userState.password})\n        }\n    }\n\n    const saveUserInDB = (createdUser) => {\n        setIsLoading(true);\n        userCollectionRef.child(createdUser.user.uid).set({\n            displayName: createdUser.user.displayName,\n            photoURL: createdUser.user.photoURL,\n            email:createdUser.user.email,\n            status:false,\n            account:\"user\"\n\n\n        })\n            .then(() => {\n                setIsLoading(false);\n                setIsSuccess(true);\n            })\n            .catch(serverError => {\n                setIsLoading(false);\n                seterrorState((error) => error.concat(serverError));\n            })\n          \n    }\n\n    const formaterrors = () => {\n        return errorState.map((error, index) => <p key={index}>{error.message}</p>)\n    }\n\n    return (<Grid verticalAlign=\"middle\" textAlign=\"center\" className=\"grid-form\" >\n        <Grid.Column style={{ maxWidth: '500px' }}>\n            <Header icon as=\"h2\">\n                <Icon name=\"community\" />\n                Register\n            </Header>\n            <Form onSubmit={onSubmit}>\n                <Segment stacked>\n                    <Form.Input\n                        name=\"userName\"\n                        value={userState.userName}\n                        icon=\"user\"\n                        iconPosition=\"left\"\n                        onChange={handleInput}\n                        type=\"text\"\n                        placeholder=\"User Name\"\n                    />\n                    <Form.Input\n                        name=\"email\"\n                        value={userState.email}\n                        icon=\"mail\"\n                        iconPosition=\"left\"\n                        onChange={handleInput}\n                        type=\"email\"\n                        placeholder=\"User Email\"\n                    />\n                    <Form.Input\n                        name=\"password\"\n                        value={userState.password}\n                        icon=\"lock\"\n                        iconPosition=\"left\"\n                        onChange={handleInput}\n                        type=\"password\"\n                        placeholder=\"User Password\"\n                    />\n                    <Form.Input\n                        name=\"confirmpassword\"\n                        value={userState.confirmpassword}\n                        icon=\"lock\"\n                        iconPosition=\"left\"\n                        onChange={handleInput}\n                        type=\"password\"\n                        placeholder=\"Confirm Password\"\n                    />\n                </Segment>\n                <Button disabled={isLoading} loading={isLoading}>Submit</Button>\n            </Form>\n            {errorState.length > 0 && <Message error>\n                <h3>Errors</h3>\n                {formaterrors()}\n            </Message>\n            }\n            {isSuccess && <Message success>\n                <h3>Successfully Registered</h3>\n            </Message>\n            }\n            <Message>\n                Already an User? <Link to=\"/login\" >Login </Link>\n            </Message>\n        </Grid.Column>\n    </Grid>)\n}\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}