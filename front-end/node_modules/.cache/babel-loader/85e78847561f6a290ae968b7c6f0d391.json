{"ast":null,"code":"var _jsxFileName = \"/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/src/components/views/ListContact.js\";\n// import React, { useState } from \"react\";\n// import Search from \"../Search\";\n// import Contact from \"./Contact\";\n// const ListContact = () => {\n//   const [searchedName, setSearchedName] = useState(\"\");\n//   const searcheditem = (search) => {\n//     setSearchedName(search);\n//     console.log(searchedName);\n//   };\n//   return (\n//     <>\n//       <Search searcheditem={searcheditem} />\n//       <Contact searchedName={searchedName} />\n//     </>\n//   );\n// };\n// export default ListContact;\n// import React, { useState, useEffect } from \"react\";\n// import { connect } from \"react-redux\";\n// // import firebase from \"../../server/firebase\";\n// import firebase from \"../../server/firebase\";\n// const ListContact = (props) => {\n//   const [usersState, setUsersState] = useState([]);\n//   const [connectedUsersState, setConnectedUsersState] = useState([]);\n//   const usersRef = firebase.database().ref(\"users\");\n//   const connectedRef = firebase.database().ref(\".info/connected\");\n//   const statusRef = firebase.database().ref(\"status\");\n//   useEffect(() => {\n//     usersRef.on(\"child_added\", (snap) => {\n//       setUsersState((currentState) => {\n//         let updatedState = [...currentState];\n//         let user = snap.val();\n//         user.name = user.displayName;\n//         user.email = user.email;\n//         user.id = snap.key;\n//         user.isPrivateChat = true;\n//         updatedState.push(user);\n//         return updatedState;\n//       });\n//     });\n//     connectedRef.on(\"value\", (snap) => {\n//       if (props.user && snap.val()) {\n//         const userStatusRef = statusRef.child(props.user.uid);\n//         userStatusRef.set(true);\n//         userStatusRef.onDisconnect().remove();\n//       }\n//     });\n//     return () => {\n//       usersRef.off();\n//       connectedRef.off();\n//     };\n//   }, [props.user]);\n//   useEffect(() => {\n//     statusRef.on(\"child_added\", (snap) => {\n//       setConnectedUsersState((currentState) => {\n//         let updatedState = [...currentState];\n//         updatedState.push(snap.key);\n//         return updatedState;\n//       });\n//     });\n//     statusRef.on(\"child_removed\", (snap) => {\n//       setConnectedUsersState((currentState) => {\n//         let updatedState = [...currentState];\n//         let index = updatedState.indexOf(snap.key);\n//         updatedState.splice(index, 1);\n//         return updatedState;\n//       });\n//     });\n//     return () => statusRef.off();\n//   }, [usersState]);\n//   const displayUsers = () => {\n//     if (usersState.length > 0) {\n//       return usersState\n//         .filter((user) => user.id !== props.user.uid)\n//         .map((user) => {\n//           return (\n//             <div\n//               style={{\n//                 display: \"flex\",\n//                 justifyContent: \"space-around\",\n//                 marginBottom: 20,\n//               }}\n//             >\n//               <div>\n//                 {console.log(user, \"uuuuusre\")}\n//                 {user.name}\n//               </div>\n//               <div>\n//                 {/* {user.name}@SoftCommunity.com */}\n//                 {user.email}\n//               </div>\n//             </div>\n//           );\n//         });\n//     }\n//   };\n//   // const selectUser = (user) => {\n//   //   let userTemp = { ...user };\n//   //   userTemp.id = generateChannelId(user.id);\n//   //   setLastVisited(props.user, props.channel);\n//   //   setLastVisited(props.user, userTemp);\n//   //   props.selectChannel(userTemp);\n//   // };\n//   // const setLastVisited = (user, channel) => {\n//   //   const lastVisited = usersRef\n//   //     .child(user.uid)\n//   //     .child(\"lastVisited\")\n//   //     .child(channel.id);\n//   //   lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n//   //   lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n//   // };\n//   // const generateChannelId = (userId) => {\n//   //   if (props.user.uid < userId) {\n//   //     return props.user.uid + userId;\n//   //   } else {\n//   //     return userId + props.user.uid;\n//   //   }\n//   // };\n//   return <div>{displayUsers()}</div>;\n// };\n// const mapStateToProps = (state) => {\n//   return {\n//     user: state.user.currentUser,\n//     channel: state.channel.currentChannel,\n//   };\n// };\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     // selectChannel: (channel) => dispatch(setChannel(channel)),\n//   };\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(ListContact);\nimport React from \"react\";\nimport { Lookup, DropDownOptions } from \"devextreme-react/lookup\";\nimport { employees } from \"./data.js\"; // import Field from \"./Field.js\";\n// import Item from \"./Item.js\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Item({\n  Picture,\n  Prefix,\n  FirstName,\n  LastName\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"custom-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: Picture\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: `${Prefix} ${FirstName} ${LastName}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Item;\nconst searchExpression = [\"FirstName\", \"LastName\", \"Prefix\"];\n\nclass App extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dx-fieldset\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dx-fieldset-header\",\n          children: \"Custom Item Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dx-field\",\n          children: /*#__PURE__*/_jsxDEV(Lookup, {\n            items: employees,\n            displayExpr: this.getDisplayExpr,\n            searchExpr: searchExpression,\n            valueExpr: \"ID\",\n            placeholder: \"Select employee\",\n            itemRender: Item,\n            children: /*#__PURE__*/_jsxDEV(DropDownOptions, {\n              title: \"Select employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this);\n  }\n\n  getDisplayExpr(item) {\n    return item ? `${item.FirstName} ${item.LastName}` : \"\";\n  }\n\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"Item\");","map":{"version":3,"sources":["/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/src/components/views/ListContact.js"],"names":["React","Lookup","DropDownOptions","employees","Item","Picture","Prefix","FirstName","LastName","searchExpression","App","Component","render","getDisplayExpr","item"],"mappingskB,OAAlB;AACA,SAASC,MAAT,EAAiBC,eAAjB,QAAwC,yBAAxC;AAEA,SAASC,SAAT,QAA0B,WAA1B,C,CACA;AACA;;;;AAEA,SAASC,IAAT,CAAc;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,MAAX;AAAmBC,EAAAA,SAAnB;AAA8BC,EAAAA;AAA9B,CAAd,EAAwD;AACtD,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACE;AAAK,MAAA,GAAG,EAAEH;AAAV;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAO,GAAEC,MAAO,IAAGC,SAAU,IAAGC,QAAS;AAAzC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;KAPQJ,I;AAQT,MAAMK,gBAAgB,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,QAA1B,CAAzB;;AAEA,MAAMC,GAAN,SAAkBV,KAAK,CAACW,SAAxB,CAAkC;AAChCC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,iCACE,QAAC,MAAD;AACE,YAAA,KAAK,EAAET,SADT;AAEE,YAAA,WAAW,EAAE,KAAKU,cAFpB;AAGE,YAAA,UAAU,EAAEJ,gBAHd;AAIE,YAAA,SAAS,EAAC,IAJZ;AAKE,YAAA,WAAW,EAAC,iBALd;AAME,YAAA,UAAU,EAAEL,IANd;AAAA,mCAQE,QAAC,eAAD;AAAiB,cAAA,KAAK,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AAEDS,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnB,WAAOA,IAAI,GAAI,GAAEA,IAAI,CAACP,SAAU,IAAGO,IAAI,CAACN,QAAS,EAAtC,GAA0C,EAArD;AACD;;AAzB+B;;AA4BlC,eAAeE,GAAf","sourcesContent":["// import React, { useState } from \"react\";\n\n// import Search from \"../Search\";\n// import Contact from \"./Contact\";\n// const ListContact = () => {\n//   const [searchedName, setSearchedName] = useState(\"\");\n\n//   const searcheditem = (search) => {\n//     setSearchedName(search);\n//     console.log(searchedName);\n//   };\n//   return (\n//     <>\n//       <Search searcheditem={searcheditem} />\n\n//       <Contact searchedName={searchedName} />\n//     </>\n//   );\n// };\n\n// export default ListContact;\n\n// import React, { useState, useEffect } from \"react\";\n// import { connect } from \"react-redux\";\n// // import firebase from \"../../server/firebase\";\n// import firebase from \"../../server/firebase\";\n\n// const ListContact = (props) => {\n//   const [usersState, setUsersState] = useState([]);\n\n//   const [connectedUsersState, setConnectedUsersState] = useState([]);\n\n//   const usersRef = firebase.database().ref(\"users\");\n\n//   const connectedRef = firebase.database().ref(\".info/connected\");\n\n//   const statusRef = firebase.database().ref(\"status\");\n\n//   useEffect(() => {\n//     usersRef.on(\"child_added\", (snap) => {\n//       setUsersState((currentState) => {\n//         let updatedState = [...currentState];\n\n//         let user = snap.val();\n//         user.name = user.displayName;\n//         user.email = user.email;\n//         user.id = snap.key;\n//         user.isPrivateChat = true;\n//         updatedState.push(user);\n\n//         return updatedState;\n//       });\n//     });\n\n//     connectedRef.on(\"value\", (snap) => {\n//       if (props.user && snap.val()) {\n//         const userStatusRef = statusRef.child(props.user.uid);\n//         userStatusRef.set(true);\n//         userStatusRef.onDisconnect().remove();\n//       }\n//     });\n\n//     return () => {\n//       usersRef.off();\n//       connectedRef.off();\n//     };\n//   }, [props.user]);\n\n//   useEffect(() => {\n//     statusRef.on(\"child_added\", (snap) => {\n//       setConnectedUsersState((currentState) => {\n//         let updatedState = [...currentState];\n//         updatedState.push(snap.key);\n//         return updatedState;\n//       });\n//     });\n\n//     statusRef.on(\"child_removed\", (snap) => {\n//       setConnectedUsersState((currentState) => {\n//         let updatedState = [...currentState];\n\n//         let index = updatedState.indexOf(snap.key);\n//         updatedState.splice(index, 1);\n//         return updatedState;\n//       });\n//     });\n\n//     return () => statusRef.off();\n//   }, [usersState]);\n\n//   const displayUsers = () => {\n//     if (usersState.length > 0) {\n//       return usersState\n//         .filter((user) => user.id !== props.user.uid)\n//         .map((user) => {\n//           return (\n//             <div\n//               style={{\n//                 display: \"flex\",\n//                 justifyContent: \"space-around\",\n//                 marginBottom: 20,\n//               }}\n//             >\n//               <div>\n//                 {console.log(user, \"uuuuusre\")}\n//                 {user.name}\n//               </div>\n//               <div>\n//                 {/* {user.name}@SoftCommunity.com */}\n//                 {user.email}\n//               </div>\n//             </div>\n//           );\n//         });\n//     }\n//   };\n\n//   // const selectUser = (user) => {\n//   //   let userTemp = { ...user };\n//   //   userTemp.id = generateChannelId(user.id);\n//   //   setLastVisited(props.user, props.channel);\n//   //   setLastVisited(props.user, userTemp);\n//   //   props.selectChannel(userTemp);\n//   // };\n\n//   // const setLastVisited = (user, channel) => {\n//   //   const lastVisited = usersRef\n//   //     .child(user.uid)\n//   //     .child(\"lastVisited\")\n//   //     .child(channel.id);\n//   //   lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n//   //   lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n//   // };\n\n//   // const generateChannelId = (userId) => {\n//   //   if (props.user.uid < userId) {\n//   //     return props.user.uid + userId;\n//   //   } else {\n//   //     return userId + props.user.uid;\n//   //   }\n//   // };\n\n//   return <div>{displayUsers()}</div>;\n// };\n\n// const mapStateToProps = (state) => {\n//   return {\n//     user: state.user.currentUser,\n//     channel: state.channel.currentChannel,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     // selectChannel: (channel) => dispatch(setChannel(channel)),\n//   };\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ListContact);\n\nimport React from \"react\";\nimport { Lookup, DropDownOptions } from \"devextreme-react/lookup\";\n\nimport { employees } from \"./data.js\";\n// import Field from \"./Field.js\";\n// import Item from \"./Item.js\";\n\nfunction Item({ Picture, Prefix, FirstName, LastName }) {\n  return (\n    <div className=\"custom-item\">\n      <img src={Picture} />\n      <div>{`${Prefix} ${FirstName} ${LastName}`}</div>\n    </div>\n  );\n}\nconst searchExpression = [\"FirstName\", \"LastName\", \"Prefix\"];\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <div className=\"dx-fieldset\">\n          <div className=\"dx-fieldset-header\">Custom Item Template</div>\n          <div className=\"dx-field\">\n            <Lookup\n              items={employees}\n              displayExpr={this.getDisplayExpr}\n              searchExpr={searchExpression}\n              valueExpr=\"ID\"\n              placeholder=\"Select employee\"\n              itemRender={Item}\n            >\n              <DropDownOptions title=\"Select employee\" />\n            </Lookup>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  getDisplayExpr(item) {\n    return item ? `${item.FirstName} ${item.LastName}` : \"\";\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}