{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/view_model/view_data_provider.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"groups\", \"groupOrientation\", \"groupByDate\", \"isAllDayPanelVisible\"];\nimport dateUtils from \"../../../../core/utils/date\";\nimport { getGroupPanelData } from \"../../../../renovation/ui/scheduler/view_model/group_panel/utils\";\nimport { isGroupingByDate, isHorizontalGroupingApplied, isVerticalGroupingApplied } from \"../../../../renovation/ui/scheduler/workspaces/utils\";\nimport { calculateIsGroupedAllDayPanel } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { DateHeaderDataGenerator } from \"./date_header_data_generator\";\nimport { GroupedDataMapProvider } from \"./grouped_data_map_provider\";\nimport { TimePanelDataGenerator } from \"./time_panel_data_generator\";\nimport { getViewDataGeneratorByViewType } from \"./utils\";\nimport timeZoneUtils from \"../../utils.timeZone\";\nexport default class ViewDataProvider {\n  constructor(viewType) {\n    this.viewDataGenerator = getViewDataGeneratorByViewType(viewType);\n    this.viewData = {};\n    this.completeViewDataMap = [];\n    this.completeDateHeaderMap = [];\n    this.viewDataMap = {};\n    this._groupedDataMapProvider = null;\n  }\n\n  get groupedDataMap() {\n    return this._groupedDataMapProvider.groupedDataMap;\n  }\n\n  get hiddenInterval() {\n    return this.viewDataGenerator.hiddenInterval;\n  }\n\n  isSkippedDate(date) {\n    return this.viewDataGenerator.isSkippedDate(date);\n  }\n\n  update(options, isGenerateNewViewData) {\n    this.viewDataGenerator = getViewDataGeneratorByViewType(options.viewType);\n    var viewDataGenerator = this.viewDataGenerator;\n    var dateHeaderDataGenerator = new DateHeaderDataGenerator(viewDataGenerator);\n    var timePanelDataGenerator = new TimePanelDataGenerator(viewDataGenerator);\n\n    var renderOptions = this._transformRenderOptions(options);\n\n    renderOptions.interval = this.viewDataGenerator.getInterval(renderOptions.hoursInterval);\n    this._options = renderOptions;\n\n    if (isGenerateNewViewData) {\n      this.completeViewDataMap = viewDataGenerator.getCompleteViewDataMap(renderOptions);\n      this.completeDateHeaderMap = dateHeaderDataGenerator.getCompleteDateHeaderMap(renderOptions, this.completeViewDataMap);\n\n      if (renderOptions.isGenerateTimePanelData) {\n        this.completeTimePanelMap = timePanelDataGenerator.getCompleteTimePanelMap(renderOptions, this.completeViewDataMap);\n      }\n    }\n\n    this.viewDataMap = viewDataGenerator.generateViewDataMap(this.completeViewDataMap, renderOptions);\n    this.updateViewData(renderOptions);\n    this._groupedDataMapProvider = new GroupedDataMapProvider(this.viewDataGenerator, this.viewDataMap, this.completeViewDataMap, {\n      isVerticalGrouping: renderOptions.isVerticalGrouping,\n      viewType: renderOptions.viewType\n    });\n    this.dateHeaderData = dateHeaderDataGenerator.generateDateHeaderData(this.completeDateHeaderMap, this.completeViewDataMap, renderOptions);\n\n    if (renderOptions.isGenerateTimePanelData) {\n      this.timePanelData = timePanelDataGenerator.generateTimePanelData(this.completeTimePanelMap, renderOptions);\n    }\n  }\n\n  createGroupedDataMapProvider() {\n    this._groupedDataMapProvider = new GroupedDataMapProvider(this.viewDataGenerator, this.viewDataMap, this.completeViewDataMap, {\n      isVerticalGrouping: this._options.isVerticalGrouping,\n      viewType: this._options.viewType\n    });\n  }\n\n  updateViewData(options) {\n    var renderOptions = this._transformRenderOptions(options);\n\n    this.viewDataMapWithSelection = this.viewDataGenerator.markSelectedAndFocusedCells(this.viewDataMap, renderOptions);\n    this.viewData = this.viewDataGenerator.getViewDataFromMap(this.completeViewDataMap, this.viewDataMapWithSelection, renderOptions);\n  }\n\n  _transformRenderOptions(renderOptions) {\n    var {\n      groups: groups,\n      groupOrientation: groupOrientation,\n      groupByDate: groupByDate,\n      isAllDayPanelVisible: isAllDayPanelVisible\n    } = renderOptions,\n        restOptions = _objectWithoutPropertiesLoose(renderOptions, _excluded);\n\n    return _extends({}, restOptions, {\n      startViewDate: this.viewDataGenerator._calculateStartViewDate(renderOptions),\n      isVerticalGrouping: isVerticalGroupingApplied(groups, groupOrientation),\n      isHorizontalGrouping: isHorizontalGroupingApplied(groups, groupOrientation),\n      isGroupedByDate: isGroupingByDate(groups, groupOrientation, groupByDate),\n      isGroupedAllDayPanel: calculateIsGroupedAllDayPanel(groups, groupOrientation, isAllDayPanelVisible),\n      groups: groups,\n      groupOrientation: groupOrientation,\n      isAllDayPanelVisible: isAllDayPanelVisible\n    });\n  }\n\n  getGroupPanelData(options) {\n    var renderOptions = this._transformRenderOptions(options);\n\n    if (renderOptions.groups.length > 0) {\n      var cellCount = this.getCellCount(renderOptions);\n      return getGroupPanelData(renderOptions.groups, cellCount, renderOptions.isGroupedByDate, renderOptions.isGroupedByDate ? 1 : cellCount);\n    }\n\n    return;\n  }\n\n  getGroupStartDate(groupIndex) {\n    return this._groupedDataMapProvider.getGroupStartDate(groupIndex);\n  }\n\n  getGroupEndDate(groupIndex) {\n    return this._groupedDataMapProvider.getGroupEndDate(groupIndex);\n  }\n\n  findGroupCellStartDate(groupIndex, startDate, endDate, isAllDay, isFindByDate) {\n    return this._groupedDataMapProvider.findGroupCellStartDate(groupIndex, startDate, endDate, isAllDay, isFindByDate);\n  }\n\n  findAllDayGroupCellStartDate(groupIndex, startDate) {\n    return this._groupedDataMapProvider.findAllDayGroupCellStartDate(groupIndex, startDate);\n  }\n\n  findCellPositionInMap(cellInfo) {\n    return this._groupedDataMapProvider.findCellPositionInMap(cellInfo);\n  }\n\n  getCellsGroup(groupIndex) {\n    return this._groupedDataMapProvider.getCellsGroup(groupIndex);\n  }\n\n  getCompletedGroupsInfo() {\n    return this._groupedDataMapProvider.getCompletedGroupsInfo();\n  }\n\n  getGroupIndices() {\n    return this._groupedDataMapProvider.getGroupIndices();\n  }\n\n  getLastGroupCellPosition(groupIndex) {\n    return this._groupedDataMapProvider.getLastGroupCellPosition(groupIndex);\n  }\n\n  getRowCountInGroup(groupIndex) {\n    return this._groupedDataMapProvider.getRowCountInGroup(groupIndex);\n  }\n\n  getCellData(rowIndex, columnIndex, isAllDay) {\n    if (isAllDay && !this._options.isVerticalGrouping) {\n      return this.viewDataMap.allDayPanelMap[columnIndex].cellData;\n    }\n\n    var {\n      dateTableMap: dateTableMap\n    } = this.viewDataMap;\n    var {\n      cellData: cellData\n    } = dateTableMap[rowIndex][columnIndex];\n    return cellData;\n  }\n\n  getCellsByGroupIndexAndAllDay(groupIndex, allDay) {\n    var rowsPerGroup = this._getRowCountWithAllDayRows();\n\n    var isShowAllDayPanel = this._options.isAllDayPanelVisible;\n    var firstRowInGroup = this._options.isVerticalGrouping ? groupIndex * rowsPerGroup : 0;\n    var lastRowInGroup = this._options.isVerticalGrouping ? (groupIndex + 1) * rowsPerGroup - 1 : rowsPerGroup;\n    var correctedFirstRow = isShowAllDayPanel && !allDay ? firstRowInGroup + 1 : firstRowInGroup;\n    var correctedLastRow = allDay ? correctedFirstRow : lastRowInGroup;\n    return this.completeViewDataMap.slice(correctedFirstRow, correctedLastRow + 1).map(row => row.filter(_ref => {\n      var {\n        groupIndex: currentGroupIndex\n      } = _ref;\n      return groupIndex === currentGroupIndex;\n    }));\n  }\n\n  getGroupData(groupIndex) {\n    var {\n      groupedData: groupedData\n    } = this.viewData;\n\n    if (this._options.isVerticalGrouping) {\n      return groupedData.filter(item => item.groupIndex === groupIndex)[0];\n    }\n\n    var filterCells = row => null === row || void 0 === row ? void 0 : row.filter(cell => cell.groupIndex === groupIndex);\n\n    var {\n      allDayPanel: allDayPanel,\n      dateTable: dateTable\n    } = groupedData[0];\n    var filteredDateTable = [];\n    dateTable.forEach(row => {\n      filteredDateTable.push(filterCells(row));\n    });\n    return {\n      allDayPanel: filterCells(allDayPanel),\n      dateTable: filteredDateTable\n    };\n  }\n\n  getCellCountWithGroup(groupIndex) {\n    var rowIndex = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n    var {\n      dateTableGroupedMap: dateTableGroupedMap\n    } = this.groupedDataMap;\n    return dateTableGroupedMap.filter((_, index) => index <= groupIndex).reduce((previous, row) => previous + row[rowIndex].length, 0);\n  }\n\n  getAllDayPanel(groupIndex) {\n    var groupData = this.getGroupData(groupIndex);\n    return null === groupData || void 0 === groupData ? void 0 : groupData.allDayPanel;\n  }\n\n  isGroupIntersectDateInterval(groupIndex, startDate, endDate) {\n    var groupStartDate = this.getGroupStartDate(groupIndex);\n    var groupEndDate = this.getGroupEndDate(groupIndex);\n    return startDate < groupEndDate && endDate > groupStartDate;\n  }\n\n  findGlobalCellPosition(date) {\n    var groupIndex = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n    var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n    var {\n      completeViewDataMap: completeViewDataMap\n    } = this;\n    var showAllDayPanel = this._options.isAllDayPanelVisible;\n\n    for (var rowIndex = 0; rowIndex < completeViewDataMap.length; rowIndex += 1) {\n      var currentRow = completeViewDataMap[rowIndex];\n\n      for (var columnIndex = 0; columnIndex < currentRow.length; columnIndex += 1) {\n        var cellData = currentRow[columnIndex];\n        var {\n          startDate: currentStartDate,\n          endDate: currentEndDate,\n          groupIndex: currentGroupIndex,\n          allDay: currentAllDay\n        } = cellData;\n\n        if (groupIndex === currentGroupIndex && allDay === !!currentAllDay && this._compareDatesAndAllDay(date, currentStartDate, currentEndDate, allDay)) {\n          return {\n            position: {\n              columnIndex: columnIndex,\n              rowIndex: showAllDayPanel && !this._options.isVerticalGrouping ? rowIndex - 1 : rowIndex\n            },\n            cellData: cellData\n          };\n        }\n      }\n    }\n  }\n\n  _compareDatesAndAllDay(date, cellStartDate, cellEndDate, allDay) {\n    var time = date.getTime();\n    var trimmedTime = dateUtils.trimTime(date).getTime();\n    var cellStartTime = cellStartDate.getTime();\n    var cellEndTime = cellEndDate.getTime();\n    return !allDay && time >= cellStartTime && time < cellEndTime || allDay && trimmedTime === cellStartTime;\n  }\n\n  getSkippedDaysCount(groupIndex, startDate, endDate, daysCount) {\n    var {\n      dateTableGroupedMap: dateTableGroupedMap\n    } = this._groupedDataMapProvider.groupedDataMap;\n    var groupedData = dateTableGroupedMap[groupIndex];\n    var includedDays = 0;\n\n    for (var rowIndex = 0; rowIndex < groupedData.length; rowIndex += 1) {\n      for (var columnIndex = 0; columnIndex < groupedData[rowIndex].length; columnIndex += 1) {\n        var cell = groupedData[rowIndex][columnIndex].cellData;\n\n        if (startDate.getTime() < cell.endDate.getTime() && endDate.getTime() > cell.startDate.getTime()) {\n          includedDays += 1;\n        }\n      }\n    }\n\n    var lastCell = groupedData[groupedData.length - 1][groupedData[0].length - 1].cellData;\n    var lastCellStart = dateUtils.trimTime(lastCell.startDate);\n    var daysAfterView = Math.floor((endDate.getTime() - lastCellStart.getTime()) / dateUtils.dateToMilliseconds(\"day\"));\n    var deltaDays = daysAfterView > 0 ? daysAfterView : 0;\n    return daysCount - includedDays - deltaDays;\n  }\n\n  getColumnsCount() {\n    var {\n      dateTableMap: dateTableMap\n    } = this.viewDataMap;\n    return dateTableMap ? dateTableMap[0].length : 0;\n  }\n\n  getViewEdgeIndices(isAllDayPanel) {\n    if (isAllDayPanel) {\n      return {\n        firstColumnIndex: 0,\n        lastColumnIndex: this.viewDataMap.allDayPanelMap.length - 1,\n        firstRowIndex: 0,\n        lastRowIndex: 0\n      };\n    }\n\n    return {\n      firstColumnIndex: 0,\n      lastColumnIndex: this.viewDataMap.dateTableMap[0].length - 1,\n      firstRowIndex: 0,\n      lastRowIndex: this.viewDataMap.dateTableMap.length - 1\n    };\n  }\n\n  getGroupEdgeIndices(groupIndex, isAllDay) {\n    var groupedDataMap = this.groupedDataMap.dateTableGroupedMap[groupIndex];\n    var cellsCount = groupedDataMap[0].length;\n    var rowsCount = groupedDataMap.length;\n    var firstColumnIndex = groupedDataMap[0][0].position.columnIndex;\n    var lastColumnIndex = groupedDataMap[0][cellsCount - 1].position.columnIndex;\n\n    if (isAllDay) {\n      return {\n        firstColumnIndex: firstColumnIndex,\n        lastColumnIndex: lastColumnIndex,\n        firstRowIndex: 0,\n        lastRowIndex: 0\n      };\n    }\n\n    return {\n      firstColumnIndex: firstColumnIndex,\n      lastColumnIndex: lastColumnIndex,\n      firstRowIndex: groupedDataMap[0][0].position.rowIndex,\n      lastRowIndex: groupedDataMap[rowsCount - 1][0].position.rowIndex\n    };\n  }\n\n  isSameCell(firstCellData, secondCellData) {\n    var {\n      startDate: firstStartDate,\n      groupIndex: firstGroupIndex,\n      allDay: firstAllDay,\n      index: firstIndex\n    } = firstCellData;\n    var {\n      startDate: secondStartDate,\n      groupIndex: secondGroupIndex,\n      allDay: secondAllDay,\n      index: secondIndex\n    } = secondCellData;\n    return firstStartDate.getTime() === secondStartDate.getTime() && firstGroupIndex === secondGroupIndex && firstAllDay === secondAllDay && firstIndex === secondIndex;\n  }\n\n  getLastViewDate() {\n    var completeViewDataMap = this.completeViewDataMap;\n    var rowsCount = completeViewDataMap.length - 1;\n    return completeViewDataMap[rowsCount][completeViewDataMap[rowsCount].length - 1].endDate;\n  }\n\n  getStartViewDate() {\n    return this._options.startViewDate;\n  }\n\n  getIntervalDuration(intervalCount) {\n    return this.viewDataGenerator._getIntervalDuration(intervalCount);\n  }\n\n  getLastCellEndDate() {\n    return new Date(this.getLastViewDate().getTime() - dateUtils.dateToMilliseconds(\"minute\"));\n  }\n\n  getLastViewDateByEndDayHour(endDayHour) {\n    var lastCellEndDate = this.getLastCellEndDate();\n    var endTime = dateUtils.dateTimeFromDecimal(endDayHour);\n    var endDateOfLastViewCell = new Date(lastCellEndDate.setHours(endTime.hours, endTime.minutes));\n    return this._adjustEndDateByDaylightDiff(lastCellEndDate, endDateOfLastViewCell);\n  }\n\n  _adjustEndDateByDaylightDiff(startDate, endDate) {\n    var daylightDiff = timeZoneUtils.getDaylightOffsetInMs(startDate, endDate);\n    var endDateOfLastViewCell = new Date(endDate.getTime() - daylightDiff);\n    return new Date(endDateOfLastViewCell.getTime() - dateUtils.dateToMilliseconds(\"minute\"));\n  }\n\n  getCellCountInDay(startDayHour, endDayHour, hoursInterval) {\n    return this.viewDataGenerator.getCellCountInDay(startDayHour, endDayHour, hoursInterval);\n  }\n\n  getCellCount(options) {\n    return this.viewDataGenerator.getCellCount(options);\n  }\n\n  getRowCount(options) {\n    return this.viewDataGenerator.getRowCount(options);\n  }\n\n  getVisibleDayDuration(startDayHour, endDayHour, hoursInterval) {\n    return this.viewDataGenerator.getVisibleDayDuration(startDayHour, endDayHour, hoursInterval);\n  }\n\n  _getRowCountWithAllDayRows() {\n    var allDayRowCount = this._options.isAllDayPanelVisible ? 1 : 0;\n    return this.getRowCount(this._options) + allDayRowCount;\n  }\n\n  getFirstDayOfWeek(firstDayOfWeekOption) {\n    return this.viewDataGenerator.getFirstDayOfWeek(firstDayOfWeekOption);\n  }\n\n  setViewOptions(options) {\n    this._options = this._transformRenderOptions(options);\n  }\n\n  getViewOptions() {\n    return this._options;\n  }\n\n}","map":{"version":3,"sources":["/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/node_modules/devextreme/esm/ui/scheduler/workspaces/view_model/view_data_provider.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","dateUtils","getGroupPanelData","isGroupingByDate","isHorizontalGroupingApplied","isVerticalGroupingApplied","calculateIsGroupedAllDayPanel","DateHeaderDataGenerator","GroupedDataMapProvider","TimePanelDataGenerator","getViewDataGeneratorByViewType","timeZoneUtils","ViewDataProvider","constructor","viewType","viewDataGenerator","viewData","completeViewDataMap","completeDateHeaderMap","viewDataMap","_groupedDataMapProvider","groupedDataMap","hiddenInterval","isSkippedDate","date","update","options","isGenerateNewViewData","dateHeaderDataGenerator","timePanelDataGenerator","renderOptions","_transformRenderOptions","interval","getInterval","hoursInterval","_options","getCompleteViewDataMap","getCompleteDateHeaderMap","isGenerateTimePanelData","completeTimePanelMap","getCompleteTimePanelMap","generateViewDataMap","updateViewData","isVerticalGrouping","dateHeaderData","generateDateHeaderData","timePanelData","generateTimePanelData","createGroupedDataMapProvider","viewDataMapWithSelection","markSelectedAndFocusedCells","getViewDataFromMap","groups","groupOrientation","groupByDate","isAllDayPanelVisible","restOptions","startViewDate","_calculateStartViewDate","isHorizontalGrouping","isGroupedByDate","isGroupedAllDayPanel","length","cellCount","getCellCount","getGroupStartDate","groupIndex","getGroupEndDate","findGroupCellStartDate","startDate","endDate","isAllDay","isFindByDate","findAllDayGroupCellStartDate","findCellPositionInMap","cellInfo","getCellsGroup","getCompletedGroupsInfo","getGroupIndices","getLastGroupCellPosition","getRowCountInGroup","getCellData","rowIndex","columnIndex","allDayPanelMap","cellData","dateTableMap","getCellsByGroupIndexAndAllDay","allDay","rowsPerGroup","_getRowCountWithAllDayRows","isShowAllDayPanel","firstRowInGroup","lastRowInGroup","correctedFirstRow","correctedLastRow","slice","map","row","filter","_ref","currentGroupIndex","getGroupData","groupedData","item","filterCells","cell","allDayPanel","dateTable","filteredDateTable","forEach","push","getCellCountWithGroup","arguments","dateTableGroupedMap","_","index","reduce","previous","getAllDayPanel","groupData","isGroupIntersectDateInterval","groupStartDate","groupEndDate","findGlobalCellPosition","showAllDayPanel","currentRow","currentStartDate","currentEndDate","currentAllDay","_compareDatesAndAllDay","position","cellStartDate","cellEndDate","time","getTime","trimmedTime","trimTime","cellStartTime","cellEndTime","getSkippedDaysCount","daysCount","includedDays","lastCell","lastCellStart","daysAfterView","Math","floor","dateToMilliseconds","deltaDays","getColumnsCount","getViewEdgeIndices","isAllDayPanel","firstColumnIndex","lastColumnIndex","firstRowIndex","lastRowIndex","getGroupEdgeIndices","cellsCount","rowsCount","isSameCell","firstCellData","secondCellData","firstStartDate","firstGroupIndex","firstAllDay","firstIndex","secondStartDate","secondGroupIndex","secondAllDay","secondIndex","getLastViewDate","getStartViewDate","getIntervalDuration","intervalCount","_getIntervalDuration","getLastCellEndDate","Date","getLastViewDateByEndDayHour","endDayHour","lastCellEndDate","endTime","dateTimeFromDecimal","endDateOfLastViewCell","setHours","hours","minutes","_adjustEndDateByDaylightDiff","daylightDiff","getDaylightOffsetInMs","getCellCountInDay","startDayHour","getRowCount","getVisibleDayDuration","allDayRowCount","getFirstDayOfWeek","firstDayOfWeekOption","setViewOptions","getViewOptions"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/view_model/view_data_provider.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nvar _excluded = [\"groups\", \"groupOrientation\", \"groupByDate\", \"isAllDayPanelVisible\"];\r\nimport dateUtils from \"../../../../core/utils/date\";\r\nimport {\r\n    getGroupPanelData\r\n} from \"../../../../renovation/ui/scheduler/view_model/group_panel/utils\";\r\nimport {\r\n    isGroupingByDate,\r\n    isHorizontalGroupingApplied,\r\n    isVerticalGroupingApplied\r\n} from \"../../../../renovation/ui/scheduler/workspaces/utils\";\r\nimport {\r\n    calculateIsGroupedAllDayPanel\r\n} from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    DateHeaderDataGenerator\r\n} from \"./date_header_data_generator\";\r\nimport {\r\n    GroupedDataMapProvider\r\n} from \"./grouped_data_map_provider\";\r\nimport {\r\n    TimePanelDataGenerator\r\n} from \"./time_panel_data_generator\";\r\nimport {\r\n    getViewDataGeneratorByViewType\r\n} from \"./utils\";\r\nimport timeZoneUtils from \"../../utils.timeZone\";\r\nexport default class ViewDataProvider {\r\n    constructor(viewType) {\r\n        this.viewDataGenerator = getViewDataGeneratorByViewType(viewType);\r\n        this.viewData = {};\r\n        this.completeViewDataMap = [];\r\n        this.completeDateHeaderMap = [];\r\n        this.viewDataMap = {};\r\n        this._groupedDataMapProvider = null\r\n    }\r\n    get groupedDataMap() {\r\n        return this._groupedDataMapProvider.groupedDataMap\r\n    }\r\n    get hiddenInterval() {\r\n        return this.viewDataGenerator.hiddenInterval\r\n    }\r\n    isSkippedDate(date) {\r\n        return this.viewDataGenerator.isSkippedDate(date)\r\n    }\r\n    update(options, isGenerateNewViewData) {\r\n        this.viewDataGenerator = getViewDataGeneratorByViewType(options.viewType);\r\n        var viewDataGenerator = this.viewDataGenerator;\r\n        var dateHeaderDataGenerator = new DateHeaderDataGenerator(viewDataGenerator);\r\n        var timePanelDataGenerator = new TimePanelDataGenerator(viewDataGenerator);\r\n        var renderOptions = this._transformRenderOptions(options);\r\n        renderOptions.interval = this.viewDataGenerator.getInterval(renderOptions.hoursInterval);\r\n        this._options = renderOptions;\r\n        if (isGenerateNewViewData) {\r\n            this.completeViewDataMap = viewDataGenerator.getCompleteViewDataMap(renderOptions);\r\n            this.completeDateHeaderMap = dateHeaderDataGenerator.getCompleteDateHeaderMap(renderOptions, this.completeViewDataMap);\r\n            if (renderOptions.isGenerateTimePanelData) {\r\n                this.completeTimePanelMap = timePanelDataGenerator.getCompleteTimePanelMap(renderOptions, this.completeViewDataMap)\r\n            }\r\n        }\r\n        this.viewDataMap = viewDataGenerator.generateViewDataMap(this.completeViewDataMap, renderOptions);\r\n        this.updateViewData(renderOptions);\r\n        this._groupedDataMapProvider = new GroupedDataMapProvider(this.viewDataGenerator, this.viewDataMap, this.completeViewDataMap, {\r\n            isVerticalGrouping: renderOptions.isVerticalGrouping,\r\n            viewType: renderOptions.viewType\r\n        });\r\n        this.dateHeaderData = dateHeaderDataGenerator.generateDateHeaderData(this.completeDateHeaderMap, this.completeViewDataMap, renderOptions);\r\n        if (renderOptions.isGenerateTimePanelData) {\r\n            this.timePanelData = timePanelDataGenerator.generateTimePanelData(this.completeTimePanelMap, renderOptions)\r\n        }\r\n    }\r\n    createGroupedDataMapProvider() {\r\n        this._groupedDataMapProvider = new GroupedDataMapProvider(this.viewDataGenerator, this.viewDataMap, this.completeViewDataMap, {\r\n            isVerticalGrouping: this._options.isVerticalGrouping,\r\n            viewType: this._options.viewType\r\n        })\r\n    }\r\n    updateViewData(options) {\r\n        var renderOptions = this._transformRenderOptions(options);\r\n        this.viewDataMapWithSelection = this.viewDataGenerator.markSelectedAndFocusedCells(this.viewDataMap, renderOptions);\r\n        this.viewData = this.viewDataGenerator.getViewDataFromMap(this.completeViewDataMap, this.viewDataMapWithSelection, renderOptions)\r\n    }\r\n    _transformRenderOptions(renderOptions) {\r\n        var {\r\n            groups: groups,\r\n            groupOrientation: groupOrientation,\r\n            groupByDate: groupByDate,\r\n            isAllDayPanelVisible: isAllDayPanelVisible\r\n        } = renderOptions, restOptions = _objectWithoutPropertiesLoose(renderOptions, _excluded);\r\n        return _extends({}, restOptions, {\r\n            startViewDate: this.viewDataGenerator._calculateStartViewDate(renderOptions),\r\n            isVerticalGrouping: isVerticalGroupingApplied(groups, groupOrientation),\r\n            isHorizontalGrouping: isHorizontalGroupingApplied(groups, groupOrientation),\r\n            isGroupedByDate: isGroupingByDate(groups, groupOrientation, groupByDate),\r\n            isGroupedAllDayPanel: calculateIsGroupedAllDayPanel(groups, groupOrientation, isAllDayPanelVisible),\r\n            groups: groups,\r\n            groupOrientation: groupOrientation,\r\n            isAllDayPanelVisible: isAllDayPanelVisible\r\n        })\r\n    }\r\n    getGroupPanelData(options) {\r\n        var renderOptions = this._transformRenderOptions(options);\r\n        if (renderOptions.groups.length > 0) {\r\n            var cellCount = this.getCellCount(renderOptions);\r\n            return getGroupPanelData(renderOptions.groups, cellCount, renderOptions.isGroupedByDate, renderOptions.isGroupedByDate ? 1 : cellCount)\r\n        }\r\n        return\r\n    }\r\n    getGroupStartDate(groupIndex) {\r\n        return this._groupedDataMapProvider.getGroupStartDate(groupIndex)\r\n    }\r\n    getGroupEndDate(groupIndex) {\r\n        return this._groupedDataMapProvider.getGroupEndDate(groupIndex)\r\n    }\r\n    findGroupCellStartDate(groupIndex, startDate, endDate, isAllDay, isFindByDate) {\r\n        return this._groupedDataMapProvider.findGroupCellStartDate(groupIndex, startDate, endDate, isAllDay, isFindByDate)\r\n    }\r\n    findAllDayGroupCellStartDate(groupIndex, startDate) {\r\n        return this._groupedDataMapProvider.findAllDayGroupCellStartDate(groupIndex, startDate)\r\n    }\r\n    findCellPositionInMap(cellInfo) {\r\n        return this._groupedDataMapProvider.findCellPositionInMap(cellInfo)\r\n    }\r\n    getCellsGroup(groupIndex) {\r\n        return this._groupedDataMapProvider.getCellsGroup(groupIndex)\r\n    }\r\n    getCompletedGroupsInfo() {\r\n        return this._groupedDataMapProvider.getCompletedGroupsInfo()\r\n    }\r\n    getGroupIndices() {\r\n        return this._groupedDataMapProvider.getGroupIndices()\r\n    }\r\n    getLastGroupCellPosition(groupIndex) {\r\n        return this._groupedDataMapProvider.getLastGroupCellPosition(groupIndex)\r\n    }\r\n    getRowCountInGroup(groupIndex) {\r\n        return this._groupedDataMapProvider.getRowCountInGroup(groupIndex)\r\n    }\r\n    getCellData(rowIndex, columnIndex, isAllDay) {\r\n        if (isAllDay && !this._options.isVerticalGrouping) {\r\n            return this.viewDataMap.allDayPanelMap[columnIndex].cellData\r\n        }\r\n        var {\r\n            dateTableMap: dateTableMap\r\n        } = this.viewDataMap;\r\n        var {\r\n            cellData: cellData\r\n        } = dateTableMap[rowIndex][columnIndex];\r\n        return cellData\r\n    }\r\n    getCellsByGroupIndexAndAllDay(groupIndex, allDay) {\r\n        var rowsPerGroup = this._getRowCountWithAllDayRows();\r\n        var isShowAllDayPanel = this._options.isAllDayPanelVisible;\r\n        var firstRowInGroup = this._options.isVerticalGrouping ? groupIndex * rowsPerGroup : 0;\r\n        var lastRowInGroup = this._options.isVerticalGrouping ? (groupIndex + 1) * rowsPerGroup - 1 : rowsPerGroup;\r\n        var correctedFirstRow = isShowAllDayPanel && !allDay ? firstRowInGroup + 1 : firstRowInGroup;\r\n        var correctedLastRow = allDay ? correctedFirstRow : lastRowInGroup;\r\n        return this.completeViewDataMap.slice(correctedFirstRow, correctedLastRow + 1).map(row => row.filter(_ref => {\r\n            var {\r\n                groupIndex: currentGroupIndex\r\n            } = _ref;\r\n            return groupIndex === currentGroupIndex\r\n        }))\r\n    }\r\n    getGroupData(groupIndex) {\r\n        var {\r\n            groupedData: groupedData\r\n        } = this.viewData;\r\n        if (this._options.isVerticalGrouping) {\r\n            return groupedData.filter(item => item.groupIndex === groupIndex)[0]\r\n        }\r\n        var filterCells = row => null === row || void 0 === row ? void 0 : row.filter(cell => cell.groupIndex === groupIndex);\r\n        var {\r\n            allDayPanel: allDayPanel,\r\n            dateTable: dateTable\r\n        } = groupedData[0];\r\n        var filteredDateTable = [];\r\n        dateTable.forEach(row => {\r\n            filteredDateTable.push(filterCells(row))\r\n        });\r\n        return {\r\n            allDayPanel: filterCells(allDayPanel),\r\n            dateTable: filteredDateTable\r\n        }\r\n    }\r\n    getCellCountWithGroup(groupIndex) {\r\n        var rowIndex = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\r\n        var {\r\n            dateTableGroupedMap: dateTableGroupedMap\r\n        } = this.groupedDataMap;\r\n        return dateTableGroupedMap.filter((_, index) => index <= groupIndex).reduce((previous, row) => previous + row[rowIndex].length, 0)\r\n    }\r\n    getAllDayPanel(groupIndex) {\r\n        var groupData = this.getGroupData(groupIndex);\r\n        return null === groupData || void 0 === groupData ? void 0 : groupData.allDayPanel\r\n    }\r\n    isGroupIntersectDateInterval(groupIndex, startDate, endDate) {\r\n        var groupStartDate = this.getGroupStartDate(groupIndex);\r\n        var groupEndDate = this.getGroupEndDate(groupIndex);\r\n        return startDate < groupEndDate && endDate > groupStartDate\r\n    }\r\n    findGlobalCellPosition(date) {\r\n        var groupIndex = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\r\n        var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\r\n        var {\r\n            completeViewDataMap: completeViewDataMap\r\n        } = this;\r\n        var showAllDayPanel = this._options.isAllDayPanelVisible;\r\n        for (var rowIndex = 0; rowIndex < completeViewDataMap.length; rowIndex += 1) {\r\n            var currentRow = completeViewDataMap[rowIndex];\r\n            for (var columnIndex = 0; columnIndex < currentRow.length; columnIndex += 1) {\r\n                var cellData = currentRow[columnIndex];\r\n                var {\r\n                    startDate: currentStartDate,\r\n                    endDate: currentEndDate,\r\n                    groupIndex: currentGroupIndex,\r\n                    allDay: currentAllDay\r\n                } = cellData;\r\n                if (groupIndex === currentGroupIndex && allDay === !!currentAllDay && this._compareDatesAndAllDay(date, currentStartDate, currentEndDate, allDay)) {\r\n                    return {\r\n                        position: {\r\n                            columnIndex: columnIndex,\r\n                            rowIndex: showAllDayPanel && !this._options.isVerticalGrouping ? rowIndex - 1 : rowIndex\r\n                        },\r\n                        cellData: cellData\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _compareDatesAndAllDay(date, cellStartDate, cellEndDate, allDay) {\r\n        var time = date.getTime();\r\n        var trimmedTime = dateUtils.trimTime(date).getTime();\r\n        var cellStartTime = cellStartDate.getTime();\r\n        var cellEndTime = cellEndDate.getTime();\r\n        return !allDay && time >= cellStartTime && time < cellEndTime || allDay && trimmedTime === cellStartTime\r\n    }\r\n    getSkippedDaysCount(groupIndex, startDate, endDate, daysCount) {\r\n        var {\r\n            dateTableGroupedMap: dateTableGroupedMap\r\n        } = this._groupedDataMapProvider.groupedDataMap;\r\n        var groupedData = dateTableGroupedMap[groupIndex];\r\n        var includedDays = 0;\r\n        for (var rowIndex = 0; rowIndex < groupedData.length; rowIndex += 1) {\r\n            for (var columnIndex = 0; columnIndex < groupedData[rowIndex].length; columnIndex += 1) {\r\n                var cell = groupedData[rowIndex][columnIndex].cellData;\r\n                if (startDate.getTime() < cell.endDate.getTime() && endDate.getTime() > cell.startDate.getTime()) {\r\n                    includedDays += 1\r\n                }\r\n            }\r\n        }\r\n        var lastCell = groupedData[groupedData.length - 1][groupedData[0].length - 1].cellData;\r\n        var lastCellStart = dateUtils.trimTime(lastCell.startDate);\r\n        var daysAfterView = Math.floor((endDate.getTime() - lastCellStart.getTime()) / dateUtils.dateToMilliseconds(\"day\"));\r\n        var deltaDays = daysAfterView > 0 ? daysAfterView : 0;\r\n        return daysCount - includedDays - deltaDays\r\n    }\r\n    getColumnsCount() {\r\n        var {\r\n            dateTableMap: dateTableMap\r\n        } = this.viewDataMap;\r\n        return dateTableMap ? dateTableMap[0].length : 0\r\n    }\r\n    getViewEdgeIndices(isAllDayPanel) {\r\n        if (isAllDayPanel) {\r\n            return {\r\n                firstColumnIndex: 0,\r\n                lastColumnIndex: this.viewDataMap.allDayPanelMap.length - 1,\r\n                firstRowIndex: 0,\r\n                lastRowIndex: 0\r\n            }\r\n        }\r\n        return {\r\n            firstColumnIndex: 0,\r\n            lastColumnIndex: this.viewDataMap.dateTableMap[0].length - 1,\r\n            firstRowIndex: 0,\r\n            lastRowIndex: this.viewDataMap.dateTableMap.length - 1\r\n        }\r\n    }\r\n    getGroupEdgeIndices(groupIndex, isAllDay) {\r\n        var groupedDataMap = this.groupedDataMap.dateTableGroupedMap[groupIndex];\r\n        var cellsCount = groupedDataMap[0].length;\r\n        var rowsCount = groupedDataMap.length;\r\n        var firstColumnIndex = groupedDataMap[0][0].position.columnIndex;\r\n        var lastColumnIndex = groupedDataMap[0][cellsCount - 1].position.columnIndex;\r\n        if (isAllDay) {\r\n            return {\r\n                firstColumnIndex: firstColumnIndex,\r\n                lastColumnIndex: lastColumnIndex,\r\n                firstRowIndex: 0,\r\n                lastRowIndex: 0\r\n            }\r\n        }\r\n        return {\r\n            firstColumnIndex: firstColumnIndex,\r\n            lastColumnIndex: lastColumnIndex,\r\n            firstRowIndex: groupedDataMap[0][0].position.rowIndex,\r\n            lastRowIndex: groupedDataMap[rowsCount - 1][0].position.rowIndex\r\n        }\r\n    }\r\n    isSameCell(firstCellData, secondCellData) {\r\n        var {\r\n            startDate: firstStartDate,\r\n            groupIndex: firstGroupIndex,\r\n            allDay: firstAllDay,\r\n            index: firstIndex\r\n        } = firstCellData;\r\n        var {\r\n            startDate: secondStartDate,\r\n            groupIndex: secondGroupIndex,\r\n            allDay: secondAllDay,\r\n            index: secondIndex\r\n        } = secondCellData;\r\n        return firstStartDate.getTime() === secondStartDate.getTime() && firstGroupIndex === secondGroupIndex && firstAllDay === secondAllDay && firstIndex === secondIndex\r\n    }\r\n    getLastViewDate() {\r\n        var completeViewDataMap = this.completeViewDataMap;\r\n        var rowsCount = completeViewDataMap.length - 1;\r\n        return completeViewDataMap[rowsCount][completeViewDataMap[rowsCount].length - 1].endDate\r\n    }\r\n    getStartViewDate() {\r\n        return this._options.startViewDate\r\n    }\r\n    getIntervalDuration(intervalCount) {\r\n        return this.viewDataGenerator._getIntervalDuration(intervalCount)\r\n    }\r\n    getLastCellEndDate() {\r\n        return new Date(this.getLastViewDate().getTime() - dateUtils.dateToMilliseconds(\"minute\"))\r\n    }\r\n    getLastViewDateByEndDayHour(endDayHour) {\r\n        var lastCellEndDate = this.getLastCellEndDate();\r\n        var endTime = dateUtils.dateTimeFromDecimal(endDayHour);\r\n        var endDateOfLastViewCell = new Date(lastCellEndDate.setHours(endTime.hours, endTime.minutes));\r\n        return this._adjustEndDateByDaylightDiff(lastCellEndDate, endDateOfLastViewCell)\r\n    }\r\n    _adjustEndDateByDaylightDiff(startDate, endDate) {\r\n        var daylightDiff = timeZoneUtils.getDaylightOffsetInMs(startDate, endDate);\r\n        var endDateOfLastViewCell = new Date(endDate.getTime() - daylightDiff);\r\n        return new Date(endDateOfLastViewCell.getTime() - dateUtils.dateToMilliseconds(\"minute\"))\r\n    }\r\n    getCellCountInDay(startDayHour, endDayHour, hoursInterval) {\r\n        return this.viewDataGenerator.getCellCountInDay(startDayHour, endDayHour, hoursInterval)\r\n    }\r\n    getCellCount(options) {\r\n        return this.viewDataGenerator.getCellCount(options)\r\n    }\r\n    getRowCount(options) {\r\n        return this.viewDataGenerator.getRowCount(options)\r\n    }\r\n    getVisibleDayDuration(startDayHour, endDayHour, hoursInterval) {\r\n        return this.viewDataGenerator.getVisibleDayDuration(startDayHour, endDayHour, hoursInterval)\r\n    }\r\n    _getRowCountWithAllDayRows() {\r\n        var allDayRowCount = this._options.isAllDayPanelVisible ? 1 : 0;\r\n        return this.getRowCount(this._options) + allDayRowCount\r\n    }\r\n    getFirstDayOfWeek(firstDayOfWeekOption) {\r\n        return this.viewDataGenerator.getFirstDayOfWeek(firstDayOfWeekOption)\r\n    }\r\n    setViewOptions(options) {\r\n        this._options = this._transformRenderOptions(options)\r\n    }\r\n    getViewOptions() {\r\n        return this._options\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}