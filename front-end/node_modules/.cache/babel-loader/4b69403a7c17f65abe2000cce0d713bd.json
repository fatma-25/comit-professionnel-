{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/dataProvider/appointmentDataProvider.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { AppointmentDataSource } from \"./appointmentDataSource\";\nimport { AppointmentFilterBaseStrategy, AppointmentFilterVirtualStrategy } from \"./appointmentFilter\";\nimport { createAppointmentAdapter } from \"../../appointmentAdapter\";\nvar FilterStrategies = {\n  virtual: \"virtual\",\n  standard: \"standard\"\n};\nexport class AppointmentDataProvider {\n  constructor(options) {\n    this.options = options;\n    this.dataSource = this.options.dataSource;\n    this.dataAccessors = this.options.dataAccessors;\n    this.timeZoneCalculator = this.options.timeZoneCalculator;\n    this.appointmentDataSource = new AppointmentDataSource(this.dataSource);\n    this.initFilterStrategy();\n  }\n\n  get filterMaker() {\n    return this.getFilterStrategy().filterMaker;\n  }\n\n  get keyName() {\n    return this.appointmentDataSource.keyName;\n  }\n\n  get filterStrategyName() {\n    return this.options.getIsVirtualScrolling() ? FilterStrategies.virtual : FilterStrategies.standard;\n  }\n\n  getFilterStrategy() {\n    if (!this.filterStrategy || this.filterStrategy.strategyName !== this.filterStrategyName) {\n      this.initFilterStrategy();\n    }\n\n    return this.filterStrategy;\n  }\n\n  initFilterStrategy() {\n    var filterOptions = {\n      resources: this.options.resources,\n      dataSource: this.dataSource,\n      dataAccessors: this.dataAccessors,\n      startDayHour: this.options.startDayHour,\n      endDayHour: this.options.endDayHour,\n      appointmentDuration: this.options.appointmentDuration,\n      showAllDayPanel: this.options.showAllDayPanel,\n      timeZoneCalculator: this.options.timeZoneCalculator,\n      loadedResources: this.options.getLoadedResources,\n      supportAllDayRow: this.options.getSupportAllDayRow,\n      viewType: this.options.getViewType,\n      viewDirection: this.options.getViewDirection,\n      dateRange: this.options.getDateRange,\n      groupCount: this.options.getGroupCount,\n      viewDataProvider: this.options.getViewDataProvider\n    };\n    this.filterStrategy = this.filterStrategyName === FilterStrategies.virtual ? new AppointmentFilterVirtualStrategy(filterOptions) : new AppointmentFilterBaseStrategy(filterOptions);\n  }\n\n  setDataSource(dataSource) {\n    this.dataSource = dataSource;\n    this.initFilterStrategy();\n    this.appointmentDataSource.setDataSource(this.dataSource);\n  }\n\n  updateDataAccessors(dataAccessors) {\n    this.dataAccessors = dataAccessors;\n    this.initFilterStrategy();\n  }\n\n  filter() {\n    return this.getFilterStrategy().filter();\n  }\n\n  filterByDate(min, max, remoteFiltering, dateSerializationFormat) {\n    this.getFilterStrategy().filterByDate(min, max, remoteFiltering, dateSerializationFormat);\n  }\n\n  hasAllDayAppointments(rawAppointments) {\n    var adapters = rawAppointments.map(item => createAppointmentAdapter(item, this.dataAccessors, this.timeZoneCalculator));\n    return this.getFilterStrategy().hasAllDayAppointments(adapters);\n  }\n\n  filterLoadedAppointments(filterOption, preparedItems) {\n    return this.getFilterStrategy().filterLoadedAppointments(filterOption, preparedItems);\n  }\n\n  calculateAppointmentEndDate(isAllDay, startDate) {\n    return this.getFilterStrategy().calculateAppointmentEndDate(isAllDay, startDate);\n  }\n\n  cleanState() {\n    this.appointmentDataSource.cleanState();\n  }\n\n  getUpdatedAppointment() {\n    return this.appointmentDataSource._updatedAppointment;\n  }\n\n  getUpdatedAppointmentKeys() {\n    return this.appointmentDataSource._updatedAppointmentKeys;\n  }\n\n  add(rawAppointment) {\n    return this.appointmentDataSource.add(rawAppointment);\n  }\n\n  update(target, rawAppointment) {\n    return this.appointmentDataSource.update(target, rawAppointment);\n  }\n\n  remove(rawAppointment) {\n    return this.appointmentDataSource.remove(rawAppointment);\n  }\n\n}","map":{"version":3,"sources":["/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/node_modules/devextreme/esm/ui/scheduler/appointments/dataProvider/appointmentDataProvider.js"],"names":["AppointmentDataSource","AppointmentFilterBaseStrategy","AppointmentFilterVirtualStrategy","createAppointmentAdapter","FilterStrategies","virtual","standard","AppointmentDataProvider","constructor","options","dataSource","dataAccessors","timeZoneCalculator","appointmentDataSource","initFilterStrategy","filterMaker","getFilterStrategy","keyName","filterStrategyName","getIsVirtualScrolling","filterStrategy","strategyName","filterOptions","resources","startDayHour","endDayHour","appointmentDuration","showAllDayPanel","loadedResources","getLoadedResources","supportAllDayRow","getSupportAllDayRow","viewType","getViewType","viewDirection","getViewDirection","dateRange","getDateRange","groupCount","getGroupCount","viewDataProvider","getViewDataProvider","setDataSource","updateDataAccessors","filter","filterByDate","min","max","remoteFiltering","dateSerializationFormat","hasAllDayAppointments","rawAppointments","adapters","map","item","filterLoadedAppointments","filterOption","preparedItems","calculateAppointmentEndDate","isAllDay","startDate","cleanState","getUpdatedAppointment","_updatedAppointment","getUpdatedAppointmentKeys","_updatedAppointmentKeys","add","rawAppointment","update","target","remove"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments/dataProvider/appointmentDataProvider.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    AppointmentDataSource\r\n} from \"./appointmentDataSource\";\r\nimport {\r\n    AppointmentFilterBaseStrategy,\r\n    AppointmentFilterVirtualStrategy\r\n} from \"./appointmentFilter\";\r\nimport {\r\n    createAppointmentAdapter\r\n} from \"../../appointmentAdapter\";\r\nvar FilterStrategies = {\r\n    virtual: \"virtual\",\r\n    standard: \"standard\"\r\n};\r\nexport class AppointmentDataProvider {\r\n    constructor(options) {\r\n        this.options = options;\r\n        this.dataSource = this.options.dataSource;\r\n        this.dataAccessors = this.options.dataAccessors;\r\n        this.timeZoneCalculator = this.options.timeZoneCalculator;\r\n        this.appointmentDataSource = new AppointmentDataSource(this.dataSource);\r\n        this.initFilterStrategy()\r\n    }\r\n    get filterMaker() {\r\n        return this.getFilterStrategy().filterMaker\r\n    }\r\n    get keyName() {\r\n        return this.appointmentDataSource.keyName\r\n    }\r\n    get filterStrategyName() {\r\n        return this.options.getIsVirtualScrolling() ? FilterStrategies.virtual : FilterStrategies.standard\r\n    }\r\n    getFilterStrategy() {\r\n        if (!this.filterStrategy || this.filterStrategy.strategyName !== this.filterStrategyName) {\r\n            this.initFilterStrategy()\r\n        }\r\n        return this.filterStrategy\r\n    }\r\n    initFilterStrategy() {\r\n        var filterOptions = {\r\n            resources: this.options.resources,\r\n            dataSource: this.dataSource,\r\n            dataAccessors: this.dataAccessors,\r\n            startDayHour: this.options.startDayHour,\r\n            endDayHour: this.options.endDayHour,\r\n            appointmentDuration: this.options.appointmentDuration,\r\n            showAllDayPanel: this.options.showAllDayPanel,\r\n            timeZoneCalculator: this.options.timeZoneCalculator,\r\n            loadedResources: this.options.getLoadedResources,\r\n            supportAllDayRow: this.options.getSupportAllDayRow,\r\n            viewType: this.options.getViewType,\r\n            viewDirection: this.options.getViewDirection,\r\n            dateRange: this.options.getDateRange,\r\n            groupCount: this.options.getGroupCount,\r\n            viewDataProvider: this.options.getViewDataProvider\r\n        };\r\n        this.filterStrategy = this.filterStrategyName === FilterStrategies.virtual ? new AppointmentFilterVirtualStrategy(filterOptions) : new AppointmentFilterBaseStrategy(filterOptions)\r\n    }\r\n    setDataSource(dataSource) {\r\n        this.dataSource = dataSource;\r\n        this.initFilterStrategy();\r\n        this.appointmentDataSource.setDataSource(this.dataSource)\r\n    }\r\n    updateDataAccessors(dataAccessors) {\r\n        this.dataAccessors = dataAccessors;\r\n        this.initFilterStrategy()\r\n    }\r\n    filter() {\r\n        return this.getFilterStrategy().filter()\r\n    }\r\n    filterByDate(min, max, remoteFiltering, dateSerializationFormat) {\r\n        this.getFilterStrategy().filterByDate(min, max, remoteFiltering, dateSerializationFormat)\r\n    }\r\n    hasAllDayAppointments(rawAppointments) {\r\n        var adapters = rawAppointments.map(item => createAppointmentAdapter(item, this.dataAccessors, this.timeZoneCalculator));\r\n        return this.getFilterStrategy().hasAllDayAppointments(adapters)\r\n    }\r\n    filterLoadedAppointments(filterOption, preparedItems) {\r\n        return this.getFilterStrategy().filterLoadedAppointments(filterOption, preparedItems)\r\n    }\r\n    calculateAppointmentEndDate(isAllDay, startDate) {\r\n        return this.getFilterStrategy().calculateAppointmentEndDate(isAllDay, startDate)\r\n    }\r\n    cleanState() {\r\n        this.appointmentDataSource.cleanState()\r\n    }\r\n    getUpdatedAppointment() {\r\n        return this.appointmentDataSource._updatedAppointment\r\n    }\r\n    getUpdatedAppointmentKeys() {\r\n        return this.appointmentDataSource._updatedAppointmentKeys\r\n    }\r\n    add(rawAppointment) {\r\n        return this.appointmentDataSource.add(rawAppointment)\r\n    }\r\n    update(target, rawAppointment) {\r\n        return this.appointmentDataSource.update(target, rawAppointment)\r\n    }\r\n    remove(rawAppointment) {\r\n        return this.appointmentDataSource.remove(rawAppointment)\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}