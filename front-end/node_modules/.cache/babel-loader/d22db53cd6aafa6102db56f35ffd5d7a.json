{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments.layout_manager.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { getModelProvider, getTimeZoneCalculator } from \"./instanceFactory\";\nimport { AppointmentViewModelGenerator } from \"./appointments/viewModelGenerator\";\nimport { getGroupCount } from \"./resources/utils\";\nimport { getCellWidth, getCellHeight, getAllDayHeight } from \"./workspaces/helpers/positionHelper\";\nimport { getCellDuration } from \"../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { getAppointmentRenderingStrategyName } from \"../../renovation/ui/scheduler/model/appointments\";\n\nclass AppointmentLayoutManager {\n  constructor(instance) {\n    this.instance = instance;\n    this.appointmentViewModel = new AppointmentViewModelGenerator();\n  }\n\n  get modelProvider() {\n    return getModelProvider(this.instance.key);\n  }\n\n  get appointmentRenderingStrategyName() {\n    return getAppointmentRenderingStrategyName(this.modelProvider.currentViewType);\n  }\n\n  getCellDimensions(options) {\n    if (this.instance._workSpace) {\n      return {\n        width: this.instance._workSpace.getCellWidth(),\n        height: this.instance._workSpace.getCellHeight(),\n        allDayHeight: this.instance._workSpace.getAllDayHeight()\n      };\n    }\n  }\n\n  _getRenderingStrategyOptions() {\n    var workspace = this.instance.getWorkSpace();\n    var key = this.instance.key;\n    var {\n      virtualScrollingDispatcher: virtualScrollingDispatcher\n    } = this.instance.getWorkSpace();\n    var {\n      cellCountInsideLeftVirtualCell: cellCountInsideLeftVirtualCell,\n      cellCountInsideTopVirtualRow: cellCountInsideTopVirtualRow\n    } = virtualScrollingDispatcher;\n    var groupCount = getGroupCount(this.instance.option(\"loadedResources\"));\n    var DOMMetaData = workspace.getDOMElementsMetaData();\n    var allDayHeight = getAllDayHeight(workspace.option(\"showAllDayPanel\"), workspace._isVerticalGroupedWorkSpace(), DOMMetaData);\n\n    var rowCount = workspace._getRowCount();\n\n    var {\n      positionHelper: positionHelper,\n      viewDataProvider: viewDataProvider\n    } = workspace;\n    var visibleDayDuration = viewDataProvider.getVisibleDayDuration(workspace.option(\"startDayHour\"), workspace.option(\"endDayHour\"), workspace.option(\"hoursInterval\"));\n    var cellDuration = getCellDuration(workspace.type, workspace.option(\"startDayHour\"), workspace.option(\"endDayHour\"), workspace.option(\"hoursInterval\"));\n    return {\n      resources: this.instance.option(\"resources\"),\n      loadedResources: this.instance.option(\"loadedResources\"),\n      getAppointmentColor: this.instance.createGetAppointmentColor(),\n      dataAccessors: this.instance._dataAccessors,\n      key: key,\n      isRenovatedAppointments: this.modelProvider.isRenovatedAppointments,\n      appointmentRenderingStrategyName: this.appointmentRenderingStrategyName,\n      adaptivityEnabled: this.modelProvider.adaptivityEnabled,\n      rtlEnabled: this.modelProvider.rtlEnabled,\n      startDayHour: this.modelProvider.startDayHour,\n      endDayHour: this.modelProvider.endDayHour,\n      maxAppointmentsPerCell: this.modelProvider.maxAppointmentsPerCell,\n      currentDate: this.modelProvider.currentDate,\n      isVirtualScrolling: this.instance.isVirtualScrolling(),\n      leftVirtualCellCount: cellCountInsideLeftVirtualCell,\n      topVirtualCellCount: cellCountInsideTopVirtualRow,\n      intervalCount: workspace.option(\"intervalCount\"),\n      hoursInterval: workspace.option(\"hoursInterval\"),\n      showAllDayPanel: workspace.option(\"showAllDayPanel\"),\n      isGroupedAllDayPanel: workspace.isGroupedAllDayPanel(),\n      modelGroups: this.modelProvider.getCurrentViewOption(\"groups\"),\n      groupCount: groupCount,\n      rowCount: rowCount,\n      appointmentCountPerCell: this.instance.option(\"_appointmentCountPerCell\"),\n      appointmentOffset: this.instance.option(\"_appointmentOffset\"),\n      allowResizing: this.instance._allowResizing(),\n      allowAllDayResizing: this.instance._allowAllDayResizing(),\n      startViewDate: workspace.getStartViewDate(),\n      groupOrientation: workspace._getRealGroupOrientation(),\n      cellWidth: getCellWidth(DOMMetaData),\n      cellHeight: getCellHeight(DOMMetaData),\n      allDayHeight: allDayHeight,\n      resizableStep: positionHelper.getResizableStep(),\n      visibleDayDuration: visibleDayDuration,\n      timeZoneCalculator: getTimeZoneCalculator(key),\n      timeZone: this.modelProvider.timeZone,\n      firstDayOfWeek: this.instance.getFirstDayOfWeek(),\n      viewStartDayHour: this.modelProvider.getCurrentViewOption(\"startDayHour\"),\n      viewEndDayHour: this.modelProvider.getCurrentViewOption(\"endDayHour\"),\n      viewType: workspace.type,\n      endViewDate: workspace.getEndViewDate(),\n      positionHelper: positionHelper,\n      isGroupedByDate: workspace.isGroupedByDate(),\n      cellDuration: cellDuration,\n      cellDurationInMinutes: workspace.option(\"cellDuration\"),\n      viewDataProvider: workspace.viewDataProvider,\n      supportAllDayRow: workspace.supportAllDayRow(),\n      dateRange: workspace.getDateRange(),\n      intervalDuration: workspace.getIntervalDuration(),\n      allDayIntervalDuration: workspace.getIntervalDuration(true),\n      isVerticalOrientation: workspace.isVerticalOrientation(),\n      DOMMetaData: DOMMetaData,\n      instance: this.instance,\n      agendaDuration: workspace.option(\"agendaDuration\")\n    };\n  }\n\n  createAppointmentsMap(items) {\n    var renderingStrategyOptions = this._getRenderingStrategyOptions();\n\n    var {\n      viewModel: viewModel,\n      positionMap: positionMap\n    } = this.appointmentViewModel.generate(items, renderingStrategyOptions);\n    this._positionMap = positionMap;\n    return viewModel;\n  }\n\n  _isDataChanged(data) {\n    var appointmentDataProvider = this.instance.appointmentDataProvider;\n    var updatedData = appointmentDataProvider.getUpdatedAppointment();\n    return updatedData === data || appointmentDataProvider.getUpdatedAppointmentKeys().some(item => data[item.key] === item.value);\n  }\n\n  _isAppointmentShouldAppear(currentAppointment, sourceAppointment) {\n    return currentAppointment.needRepaint && sourceAppointment.needRemove;\n  }\n\n  _isSettingChanged(settings, sourceSetting) {\n    if (settings.length !== sourceSetting.length) {\n      return true;\n    }\n\n    var createSettingsToCompare = (settings, index) => {\n      var currentSetting = settings[index];\n      var leftVirtualCellCount = currentSetting.leftVirtualCellCount || 0;\n      var topVirtualCellCount = currentSetting.topVirtualCellCount || 0;\n      var columnIndex = currentSetting.columnIndex + leftVirtualCellCount;\n      var rowIndex = currentSetting.rowIndex + topVirtualCellCount;\n      var hMax = currentSetting.reduced ? currentSetting.hMax : void 0;\n      var vMax = currentSetting.reduced ? currentSetting.vMax : void 0;\n      return _extends({}, currentSetting, {\n        columnIndex: columnIndex,\n        rowIndex: rowIndex,\n        topVirtualCellCount: void 0,\n        leftVirtualCellCount: void 0,\n        leftVirtualWidth: void 0,\n        topVirtualHeight: void 0,\n        hMax: hMax,\n        vMax: vMax,\n        info: {}\n      });\n    };\n\n    for (var i = 0; i < settings.length; i++) {\n      var newSettings = createSettingsToCompare(settings, i);\n      var oldSettings = createSettingsToCompare(sourceSetting, i);\n\n      if (oldSettings) {\n        oldSettings.sortedIndex = newSettings.sortedIndex;\n      }\n\n      if (!equalByValue(newSettings, oldSettings)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _getAssociatedSourceAppointment(currentAppointment, sourceAppointments) {\n    for (var i = 0; i < sourceAppointments.length; i++) {\n      var item = sourceAppointments[i];\n\n      if (item.itemData === currentAppointment.itemData) {\n        return item;\n      }\n    }\n\n    return null;\n  }\n\n  _getDeletedAppointments(currentAppointments, sourceAppointments) {\n    var result = [];\n\n    for (var i = 0; i < sourceAppointments.length; i++) {\n      var sourceAppointment = sourceAppointments[i];\n\n      var currentAppointment = this._getAssociatedSourceAppointment(sourceAppointment, currentAppointments);\n\n      if (!currentAppointment) {\n        sourceAppointment.needRemove = true;\n        result.push(sourceAppointment);\n      }\n    }\n\n    return result;\n  }\n\n  getRepaintedAppointments(currentAppointments, sourceAppointments) {\n    if (0 === sourceAppointments.length || \"agenda\" === this.appointmentRenderingStrategyName) {\n      return currentAppointments;\n    }\n\n    currentAppointments.forEach(appointment => {\n      var sourceAppointment = this._getAssociatedSourceAppointment(appointment, sourceAppointments);\n\n      if (sourceAppointment) {\n        appointment.needRepaint = this._isDataChanged(appointment.itemData) || this._isSettingChanged(appointment.settings, sourceAppointment.settings) || this._isAppointmentShouldAppear(appointment, sourceAppointment);\n      }\n    });\n    return currentAppointments.concat(this._getDeletedAppointments(currentAppointments, sourceAppointments));\n  }\n\n  getRenderingStrategyInstance() {\n    var renderingStrategy = this.appointmentViewModel.getRenderingStrategy();\n\n    if (!renderingStrategy) {\n      var options = this._getRenderingStrategyOptions();\n\n      this.appointmentViewModel.initRenderingStrategy(options);\n    }\n\n    return this.appointmentViewModel.getRenderingStrategy();\n  }\n\n}\n\nexport default AppointmentLayoutManager;","map":{"version":3,"sources":["/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/node_modules/devextreme/esm/ui/scheduler/appointments.layout_manager.js"],"names":["_extends","equalByValue","getModelProvider","getTimeZoneCalculator","AppointmentViewModelGenerator","getGroupCount","getCellWidth","getCellHeight","getAllDayHeight","getCellDuration","getAppointmentRenderingStrategyName","AppointmentLayoutManager","constructor","instance","appointmentViewModel","modelProvider","key","appointmentRenderingStrategyName","currentViewType","getCellDimensions","options","_workSpace","width","height","allDayHeight","_getRenderingStrategyOptions","workspace","getWorkSpace","virtualScrollingDispatcher","cellCountInsideLeftVirtualCell","cellCountInsideTopVirtualRow","groupCount","option","DOMMetaData","getDOMElementsMetaData","_isVerticalGroupedWorkSpace","rowCount","_getRowCount","positionHelper","viewDataProvider","visibleDayDuration","getVisibleDayDuration","cellDuration","type","resources","loadedResources","getAppointmentColor","createGetAppointmentColor","dataAccessors","_dataAccessors","isRenovatedAppointments","adaptivityEnabled","rtlEnabled","startDayHour","endDayHour","maxAppointmentsPerCell","currentDate","isVirtualScrolling","leftVirtualCellCount","topVirtualCellCount","intervalCount","hoursInterval","showAllDayPanel","isGroupedAllDayPanel","modelGroups","getCurrentViewOption","appointmentCountPerCell","appointmentOffset","allowResizing","_allowResizing","allowAllDayResizing","_allowAllDayResizing","startViewDate","getStartViewDate","groupOrientation","_getRealGroupOrientation","cellWidth","cellHeight","resizableStep","getResizableStep","timeZoneCalculator","timeZone","firstDayOfWeek","getFirstDayOfWeek","viewStartDayHour","viewEndDayHour","viewType","endViewDate","getEndViewDate","isGroupedByDate","cellDurationInMinutes","supportAllDayRow","dateRange","getDateRange","intervalDuration","getIntervalDuration","allDayIntervalDuration","isVerticalOrientation","agendaDuration","createAppointmentsMap","items","renderingStrategyOptions","viewModel","positionMap","generate","_positionMap","_isDataChanged","data","appointmentDataProvider","updatedData","getUpdatedAppointment","getUpdatedAppointmentKeys","some","item","value","_isAppointmentShouldAppear","currentAppointment","sourceAppointment","needRepaint","needRemove","_isSettingChanged","settings","sourceSetting","length","createSettingsToCompare","index","currentSetting","columnIndex","rowIndex","hMax","reduced","vMax","leftVirtualWidth","topVirtualHeight","info","i","newSettings","oldSettings","sortedIndex","_getAssociatedSourceAppointment","sourceAppointments","itemData","_getDeletedAppointments","currentAppointments","result","push","getRepaintedAppointments","forEach","appointment","concat","getRenderingStrategyInstance","renderingStrategy","getRenderingStrategy","initRenderingStrategy"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments.layout_manager.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    getModelProvider,\r\n    getTimeZoneCalculator\r\n} from \"./instanceFactory\";\r\nimport {\r\n    AppointmentViewModelGenerator\r\n} from \"./appointments/viewModelGenerator\";\r\nimport {\r\n    getGroupCount\r\n} from \"./resources/utils\";\r\nimport {\r\n    getCellWidth,\r\n    getCellHeight,\r\n    getAllDayHeight\r\n} from \"./workspaces/helpers/positionHelper\";\r\nimport {\r\n    getCellDuration\r\n} from \"../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    getAppointmentRenderingStrategyName\r\n} from \"../../renovation/ui/scheduler/model/appointments\";\r\nclass AppointmentLayoutManager {\r\n    constructor(instance) {\r\n        this.instance = instance;\r\n        this.appointmentViewModel = new AppointmentViewModelGenerator\r\n    }\r\n    get modelProvider() {\r\n        return getModelProvider(this.instance.key)\r\n    }\r\n    get appointmentRenderingStrategyName() {\r\n        return getAppointmentRenderingStrategyName(this.modelProvider.currentViewType)\r\n    }\r\n    getCellDimensions(options) {\r\n        if (this.instance._workSpace) {\r\n            return {\r\n                width: this.instance._workSpace.getCellWidth(),\r\n                height: this.instance._workSpace.getCellHeight(),\r\n                allDayHeight: this.instance._workSpace.getAllDayHeight()\r\n            }\r\n        }\r\n    }\r\n    _getRenderingStrategyOptions() {\r\n        var workspace = this.instance.getWorkSpace();\r\n        var key = this.instance.key;\r\n        var {\r\n            virtualScrollingDispatcher: virtualScrollingDispatcher\r\n        } = this.instance.getWorkSpace();\r\n        var {\r\n            cellCountInsideLeftVirtualCell: cellCountInsideLeftVirtualCell,\r\n            cellCountInsideTopVirtualRow: cellCountInsideTopVirtualRow\r\n        } = virtualScrollingDispatcher;\r\n        var groupCount = getGroupCount(this.instance.option(\"loadedResources\"));\r\n        var DOMMetaData = workspace.getDOMElementsMetaData();\r\n        var allDayHeight = getAllDayHeight(workspace.option(\"showAllDayPanel\"), workspace._isVerticalGroupedWorkSpace(), DOMMetaData);\r\n        var rowCount = workspace._getRowCount();\r\n        var {\r\n            positionHelper: positionHelper,\r\n            viewDataProvider: viewDataProvider\r\n        } = workspace;\r\n        var visibleDayDuration = viewDataProvider.getVisibleDayDuration(workspace.option(\"startDayHour\"), workspace.option(\"endDayHour\"), workspace.option(\"hoursInterval\"));\r\n        var cellDuration = getCellDuration(workspace.type, workspace.option(\"startDayHour\"), workspace.option(\"endDayHour\"), workspace.option(\"hoursInterval\"));\r\n        return {\r\n            resources: this.instance.option(\"resources\"),\r\n            loadedResources: this.instance.option(\"loadedResources\"),\r\n            getAppointmentColor: this.instance.createGetAppointmentColor(),\r\n            dataAccessors: this.instance._dataAccessors,\r\n            key: key,\r\n            isRenovatedAppointments: this.modelProvider.isRenovatedAppointments,\r\n            appointmentRenderingStrategyName: this.appointmentRenderingStrategyName,\r\n            adaptivityEnabled: this.modelProvider.adaptivityEnabled,\r\n            rtlEnabled: this.modelProvider.rtlEnabled,\r\n            startDayHour: this.modelProvider.startDayHour,\r\n            endDayHour: this.modelProvider.endDayHour,\r\n            maxAppointmentsPerCell: this.modelProvider.maxAppointmentsPerCell,\r\n            currentDate: this.modelProvider.currentDate,\r\n            isVirtualScrolling: this.instance.isVirtualScrolling(),\r\n            leftVirtualCellCount: cellCountInsideLeftVirtualCell,\r\n            topVirtualCellCount: cellCountInsideTopVirtualRow,\r\n            intervalCount: workspace.option(\"intervalCount\"),\r\n            hoursInterval: workspace.option(\"hoursInterval\"),\r\n            showAllDayPanel: workspace.option(\"showAllDayPanel\"),\r\n            isGroupedAllDayPanel: workspace.isGroupedAllDayPanel(),\r\n            modelGroups: this.modelProvider.getCurrentViewOption(\"groups\"),\r\n            groupCount: groupCount,\r\n            rowCount: rowCount,\r\n            appointmentCountPerCell: this.instance.option(\"_appointmentCountPerCell\"),\r\n            appointmentOffset: this.instance.option(\"_appointmentOffset\"),\r\n            allowResizing: this.instance._allowResizing(),\r\n            allowAllDayResizing: this.instance._allowAllDayResizing(),\r\n            startViewDate: workspace.getStartViewDate(),\r\n            groupOrientation: workspace._getRealGroupOrientation(),\r\n            cellWidth: getCellWidth(DOMMetaData),\r\n            cellHeight: getCellHeight(DOMMetaData),\r\n            allDayHeight: allDayHeight,\r\n            resizableStep: positionHelper.getResizableStep(),\r\n            visibleDayDuration: visibleDayDuration,\r\n            timeZoneCalculator: getTimeZoneCalculator(key),\r\n            timeZone: this.modelProvider.timeZone,\r\n            firstDayOfWeek: this.instance.getFirstDayOfWeek(),\r\n            viewStartDayHour: this.modelProvider.getCurrentViewOption(\"startDayHour\"),\r\n            viewEndDayHour: this.modelProvider.getCurrentViewOption(\"endDayHour\"),\r\n            viewType: workspace.type,\r\n            endViewDate: workspace.getEndViewDate(),\r\n            positionHelper: positionHelper,\r\n            isGroupedByDate: workspace.isGroupedByDate(),\r\n            cellDuration: cellDuration,\r\n            cellDurationInMinutes: workspace.option(\"cellDuration\"),\r\n            viewDataProvider: workspace.viewDataProvider,\r\n            supportAllDayRow: workspace.supportAllDayRow(),\r\n            dateRange: workspace.getDateRange(),\r\n            intervalDuration: workspace.getIntervalDuration(),\r\n            allDayIntervalDuration: workspace.getIntervalDuration(true),\r\n            isVerticalOrientation: workspace.isVerticalOrientation(),\r\n            DOMMetaData: DOMMetaData,\r\n            instance: this.instance,\r\n            agendaDuration: workspace.option(\"agendaDuration\")\r\n        }\r\n    }\r\n    createAppointmentsMap(items) {\r\n        var renderingStrategyOptions = this._getRenderingStrategyOptions();\r\n        var {\r\n            viewModel: viewModel,\r\n            positionMap: positionMap\r\n        } = this.appointmentViewModel.generate(items, renderingStrategyOptions);\r\n        this._positionMap = positionMap;\r\n        return viewModel\r\n    }\r\n    _isDataChanged(data) {\r\n        var appointmentDataProvider = this.instance.appointmentDataProvider;\r\n        var updatedData = appointmentDataProvider.getUpdatedAppointment();\r\n        return updatedData === data || appointmentDataProvider.getUpdatedAppointmentKeys().some(item => data[item.key] === item.value)\r\n    }\r\n    _isAppointmentShouldAppear(currentAppointment, sourceAppointment) {\r\n        return currentAppointment.needRepaint && sourceAppointment.needRemove\r\n    }\r\n    _isSettingChanged(settings, sourceSetting) {\r\n        if (settings.length !== sourceSetting.length) {\r\n            return true\r\n        }\r\n        var createSettingsToCompare = (settings, index) => {\r\n            var currentSetting = settings[index];\r\n            var leftVirtualCellCount = currentSetting.leftVirtualCellCount || 0;\r\n            var topVirtualCellCount = currentSetting.topVirtualCellCount || 0;\r\n            var columnIndex = currentSetting.columnIndex + leftVirtualCellCount;\r\n            var rowIndex = currentSetting.rowIndex + topVirtualCellCount;\r\n            var hMax = currentSetting.reduced ? currentSetting.hMax : void 0;\r\n            var vMax = currentSetting.reduced ? currentSetting.vMax : void 0;\r\n            return _extends({}, currentSetting, {\r\n                columnIndex: columnIndex,\r\n                rowIndex: rowIndex,\r\n                topVirtualCellCount: void 0,\r\n                leftVirtualCellCount: void 0,\r\n                leftVirtualWidth: void 0,\r\n                topVirtualHeight: void 0,\r\n                hMax: hMax,\r\n                vMax: vMax,\r\n                info: {}\r\n            })\r\n        };\r\n        for (var i = 0; i < settings.length; i++) {\r\n            var newSettings = createSettingsToCompare(settings, i);\r\n            var oldSettings = createSettingsToCompare(sourceSetting, i);\r\n            if (oldSettings) {\r\n                oldSettings.sortedIndex = newSettings.sortedIndex\r\n            }\r\n            if (!equalByValue(newSettings, oldSettings)) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    _getAssociatedSourceAppointment(currentAppointment, sourceAppointments) {\r\n        for (var i = 0; i < sourceAppointments.length; i++) {\r\n            var item = sourceAppointments[i];\r\n            if (item.itemData === currentAppointment.itemData) {\r\n                return item\r\n            }\r\n        }\r\n        return null\r\n    }\r\n    _getDeletedAppointments(currentAppointments, sourceAppointments) {\r\n        var result = [];\r\n        for (var i = 0; i < sourceAppointments.length; i++) {\r\n            var sourceAppointment = sourceAppointments[i];\r\n            var currentAppointment = this._getAssociatedSourceAppointment(sourceAppointment, currentAppointments);\r\n            if (!currentAppointment) {\r\n                sourceAppointment.needRemove = true;\r\n                result.push(sourceAppointment)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    getRepaintedAppointments(currentAppointments, sourceAppointments) {\r\n        if (0 === sourceAppointments.length || \"agenda\" === this.appointmentRenderingStrategyName) {\r\n            return currentAppointments\r\n        }\r\n        currentAppointments.forEach(appointment => {\r\n            var sourceAppointment = this._getAssociatedSourceAppointment(appointment, sourceAppointments);\r\n            if (sourceAppointment) {\r\n                appointment.needRepaint = this._isDataChanged(appointment.itemData) || this._isSettingChanged(appointment.settings, sourceAppointment.settings) || this._isAppointmentShouldAppear(appointment, sourceAppointment)\r\n            }\r\n        });\r\n        return currentAppointments.concat(this._getDeletedAppointments(currentAppointments, sourceAppointments))\r\n    }\r\n    getRenderingStrategyInstance() {\r\n        var renderingStrategy = this.appointmentViewModel.getRenderingStrategy();\r\n        if (!renderingStrategy) {\r\n            var options = this._getRenderingStrategyOptions();\r\n            this.appointmentViewModel.initRenderingStrategy(options)\r\n        }\r\n        return this.appointmentViewModel.getRenderingStrategy()\r\n    }\r\n}\r\nexport default AppointmentLayoutManager;\r\n"]},"metadata":{},"sourceType":"module"}