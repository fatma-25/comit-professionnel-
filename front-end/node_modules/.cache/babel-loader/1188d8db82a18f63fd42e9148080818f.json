{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/model/views.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { isObject, isString } from \"../../../../core/utils/type\";\nvar VIEW_TYPES = [\"day\", \"week\", \"workWeek\", \"month\", \"timelineDay\", \"timelineWeek\", \"timelineWorkWeek\", \"timelineMonth\", \"agenda\"];\nexport var getCurrentView = (currentView, views) => {\n  var currentViewProps = views.find(view => {\n    var names = isObject(view) ? [view.name, view.type] : [view];\n\n    if (names.includes(currentView)) {\n      return true;\n    }\n\n    return false;\n  });\n\n  if (void 0 === currentViewProps) {\n    if (VIEW_TYPES.includes(currentView)) {\n      currentViewProps = currentView;\n    } else {\n      [currentViewProps] = views;\n    }\n  }\n\n  return currentViewProps;\n};\nexport var getCurrentViewProps = (currentView, views) => {\n  var currentViewProps = getCurrentView(currentView, views);\n  return isString(currentViewProps) ? {\n    type: currentViewProps\n  } : currentViewProps;\n};\n\nfunction getViewConfigProp(schedulerProp, viewProp) {\n  return void 0 !== viewProp ? viewProp : schedulerProp;\n}\n\nexport var getCurrentViewConfig = (currentViewProps, schedulerProps) => {\n  var {\n    scrolling: schedulerScrolling\n  } = schedulerProps;\n  var {\n    cellDuration: cellDuration,\n    dataCellTemplate: dataCellTemplate,\n    dateCellTemplate: dateCellTemplate,\n    endDayHour: endDayHour,\n    firstDayOfWeek: firstDayOfWeek,\n    groupByDate: groupByDate,\n    groupOrientation: groupOrientation,\n    intervalCount: intervalCount,\n    resourceCellTemplate: resourceCellTemplate,\n    scrolling: scrolling,\n    startDate: startDate,\n    startDayHour: startDayHour,\n    timeCellTemplate: timeCellTemplate,\n    type: type\n  } = currentViewProps;\n  var isVirtualScrolling = \"virtual\" === schedulerScrolling.mode || \"virtual\" === (null === scrolling || void 0 === scrolling ? void 0 : scrolling.mode);\n  var crossScrollingEnabled = schedulerProps.crossScrollingEnabled || isVirtualScrolling;\n  var result = {\n    firstDayOfWeek: getViewConfigProp(schedulerProps.firstDayOfWeek, firstDayOfWeek),\n    startDayHour: getViewConfigProp(schedulerProps.startDayHour, startDayHour),\n    endDayHour: getViewConfigProp(schedulerProps.endDayHour, endDayHour),\n    cellDuration: getViewConfigProp(schedulerProps.cellDuration, cellDuration),\n    groupByDate: getViewConfigProp(schedulerProps.groupByDate, groupByDate),\n    scrolling: getViewConfigProp(schedulerScrolling, scrolling),\n    dataCellTemplate: getViewConfigProp(schedulerProps.dataCellTemplate, dataCellTemplate),\n    timeCellTemplate: getViewConfigProp(schedulerProps.timeCellTemplate, timeCellTemplate),\n    resourceCellTemplate: getViewConfigProp(schedulerProps.resourceCellTemplate, resourceCellTemplate),\n    dateCellTemplate: getViewConfigProp(schedulerProps.dateCellTemplate, dateCellTemplate),\n    currentDate: schedulerProps.currentDate,\n    intervalCount: intervalCount,\n    groupOrientation: groupOrientation,\n    startDate: startDate,\n    type: type,\n    showAllDayPanel: schedulerProps.showAllDayPanel,\n    showCurrentTimeIndicator: schedulerProps.showCurrentTimeIndicator,\n    indicatorUpdateInterval: schedulerProps.indicatorUpdateInterval,\n    shadeUntilCurrentTime: schedulerProps.shadeUntilCurrentTime,\n    crossScrollingEnabled: crossScrollingEnabled,\n    schedulerHeight: schedulerProps.height,\n    schedulerWidth: schedulerProps.width,\n    tabIndex: schedulerProps.tabIndex,\n    accessKey: schedulerProps.accessKey,\n    focusStateEnabled: schedulerProps.focusStateEnabled,\n    allowMultipleCellSelection: true,\n    allDayPanelExpanded: true\n  };\n  return _extends({}, result, {\n    hoursInterval: result.cellDuration / 60\n  });\n};","map":{"version":3,"sources":["/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/node_modules/devextreme/esm/renovation/ui/scheduler/model/views.js"],"names":["_extends","isObject","isString","VIEW_TYPES","getCurrentView","currentView","views","currentViewProps","find","view","names","name","type","includes","getCurrentViewProps","getViewConfigProp","schedulerProp","viewProp","getCurrentViewConfig","schedulerProps","scrolling","schedulerScrolling","cellDuration","dataCellTemplate","dateCellTemplate","endDayHour","firstDayOfWeek","groupByDate","groupOrientation","intervalCount","resourceCellTemplate","startDate","startDayHour","timeCellTemplate","isVirtualScrolling","mode","crossScrollingEnabled","result","currentDate","showAllDayPanel","showCurrentTimeIndicator","indicatorUpdateInterval","shadeUntilCurrentTime","schedulerHeight","height","schedulerWidth","width","tabIndex","accessKey","focusStateEnabled","allowMultipleCellSelection","allDayPanelExpanded","hoursInterval"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/renovation/ui/scheduler/model/views.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    isObject,\r\n    isString\r\n} from \"../../../../core/utils/type\";\r\nvar VIEW_TYPES = [\"day\", \"week\", \"workWeek\", \"month\", \"timelineDay\", \"timelineWeek\", \"timelineWorkWeek\", \"timelineMonth\", \"agenda\"];\r\nexport var getCurrentView = (currentView, views) => {\r\n    var currentViewProps = views.find(view => {\r\n        var names = isObject(view) ? [view.name, view.type] : [view];\r\n        if (names.includes(currentView)) {\r\n            return true\r\n        }\r\n        return false\r\n    });\r\n    if (void 0 === currentViewProps) {\r\n        if (VIEW_TYPES.includes(currentView)) {\r\n            currentViewProps = currentView\r\n        } else {\r\n            [currentViewProps] = views\r\n        }\r\n    }\r\n    return currentViewProps\r\n};\r\nexport var getCurrentViewProps = (currentView, views) => {\r\n    var currentViewProps = getCurrentView(currentView, views);\r\n    return isString(currentViewProps) ? {\r\n        type: currentViewProps\r\n    } : currentViewProps\r\n};\r\n\r\nfunction getViewConfigProp(schedulerProp, viewProp) {\r\n    return void 0 !== viewProp ? viewProp : schedulerProp\r\n}\r\nexport var getCurrentViewConfig = (currentViewProps, schedulerProps) => {\r\n    var {\r\n        scrolling: schedulerScrolling\r\n    } = schedulerProps;\r\n    var {\r\n        cellDuration: cellDuration,\r\n        dataCellTemplate: dataCellTemplate,\r\n        dateCellTemplate: dateCellTemplate,\r\n        endDayHour: endDayHour,\r\n        firstDayOfWeek: firstDayOfWeek,\r\n        groupByDate: groupByDate,\r\n        groupOrientation: groupOrientation,\r\n        intervalCount: intervalCount,\r\n        resourceCellTemplate: resourceCellTemplate,\r\n        scrolling: scrolling,\r\n        startDate: startDate,\r\n        startDayHour: startDayHour,\r\n        timeCellTemplate: timeCellTemplate,\r\n        type: type\r\n    } = currentViewProps;\r\n    var isVirtualScrolling = \"virtual\" === schedulerScrolling.mode || \"virtual\" === (null === scrolling || void 0 === scrolling ? void 0 : scrolling.mode);\r\n    var crossScrollingEnabled = schedulerProps.crossScrollingEnabled || isVirtualScrolling;\r\n    var result = {\r\n        firstDayOfWeek: getViewConfigProp(schedulerProps.firstDayOfWeek, firstDayOfWeek),\r\n        startDayHour: getViewConfigProp(schedulerProps.startDayHour, startDayHour),\r\n        endDayHour: getViewConfigProp(schedulerProps.endDayHour, endDayHour),\r\n        cellDuration: getViewConfigProp(schedulerProps.cellDuration, cellDuration),\r\n        groupByDate: getViewConfigProp(schedulerProps.groupByDate, groupByDate),\r\n        scrolling: getViewConfigProp(schedulerScrolling, scrolling),\r\n        dataCellTemplate: getViewConfigProp(schedulerProps.dataCellTemplate, dataCellTemplate),\r\n        timeCellTemplate: getViewConfigProp(schedulerProps.timeCellTemplate, timeCellTemplate),\r\n        resourceCellTemplate: getViewConfigProp(schedulerProps.resourceCellTemplate, resourceCellTemplate),\r\n        dateCellTemplate: getViewConfigProp(schedulerProps.dateCellTemplate, dateCellTemplate),\r\n        currentDate: schedulerProps.currentDate,\r\n        intervalCount: intervalCount,\r\n        groupOrientation: groupOrientation,\r\n        startDate: startDate,\r\n        type: type,\r\n        showAllDayPanel: schedulerProps.showAllDayPanel,\r\n        showCurrentTimeIndicator: schedulerProps.showCurrentTimeIndicator,\r\n        indicatorUpdateInterval: schedulerProps.indicatorUpdateInterval,\r\n        shadeUntilCurrentTime: schedulerProps.shadeUntilCurrentTime,\r\n        crossScrollingEnabled: crossScrollingEnabled,\r\n        schedulerHeight: schedulerProps.height,\r\n        schedulerWidth: schedulerProps.width,\r\n        tabIndex: schedulerProps.tabIndex,\r\n        accessKey: schedulerProps.accessKey,\r\n        focusStateEnabled: schedulerProps.focusStateEnabled,\r\n        allowMultipleCellSelection: true,\r\n        allDayPanelExpanded: true\r\n    };\r\n    return _extends({}, result, {\r\n        hoursInterval: result.cellDuration / 60\r\n    })\r\n};\r\n"]},"metadata":{},"sourceType":"module"}