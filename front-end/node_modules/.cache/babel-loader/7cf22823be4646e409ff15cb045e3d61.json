{"ast":null,"code":"var _jsxFileName = \"/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/src/components/SideBar/Channels/Channels.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from \"../../../server/firebase\";\nimport { setChannel } from \"../../../store/actioncreator\";\nimport { Notification } from \"../Notification/Notification.component\";\nimport { Link } from \"react-router-dom\";\nimport './Channels.css';\nimport { Menu, Icon, Modal, Button, Form, Segment } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Channels = props => {\n  _s();\n\n  const [modalOpenState, setModalOpenState] = useState(false);\n  const [channelAddState, setChannelAddState] = useState({\n    name: '',\n    description: ''\n  });\n  const [isLoadingState, setLoadingState] = useState(false);\n  const [channelsState, setChannelsState] = useState([]);\n  const channelsRef = firebase.database().ref(\"channels\");\n  const usersRef = firebase.database().ref(\"users\");\n  useEffect(() => {\n    channelsRef.on('child_added', snap => {\n      setChannelsState(currentState => {\n        let updatedState = [...currentState];\n        updatedState.push(snap.val());\n        return updatedState;\n      });\n    });\n    return () => channelsRef.off();\n  }, []);\n  useEffect(() => {\n    if (channelsState.length > 0) {\n      props.selectChannel(channelsState[0]);\n    }\n  }, [!props.channel ? channelsState : null]);\n\n  const openModal = () => {\n    setModalOpenState(true);\n  };\n\n  const closeModal = () => {\n    setModalOpenState(false);\n  };\n\n  const checkIfFormValid = () => {\n    return channelAddState && channelAddState.name && channelAddState.description;\n  };\n\n  const displayChannels = () => {\n    if (channelsState.length > 0) {\n      return channelsState.map(channel => {\n        return /*#__PURE__*/_jsxDEV(Menu.Item, {\n          name: channel.name,\n          onClick: () => selectChannel(channel),\n          active: props.channel && channel.id === props.channel.id && !props.channel.isFavourite,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            style: {\n              color: \"#B4B4B9\",\n              textDecoration: \"none\"\n            },\n            to: \"/message\",\n            children: /*#__PURE__*/_jsxDEV(Notification, {\n              user: props.user,\n              channel: props.channel,\n              notificationChannelId: channel.id,\n              displayName: \"# \" + channel.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 35\n          }, this)\n        }, channel.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 24\n        }, this);\n      });\n    }\n  };\n\n  const selectChannel = channel => {\n    setLastVisited(props.user, props.channel);\n    setLastVisited(props.user, channel);\n    props.selectChannel(channel);\n  };\n\n  const setLastVisited = (user, channel) => {\n    const lastVisited = usersRef.child(user.uid).child(\"lastVisited\").child(channel.id);\n    lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n    lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n  };\n\n  const onSubmit = () => {\n    if (!checkIfFormValid()) {\n      return;\n    }\n\n    const key = channelsRef.push().key;\n    const channel = {\n      id: key,\n      name: channelAddState.name,\n      description: channelAddState.description,\n      created_by: {\n        name: props.user.displayName,\n        avatar: props.user.photoURL\n      }\n    };\n    setLoadingState(true);\n    channelsRef.child(key).update(channel).then(() => {\n      setChannelAddState({\n        name: '',\n        description: ''\n      });\n      setLoadingState(false);\n      closeModal();\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const handleInput = e => {\n    let target = e.target;\n    setChannelAddState(currentState => {\n      let updatedState = { ...currentState\n      };\n      updatedState[target.name] = target.value;\n      return updatedState;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(Menu.Menu, {\n      style: {\n        marginTop: '35px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Menu.Item, {\n        style: {\n          fontSize: '17px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"exchange\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }, this), \" Channels\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this), \"(\", channelsState.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), displayChannels(), /*#__PURE__*/_jsxDEV(Menu.Item, {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"clickable\",\n          onClick: openModal,\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this), \" ADD\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        alignSelf: \"center\",\n        display: \"flex\",\n        marginLeft: 400\n      },\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        open: modalOpenState,\n        onClose: closeModal,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          children: \"Create Channel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: onSubmit,\n            children: /*#__PURE__*/_jsxDEV(Segment, {\n              stacked: true,\n              children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n                name: \"name\",\n                value: channelAddState.name,\n                onChange: handleInput,\n                type: \"text\",\n                placeholder: \"Enter Channel Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n                name: \"description\",\n                value: channelAddState.description,\n                onChange: handleInput,\n                type: \"text\",\n                placeholder: \"Enter Channel Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            loading: isLoadingState,\n            onClick: onSubmit,\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              name: \"checkmark\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 21\n            }, this), \" Save\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: closeModal,\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              name: \"remove\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 21\n            }, this), \" Cancel\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Channels, \"7Rirkr7iyhEy9PjzVBJ14UqKCBw=\");\n\n_c = Channels;\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user.currentUser,\n    channel: state.channel.currentChannel\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    selectChannel: channel => dispatch(setChannel(channel))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Channels);\n\nvar _c;\n\n$RefreshReg$(_c, \"Channels\");","map":{"version":3,"sources":["/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/src/components/SideBar/Channels/Channels.component.jsx"],"names":["React","useState","useEffect","connect","firebase","setChannel","Notification","Link","Menu","Icon","Modal","Button","Form","Segment","Channels","props","modalOpenState","setModalOpenState","channelAddState","setChannelAddState","name","description","isLoadingState","setLoadingState","channelsState","setChannelsState","channelsRef","database","ref","usersRef","on","snap","currentState","updatedState","push","val","off","length","selectChannel","channel","openModal","closeModal","checkIfFormValid","displayChannels","map","id","isFavourite","color","textDecoration","user","setLastVisited","lastVisited","child","uid","set","ServerValue","TIMESTAMP","onDisconnect","onSubmit","key","created_by","displayName","avatar","photoURL","update","then","catch","err","console","log","handleInput","e","target","value","marginTop","fontSize","alignSelf","display","marginLeft","mapStateToProps","state","currentUser","currentChannel","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport firebase from \"../../../server/firebase\";\nimport { setChannel } from \"../../../store/actioncreator\"\nimport { Notification } from \"../Notification/Notification.component\";\nimport { Link} from \"react-router-dom\";\nimport './Channels.css';\nimport { Menu, Icon, Modal, Button, Form, Segment } from 'semantic-ui-react';\n\nconst Channels = (props) => {\n    const [modalOpenState, setModalOpenState] = useState(false);\n    const [channelAddState, setChannelAddState] = useState({ name: '', description: '' });\n    const [isLoadingState, setLoadingState] = useState(false);\n    const [channelsState, setChannelsState] = useState([]);\n\n    const channelsRef = firebase.database().ref(\"channels\");\n    const usersRef = firebase.database().ref(\"users\");\n\n    useEffect(() => {\n        channelsRef.on('child_added', (snap) => {\n            setChannelsState((currentState) => {\n                let updatedState = [...currentState];\n                updatedState.push(snap.val());               \n                return updatedState;\n            })\n        });\n\n        return () => channelsRef.off();\n    }, [])\n\n    useEffect(()=> {\n        if (channelsState.length > 0) {\n            props.selectChannel(channelsState[0])\n        }\n    },[!props.channel ?channelsState : null ])\n\n    const openModal = () => {\n        setModalOpenState(true);\n    }\n\n    const closeModal = () => {\n        setModalOpenState(false);\n    }\n\n    const checkIfFormValid = () => {\n        return channelAddState && channelAddState.name && channelAddState.description;\n    }\n\n    const displayChannels = () => {\n        if (channelsState.length > 0) {\n            return channelsState.map((channel) => {\n                return <Menu.Item\n                    key={channel.id}\n                    name={channel.name}\n                    onClick={() => selectChannel(channel)}\n                    active={props.channel && channel.id === props.channel.id && !props.channel.isFavourite}\n                >\n                                  <Link\n                style={{ color: \"#B4B4B9\", textDecoration: \"none\" }}\n                to=\"/message\"\n              >\n                      <Notification user={props.user} channel={props.channel}\n                        notificationChannelId={channel.id}\n                        displayName= {\"# \" + channel.name} />\n                   </Link>\n                </Menu.Item>\n            })\n        }\n    }\n\n    const selectChannel = (channel) => {\n        setLastVisited(props.user,props.channel);\n        setLastVisited(props.user,channel);\n        props.selectChannel(channel);\n    }\n\n    const setLastVisited = (user, channel) => {\n        const lastVisited = usersRef.child(user.uid).child(\"lastVisited\").child(channel.id);\n        lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n        lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n    }\n\n    const onSubmit = () => {\n\n        if (!checkIfFormValid()) {\n            return;\n        }\n\n        const key = channelsRef.push().key;\n\n        const channel = {\n            id: key,\n            name: channelAddState.name,\n            description: channelAddState.description,\n            created_by: {\n                name: props.user.displayName,\n                avatar: props.user.photoURL\n            }\n        }\n        setLoadingState(true);\n        channelsRef.child(key)\n            .update(channel)\n            .then(() => {\n                setChannelAddState({ name: '', description: '' });\n                setLoadingState(false);\n                closeModal();\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n    const handleInput = (e) => {\n\n        let target = e.target;\n        setChannelAddState((currentState) => {\n            let updatedState = { ...currentState };\n            updatedState[target.name] = target.value;\n            return updatedState;\n        })\n    }\n\n    return <> <Menu.Menu style={{ marginTop: '35px' }}>\n        <Menu.Item style={{fontSize : '17px'}}>\n            <span>\n                <Icon name=\"exchange\" /> Channels\n            </span>\n            ({channelsState.length})\n        </Menu.Item>\n        {displayChannels()}\n        <Menu.Item>\n            <span className=\"clickable\" onClick={openModal} >\n                <Icon name=\"add\" /> ADD\n            </span>\n        </Menu.Item>\n    </Menu.Menu>\n    <div style={{alignSelf:\"center\", display:\"flex\",marginLeft:400}}> \n        <Modal open={modalOpenState} onClose={closeModal}>\n            <Modal.Header>\n                Create Channel\n            </Modal.Header>\n            <Modal.Content>\n                <Form onSubmit={onSubmit}>\n                    <Segment stacked>\n                        <Form.Input\n                            name=\"name\"\n                            value={channelAddState.name}\n                            onChange={handleInput}\n                            type=\"text\"\n                            placeholder=\"Enter Channel Name\"\n                        />\n                        <Form.Input\n                            name=\"description\"\n                            value={channelAddState.description}\n                            onChange={handleInput}\n                            type=\"text\"\n                            placeholder=\"Enter Channel Description\"\n                        />\n                    </Segment>\n                </Form>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button loading={isLoadingState} onClick={onSubmit}>\n                    <Icon name=\"checkmark\" /> Save\n                </Button>\n                <Button onClick={closeModal}>\n                    <Icon name=\"remove\" /> Cancel\n                </Button>\n            </Modal.Actions>\n        </Modal>\n        </div>\n    </>\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user.currentUser,\n        channel: state.channel.currentChannel\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        selectChannel: (channel) => dispatch(setChannel(channel))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Channels);"]},"metadata":{},"sourceType":"module"}