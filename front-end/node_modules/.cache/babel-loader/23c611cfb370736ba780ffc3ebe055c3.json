{"ast":null,"code":"var _jsxFileName = \"/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/src/components/views/ListContact.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState } from \"react\";\n// import Search from \"../Search\";\n// import Contact from \"./Contact\";\n// const ListContact = () => {\n//   const [searchedName, setSearchedName] = useState(\"\");\n//   const searcheditem = (search) => {\n//     setSearchedName(search);\n//     console.log(searchedName);\n//   };\n//   return (\n//     <>\n//       <Search searcheditem={searcheditem} />\n//       <Contact searchedName={searchedName} />\n//     </>\n//   );\n// };\n// export default ListContact;\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\"; // import firebase from \"../../server/firebase\";\n\nimport firebase from \"../../server/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateChat = props => {\n  _s();\n\n  const [usersState, setUsersState] = useState([]);\n  const [connectedUsersState, setConnectedUsersState] = useState([]);\n  const usersRef = firebase.database().ref(\"users\");\n  const connectedRef = firebase.database().ref(\".info/connected\");\n  const statusRef = firebase.database().ref(\"status\");\n  useEffect(() => {\n    usersRef.on(\"child_added\", snap => {\n      setUsersState(currentState => {\n        let updatedState = [...currentState];\n        let user = snap.val();\n        user.name = user.displayName;\n        user.email = user.email;\n        user.id = snap.key;\n        user.isPrivateChat = true;\n        updatedState.push(user);\n        return updatedState;\n      });\n    });\n    connectedRef.on(\"value\", snap => {\n      if (props.user && snap.val()) {\n        const userStatusRef = statusRef.child(props.user.uid);\n        userStatusRef.set(true);\n        userStatusRef.onDisconnect().remove();\n      }\n    });\n    return () => {\n      usersRef.off();\n      connectedRef.off();\n    };\n  }, [props.user]);\n  useEffect(() => {\n    statusRef.on(\"child_added\", snap => {\n      setConnectedUsersState(currentState => {\n        let updatedState = [...currentState];\n        updatedState.push(snap.key);\n        return updatedState;\n      });\n    });\n    statusRef.on(\"child_removed\", snap => {\n      setConnectedUsersState(currentState => {\n        let updatedState = [...currentState];\n        let index = updatedState.indexOf(snap.key);\n        updatedState.splice(index, 1);\n        return updatedState;\n      });\n    });\n    return () => statusRef.off();\n  }, [usersState]);\n\n  const displayUsers = () => {\n    if (usersState.length > 0) {\n      return usersState.filter(user => user.id !== props.user.uid).map(user => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"space-between\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [console.log(user, \"uuuuusre\"), user.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\" \", props.user.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this);\n      });\n    }\n  };\n\n  const selectUser = user => {\n    let userTemp = { ...user\n    };\n    userTemp.id = generateChannelId(user.id);\n    setLastVisited(props.user, props.channel);\n    setLastVisited(props.user, userTemp);\n    props.selectChannel(userTemp);\n  };\n\n  const setLastVisited = (user, channel) => {\n    const lastVisited = usersRef.child(user.uid).child(\"lastVisited\").child(channel.id);\n    lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n    lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n  };\n\n  const generateChannelId = userId => {\n    if (props.user.uid < userId) {\n      return props.user.uid + userId;\n    } else {\n      return userId + props.user.uid;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: displayUsers()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PrivateChat, \"6U/V5/w1SKMexB1MZPyGIwXk8Wk=\");\n\n_c = PrivateChat;\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user.currentUser,\n    channel: state.channel.currentChannel\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {// selectChannel: (channel) => dispatch(setChannel(channel)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateChat);\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateChat\");","map":{"version":3,"sources":["/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/src/components/views/ListContact.js"],"names":["React","useState","useEffect","connect","firebase","PrivateChat","props","usersState","setUsersState","connectedUsersState","setConnectedUsersState","usersRef","database","ref","connectedRef","statusRef","on","snap","currentState","updatedState","user","val","name","displayName","email","id","key","isPrivateChat","push","userStatusRef","child","uid","set","onDisconnect","remove","off","index","indexOf","splice","displayUsers","length","filter","map","display","justifyContent","console","log","selectUser","userTemp","generateChannelId","setLastVisited","channel","selectChannel","lastVisited","ServerValue","TIMESTAMP","userId","mapStateToProps","state","currentUser","currentChannel","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// import React, { useState } from \"react\";\n\n// import Search from \"../Search\";\n// import Contact from \"./Contact\";\n// const ListContact = () => {\n//   const [searchedName, setSearchedName] = useState(\"\");\n\n//   const searcheditem = (search) => {\n//     setSearchedName(search);\n//     console.log(searchedName);\n//   };\n//   return (\n//     <>\n//       <Search searcheditem={searcheditem} />\n\n//       <Contact searchedName={searchedName} />\n//     </>\n//   );\n// };\n\n// export default ListContact;\n\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n// import firebase from \"../../server/firebase\";\nimport firebase from \"../../server/firebase\";\n\nconst PrivateChat = (props) => {\n  const [usersState, setUsersState] = useState([]);\n\n  const [connectedUsersState, setConnectedUsersState] = useState([]);\n\n  const usersRef = firebase.database().ref(\"users\");\n\n  const connectedRef = firebase.database().ref(\".info/connected\");\n\n  const statusRef = firebase.database().ref(\"status\");\n\n  useEffect(() => {\n    usersRef.on(\"child_added\", (snap) => {\n      setUsersState((currentState) => {\n        let updatedState = [...currentState];\n\n        let user = snap.val();\n        user.name = user.displayName;\n        user.email = user.email;\n        user.id = snap.key;\n        user.isPrivateChat = true;\n        updatedState.push(user);\n\n        return updatedState;\n      });\n    });\n\n    connectedRef.on(\"value\", (snap) => {\n      if (props.user && snap.val()) {\n        const userStatusRef = statusRef.child(props.user.uid);\n        userStatusRef.set(true);\n        userStatusRef.onDisconnect().remove();\n      }\n    });\n\n    return () => {\n      usersRef.off();\n      connectedRef.off();\n    };\n  }, [props.user]);\n\n  useEffect(() => {\n    statusRef.on(\"child_added\", (snap) => {\n      setConnectedUsersState((currentState) => {\n        let updatedState = [...currentState];\n        updatedState.push(snap.key);\n        return updatedState;\n      });\n    });\n\n    statusRef.on(\"child_removed\", (snap) => {\n      setConnectedUsersState((currentState) => {\n        let updatedState = [...currentState];\n\n        let index = updatedState.indexOf(snap.key);\n        updatedState.splice(index, 1);\n        return updatedState;\n      });\n    });\n\n    return () => statusRef.off();\n  }, [usersState]);\n\n  const displayUsers = () => {\n    if (usersState.length > 0) {\n      return usersState\n        .filter((user) => user.id !== props.user.uid)\n        .map((user) => {\n          return (\n            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n              <div>\n                {console.log(user, \"uuuuusre\")}\n                {user.name}\n              </div>\n              <div> {props.user.email}</div>\n            </div>\n          );\n        });\n    }\n  };\n\n  const selectUser = (user) => {\n    let userTemp = { ...user };\n    userTemp.id = generateChannelId(user.id);\n    setLastVisited(props.user, props.channel);\n    setLastVisited(props.user, userTemp);\n    props.selectChannel(userTemp);\n  };\n\n  const setLastVisited = (user, channel) => {\n    const lastVisited = usersRef\n      .child(user.uid)\n      .child(\"lastVisited\")\n      .child(channel.id);\n    lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n    lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n  };\n\n  const generateChannelId = (userId) => {\n    if (props.user.uid < userId) {\n      return props.user.uid + userId;\n    } else {\n      return userId + props.user.uid;\n    }\n  };\n\n  return <div>{displayUsers()}</div>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user.currentUser,\n    channel: state.channel.currentChannel,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // selectChannel: (channel) => dispatch(setChannel(channel)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateChat);\n"]},"metadata":{},"sourceType":"module"}