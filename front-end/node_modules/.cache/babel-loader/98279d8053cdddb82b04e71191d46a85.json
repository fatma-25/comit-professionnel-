{"ast":null,"code":"var _jsxFileName = \"/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { rootReducer } from \"./redux/reducers/rootReducer\";\nimport thunk from \"redux-thunk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst middleware = [thunk];\nconst store = createStore(rootReducer, compose(applyMiddleware(...middleware) // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n));\nReactDOM.render( /*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 20,\n  columnNumber: 3\n}, this), document.getElementById(\"root\")); // import React, { useEffect } from \"react\";\n// import ReactDOM from \"react-dom\";\n// import App from \"./App\";\n// import * as serviceWorker from \"./serviceWorker\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   withRouter,\n// } from \"react-router-dom\";\n// import { Provider, connect } from \"react-redux\";\n// import { createStore } from \"redux\";\n// import Register from \"./components/Auth /Register/Register.component\";\n// import Login from \"./components/Auth /Login/Login.component\";\n// import firebase from \"./server/firebase\";\n// import { combinedReducers } from \"./store/reducer\";\n// import { setUser } from \"./store/actioncreator\";\n// import { AppLoader } from \"./components/AppLoader/AppLoader.component\";\n// import \"semantic-ui-css/semantic.min.css\";\n// const store = createStore(combinedReducers);\n// const Index = (props) => {\n//   useEffect(() => {\n//     firebase.auth().onAuthStateChanged((user) => {\n//       if (user) {\n//         props.setUser(user);\n//         props.history.push(\"/\");\n//       } else {\n//         props.setUser(null);\n//         props.history.push(\"/login\");\n//       }\n//     });\n//   }, []);\n//   console.log(\"Debug\", props.currentUser);\n//   return (\n//     <>\n//       <AppLoader loading={props.loading && props.location.pathname === \"/\"} />\n//       <Switch>\n//         <Route path=\"/login\" component={Login} />\n//         <Route path=\"/register\" component={Register} />\n//         <Route path=\"/\" component={App} />\n//       </Switch>\n//     </>\n//   );\n// };\n// const mapStateToProps = (state) => {\n//   return {\n//     currentUser: state.user.currentUser,\n//     loading: state.channel.loading,\n//   };\n// };\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     setUser: (user) => {\n//       dispatch(setUser(user));\n//     },\n//   };\n// };\n// const IndexWithRouter = withRouter(\n//   connect(mapStateToProps, mapDispatchToProps)(Index)\n// );\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <Provider store={store}>\n//       <Router>\n//         <IndexWithRouter />\n//       </Router>\n//     </Provider>\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();","map":{"version":3,"sources":["/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/src/index.js"],"names":["React","ReactDOM","App","createStore","compose","applyMiddleware","Provider","rootReducer","thunk","middleware","store","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AAEA,MAAMC,UAAU,GAAG,CAACD,KAAD,CAAnB;AAEA,MAAME,KAAK,GAAGP,WAAW,CACvBI,WADuB,EAEvBH,OAAO,CACLC,eAAe,CAAC,GAAGI,UAAJ,CADV,CAEL;AAFK,CAFgB,CAAzB;AAOAR,QAAQ,CAACU,MAAT,eACE,QAAC,QAAD;AAAU,EAAA,KAAK,EAAED,KAAjB;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { rootReducer } from \"./redux/reducers/rootReducer\";\nimport thunk from \"redux-thunk\";\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(...middleware)\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// import React, { useEffect } from \"react\";\n// import ReactDOM from \"react-dom\";\n// import App from \"./App\";\n// import * as serviceWorker from \"./serviceWorker\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   withRouter,\n// } from \"react-router-dom\";\n// import { Provider, connect } from \"react-redux\";\n// import { createStore } from \"redux\";\n// import Register from \"./components/Auth /Register/Register.component\";\n// import Login from \"./components/Auth /Login/Login.component\";\n// import firebase from \"./server/firebase\";\n// import { combinedReducers } from \"./store/reducer\";\n// import { setUser } from \"./store/actioncreator\";\n// import { AppLoader } from \"./components/AppLoader/AppLoader.component\";\n\n// import \"semantic-ui-css/semantic.min.css\";\n\n// const store = createStore(combinedReducers);\n\n// const Index = (props) => {\n//   useEffect(() => {\n//     firebase.auth().onAuthStateChanged((user) => {\n//       if (user) {\n//         props.setUser(user);\n//         props.history.push(\"/\");\n//       } else {\n//         props.setUser(null);\n//         props.history.push(\"/login\");\n//       }\n//     });\n//   }, []);\n\n//   console.log(\"Debug\", props.currentUser);\n\n//   return (\n//     <>\n//       <AppLoader loading={props.loading && props.location.pathname === \"/\"} />\n//       <Switch>\n//         <Route path=\"/login\" component={Login} />\n//         <Route path=\"/register\" component={Register} />\n//         <Route path=\"/\" component={App} />\n//       </Switch>\n//     </>\n//   );\n// };\n\n// const mapStateToProps = (state) => {\n//   return {\n//     currentUser: state.user.currentUser,\n//     loading: state.channel.loading,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     setUser: (user) => {\n//       dispatch(setUser(user));\n//     },\n//   };\n// };\n\n// const IndexWithRouter = withRouter(\n//   connect(mapStateToProps, mapDispatchToProps)(Index)\n// );\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <Provider store={store}>\n//       <Router>\n//         <IndexWithRouter />\n//       </Router>\n//     </Provider>\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}