{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/view_model/to_test/views/utils/base.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport errors from \"../../../../../../../ui/widget/ui.errors\";\nimport dateUtils from \"../../../../../../../core/utils/date\";\nimport { isDefined } from \"../../../../../../../core/utils/type\";\nimport dateLocalization from \"../../../../../../../localization/date\";\nimport timeZoneUtils from \"../../../../../../../ui/scheduler/utils.timeZone\";\nimport { VERTICAL_GROUP_COUNT_CLASSES } from \"../../../../../../../ui/scheduler/classes\";\nimport { VIEWS } from \"../../../../../../../ui/scheduler/constants\";\nimport { getGroupCount } from \"../../../../../../../ui/scheduler/resources/utils\";\nimport { isVerticalGroupingApplied } from \"../../../../workspaces/utils\";\nexport var isDateInRange = (date, startDate, endDate, diff) => diff > 0 ? dateUtils.dateInRange(date, startDate, new Date(endDate.getTime() - 1)) : dateUtils.dateInRange(date, endDate, startDate, \"date\");\nexport var setOptionHour = (date, optionHour) => {\n  var nextDate = new Date(date);\n\n  if (!isDefined(optionHour)) {\n    return nextDate;\n  }\n\n  nextDate.setHours(optionHour, optionHour % 1 * 60, 0, 0);\n  return nextDate;\n};\nexport var getViewStartByOptions = (startDate, currentDate, intervalDuration, startViewDate) => {\n  if (!startDate) {\n    return new Date(currentDate);\n  }\n\n  var currentStartDate = dateUtils.trimTime(startViewDate);\n  var diff = currentStartDate.getTime() <= currentDate.getTime() ? 1 : -1;\n  var endDate = new Date(currentStartDate.getTime() + intervalDuration * diff);\n\n  while (!isDateInRange(currentDate, currentStartDate, endDate, diff)) {\n    currentStartDate = endDate;\n    endDate = new Date(currentStartDate.getTime() + intervalDuration * diff);\n  }\n\n  return diff > 0 ? currentStartDate : endDate;\n};\nexport var getCalculatedFirstDayOfWeek = firstDayOfWeekOption => isDefined(firstDayOfWeekOption) ? firstDayOfWeekOption : dateLocalization.firstDayOfWeekIndex();\nexport var calculateViewStartDate = startDateOption => startDateOption;\nexport var calculateCellIndex = (rowIndex, columnIndex, rowCount) => columnIndex * rowCount + rowIndex;\nexport var getStartViewDateWithoutDST = (startViewDate, startDayHour) => {\n  var newStartViewDate = timeZoneUtils.getDateWithoutTimezoneChange(startViewDate);\n  newStartViewDate.setHours(startDayHour);\n  return newStartViewDate;\n};\nexport var getHeaderCellText = (headerIndex, date, headerCellTextFormat, getDateForHeaderText, additionalOptions) => {\n  var validDate = getDateForHeaderText(headerIndex, date, additionalOptions);\n  return dateLocalization.format(validDate, headerCellTextFormat);\n};\nexport var validateDayHours = (startDayHour, endDayHour) => {\n  if (startDayHour >= endDayHour) {\n    throw errors.Error(\"E1058\");\n  }\n};\nexport var getStartViewDateTimeOffset = (startViewDate, startDayHour) => {\n  var validStartDayHour = Math.floor(startDayHour);\n  var isDSTChange = timeZoneUtils.isTimezoneChangeInDate(startViewDate);\n\n  if (isDSTChange && validStartDayHour !== startViewDate.getHours()) {\n    return dateUtils.dateToMilliseconds(\"hour\");\n  }\n\n  return 0;\n};\nexport var formatWeekday = date => dateLocalization.getDayNames(\"abbreviated\")[date.getDay()];\nexport var formatWeekdayAndDay = date => \"\".concat(formatWeekday(date), \" \").concat(dateLocalization.format(date, \"day\"));\nexport var getToday = (indicatorTime, timeZoneCalculator) => {\n  var todayDate = null !== indicatorTime && void 0 !== indicatorTime ? indicatorTime : new Date();\n  return (null === timeZoneCalculator || void 0 === timeZoneCalculator ? void 0 : timeZoneCalculator.createDate(todayDate, {\n    path: \"toGrid\"\n  })) || todayDate;\n};\nexport var getVerticalGroupCountClass = groups => {\n  switch (null === groups || void 0 === groups ? void 0 : groups.length) {\n    case 1:\n      return VERTICAL_GROUP_COUNT_CLASSES[0];\n\n    case 2:\n      return VERTICAL_GROUP_COUNT_CLASSES[1];\n\n    case 3:\n      return VERTICAL_GROUP_COUNT_CLASSES[2];\n\n    default:\n      return;\n  }\n};\nexport var isDateAndTimeView = viewType => viewType !== VIEWS.TIMELINE_MONTH && viewType !== VIEWS.MONTH;\nexport var isSupportMultiDayAppointments = viewType => [VIEWS.TIMELINE_DAY, VIEWS.TIMELINE_WEEK, VIEWS.TIMELINE_WORK_WEEK, VIEWS.TIMELINE_MONTH].includes(viewType);\nexport var getHorizontalGroupCount = (groups, groupOrientation) => {\n  var groupCount = getGroupCount(groups) || 1;\n  var isVerticalGrouping = isVerticalGroupingApplied(groups, groupOrientation);\n  return isVerticalGrouping ? 1 : groupCount;\n};\nexport var calculateIsGroupedAllDayPanel = (groups, groupOrientation, isAllDayPanelVisible) => isVerticalGroupingApplied(groups, groupOrientation) && isAllDayPanelVisible;\nexport var calculateDayDuration = (startDayHour, endDayHour) => endDayHour - startDayHour;\nexport var isHorizontalView = viewType => {\n  switch (viewType) {\n    case VIEWS.TIMELINE_DAY:\n    case VIEWS.TIMELINE_WEEK:\n    case VIEWS.TIMELINE_WORK_WEEK:\n    case VIEWS.TIMELINE_MONTH:\n    case VIEWS.MONTH:\n      return true;\n\n    default:\n      return false;\n  }\n};\nexport var getTotalCellCountByCompleteData = completeData => completeData[completeData.length - 1].length;\nexport var getTotalRowCountByCompleteData = completeData => completeData.length;\nexport var getDisplayedCellCount = (displayedCellCount, completeData) => null !== displayedCellCount && void 0 !== displayedCellCount ? displayedCellCount : getTotalCellCountByCompleteData(completeData);\nexport var getDisplayedRowCount = (displayedRowCount, completeData) => null !== displayedRowCount && void 0 !== displayedRowCount ? displayedRowCount : getTotalRowCountByCompleteData(completeData);\nexport var getCellDuration = (viewType, startDayHour, endDayHour, hoursInterval) => {\n  switch (viewType) {\n    case \"month\":\n      return 36e5 * calculateDayDuration(startDayHour, endDayHour);\n\n    case \"timelineMonth\":\n      return dateUtils.dateToMilliseconds(\"day\");\n\n    default:\n      return 36e5 * hoursInterval;\n  }\n};","map":{"version":3,"sources":["/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/node_modules/devextreme/esm/renovation/ui/scheduler/view_model/to_test/views/utils/base.js"],"names":["errors","dateUtils","isDefined","dateLocalization","timeZoneUtils","VERTICAL_GROUP_COUNT_CLASSES","VIEWS","getGroupCount","isVerticalGroupingApplied","isDateInRange","date","startDate","endDate","diff","dateInRange","Date","getTime","setOptionHour","optionHour","nextDate","setHours","getViewStartByOptions","currentDate","intervalDuration","startViewDate","currentStartDate","trimTime","getCalculatedFirstDayOfWeek","firstDayOfWeekOption","firstDayOfWeekIndex","calculateViewStartDate","startDateOption","calculateCellIndex","rowIndex","columnIndex","rowCount","getStartViewDateWithoutDST","startDayHour","newStartViewDate","getDateWithoutTimezoneChange","getHeaderCellText","headerIndex","headerCellTextFormat","getDateForHeaderText","additionalOptions","validDate","format","validateDayHours","endDayHour","Error","getStartViewDateTimeOffset","validStartDayHour","Math","floor","isDSTChange","isTimezoneChangeInDate","getHours","dateToMilliseconds","formatWeekday","getDayNames","getDay","formatWeekdayAndDay","concat","getToday","indicatorTime","timeZoneCalculator","todayDate","createDate","path","getVerticalGroupCountClass","groups","length","isDateAndTimeView","viewType","TIMELINE_MONTH","MONTH","isSupportMultiDayAppointments","TIMELINE_DAY","TIMELINE_WEEK","TIMELINE_WORK_WEEK","includes","getHorizontalGroupCount","groupOrientation","groupCount","isVerticalGrouping","calculateIsGroupedAllDayPanel","isAllDayPanelVisible","calculateDayDuration","isHorizontalView","getTotalCellCountByCompleteData","completeData","getTotalRowCountByCompleteData","getDisplayedCellCount","displayedCellCount","getDisplayedRowCount","displayedRowCount","getCellDuration","hoursInterval"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/renovation/ui/scheduler/view_model/to_test/views/utils/base.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport errors from \"../../../../../../../ui/widget/ui.errors\";\r\nimport dateUtils from \"../../../../../../../core/utils/date\";\r\nimport {\r\n    isDefined\r\n} from \"../../../../../../../core/utils/type\";\r\nimport dateLocalization from \"../../../../../../../localization/date\";\r\nimport timeZoneUtils from \"../../../../../../../ui/scheduler/utils.timeZone\";\r\nimport {\r\n    VERTICAL_GROUP_COUNT_CLASSES\r\n} from \"../../../../../../../ui/scheduler/classes\";\r\nimport {\r\n    VIEWS\r\n} from \"../../../../../../../ui/scheduler/constants\";\r\nimport {\r\n    getGroupCount\r\n} from \"../../../../../../../ui/scheduler/resources/utils\";\r\nimport {\r\n    isVerticalGroupingApplied\r\n} from \"../../../../workspaces/utils\";\r\nexport var isDateInRange = (date, startDate, endDate, diff) => diff > 0 ? dateUtils.dateInRange(date, startDate, new Date(endDate.getTime() - 1)) : dateUtils.dateInRange(date, endDate, startDate, \"date\");\r\nexport var setOptionHour = (date, optionHour) => {\r\n    var nextDate = new Date(date);\r\n    if (!isDefined(optionHour)) {\r\n        return nextDate\r\n    }\r\n    nextDate.setHours(optionHour, optionHour % 1 * 60, 0, 0);\r\n    return nextDate\r\n};\r\nexport var getViewStartByOptions = (startDate, currentDate, intervalDuration, startViewDate) => {\r\n    if (!startDate) {\r\n        return new Date(currentDate)\r\n    }\r\n    var currentStartDate = dateUtils.trimTime(startViewDate);\r\n    var diff = currentStartDate.getTime() <= currentDate.getTime() ? 1 : -1;\r\n    var endDate = new Date(currentStartDate.getTime() + intervalDuration * diff);\r\n    while (!isDateInRange(currentDate, currentStartDate, endDate, diff)) {\r\n        currentStartDate = endDate;\r\n        endDate = new Date(currentStartDate.getTime() + intervalDuration * diff)\r\n    }\r\n    return diff > 0 ? currentStartDate : endDate\r\n};\r\nexport var getCalculatedFirstDayOfWeek = firstDayOfWeekOption => isDefined(firstDayOfWeekOption) ? firstDayOfWeekOption : dateLocalization.firstDayOfWeekIndex();\r\nexport var calculateViewStartDate = startDateOption => startDateOption;\r\nexport var calculateCellIndex = (rowIndex, columnIndex, rowCount) => columnIndex * rowCount + rowIndex;\r\nexport var getStartViewDateWithoutDST = (startViewDate, startDayHour) => {\r\n    var newStartViewDate = timeZoneUtils.getDateWithoutTimezoneChange(startViewDate);\r\n    newStartViewDate.setHours(startDayHour);\r\n    return newStartViewDate\r\n};\r\nexport var getHeaderCellText = (headerIndex, date, headerCellTextFormat, getDateForHeaderText, additionalOptions) => {\r\n    var validDate = getDateForHeaderText(headerIndex, date, additionalOptions);\r\n    return dateLocalization.format(validDate, headerCellTextFormat)\r\n};\r\nexport var validateDayHours = (startDayHour, endDayHour) => {\r\n    if (startDayHour >= endDayHour) {\r\n        throw errors.Error(\"E1058\")\r\n    }\r\n};\r\nexport var getStartViewDateTimeOffset = (startViewDate, startDayHour) => {\r\n    var validStartDayHour = Math.floor(startDayHour);\r\n    var isDSTChange = timeZoneUtils.isTimezoneChangeInDate(startViewDate);\r\n    if (isDSTChange && validStartDayHour !== startViewDate.getHours()) {\r\n        return dateUtils.dateToMilliseconds(\"hour\")\r\n    }\r\n    return 0\r\n};\r\nexport var formatWeekday = date => dateLocalization.getDayNames(\"abbreviated\")[date.getDay()];\r\nexport var formatWeekdayAndDay = date => \"\".concat(formatWeekday(date), \" \").concat(dateLocalization.format(date, \"day\"));\r\nexport var getToday = (indicatorTime, timeZoneCalculator) => {\r\n    var todayDate = null !== indicatorTime && void 0 !== indicatorTime ? indicatorTime : new Date;\r\n    return (null === timeZoneCalculator || void 0 === timeZoneCalculator ? void 0 : timeZoneCalculator.createDate(todayDate, {\r\n        path: \"toGrid\"\r\n    })) || todayDate\r\n};\r\nexport var getVerticalGroupCountClass = groups => {\r\n    switch (null === groups || void 0 === groups ? void 0 : groups.length) {\r\n        case 1:\r\n            return VERTICAL_GROUP_COUNT_CLASSES[0];\r\n        case 2:\r\n            return VERTICAL_GROUP_COUNT_CLASSES[1];\r\n        case 3:\r\n            return VERTICAL_GROUP_COUNT_CLASSES[2];\r\n        default:\r\n            return\r\n    }\r\n};\r\nexport var isDateAndTimeView = viewType => viewType !== VIEWS.TIMELINE_MONTH && viewType !== VIEWS.MONTH;\r\nexport var isSupportMultiDayAppointments = viewType => [VIEWS.TIMELINE_DAY, VIEWS.TIMELINE_WEEK, VIEWS.TIMELINE_WORK_WEEK, VIEWS.TIMELINE_MONTH].includes(viewType);\r\nexport var getHorizontalGroupCount = (groups, groupOrientation) => {\r\n    var groupCount = getGroupCount(groups) || 1;\r\n    var isVerticalGrouping = isVerticalGroupingApplied(groups, groupOrientation);\r\n    return isVerticalGrouping ? 1 : groupCount\r\n};\r\nexport var calculateIsGroupedAllDayPanel = (groups, groupOrientation, isAllDayPanelVisible) => isVerticalGroupingApplied(groups, groupOrientation) && isAllDayPanelVisible;\r\nexport var calculateDayDuration = (startDayHour, endDayHour) => endDayHour - startDayHour;\r\nexport var isHorizontalView = viewType => {\r\n    switch (viewType) {\r\n        case VIEWS.TIMELINE_DAY:\r\n        case VIEWS.TIMELINE_WEEK:\r\n        case VIEWS.TIMELINE_WORK_WEEK:\r\n        case VIEWS.TIMELINE_MONTH:\r\n        case VIEWS.MONTH:\r\n            return true;\r\n        default:\r\n            return false\r\n    }\r\n};\r\nexport var getTotalCellCountByCompleteData = completeData => completeData[completeData.length - 1].length;\r\nexport var getTotalRowCountByCompleteData = completeData => completeData.length;\r\nexport var getDisplayedCellCount = (displayedCellCount, completeData) => null !== displayedCellCount && void 0 !== displayedCellCount ? displayedCellCount : getTotalCellCountByCompleteData(completeData);\r\nexport var getDisplayedRowCount = (displayedRowCount, completeData) => null !== displayedRowCount && void 0 !== displayedRowCount ? displayedRowCount : getTotalRowCountByCompleteData(completeData);\r\nexport var getCellDuration = (viewType, startDayHour, endDayHour, hoursInterval) => {\r\n    switch (viewType) {\r\n        case \"month\":\r\n            return 36e5 * calculateDayDuration(startDayHour, endDayHour);\r\n        case \"timelineMonth\":\r\n            return dateUtils.dateToMilliseconds(\"day\");\r\n        default:\r\n            return 36e5 * hoursInterval\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}