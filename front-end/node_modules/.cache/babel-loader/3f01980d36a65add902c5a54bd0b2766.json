{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/timeZoneCalculator/utils.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../../../core/utils/type\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { PathTimeZoneConversion } from \"./types\";\nexport class TimeZoneCalculator {\n  constructor(options) {\n    this.options = options;\n  }\n\n  createDate(sourceDate, info) {\n    var date = new Date(sourceDate);\n\n    switch (info.path) {\n      case PathTimeZoneConversion.fromSourceToAppointment:\n        return this.getConvertedDate(date, info.appointmentTimeZone, true, false);\n\n      case PathTimeZoneConversion.fromAppointmentToSource:\n        return this.getConvertedDate(date, info.appointmentTimeZone, true, true);\n\n      case PathTimeZoneConversion.fromSourceToGrid:\n        return this.getConvertedDate(date, info.appointmentTimeZone, false, false);\n\n      case PathTimeZoneConversion.fromGridToSource:\n        return this.getConvertedDate(date, info.appointmentTimeZone, false, true);\n\n      default:\n        throw new Error(\"not specified pathTimeZoneConversion\");\n    }\n  }\n\n  getOffsets(date, appointmentTimezone) {\n    var clientOffset = -this.getClientOffset(date) / dateUtils.dateToMilliseconds(\"hour\");\n    var commonOffset = this.getCommonOffset(date);\n    var appointmentOffset = this.getAppointmentOffset(date, appointmentTimezone);\n    return {\n      client: clientOffset,\n      common: !isDefined(commonOffset) ? clientOffset : commonOffset,\n      appointment: \"number\" !== typeof appointmentOffset ? clientOffset : appointmentOffset\n    };\n  }\n\n  getConvertedDateByOffsets(date, clientOffset, targetOffset, isBack) {\n    var direction = isBack ? -1 : 1;\n    var utcDate = date.getTime() - direction * clientOffset * dateUtils.dateToMilliseconds(\"hour\");\n    return new Date(utcDate + direction * targetOffset * dateUtils.dateToMilliseconds(\"hour\"));\n  }\n\n  getClientOffset(date) {\n    return this.options.getClientOffset(date);\n  }\n\n  getCommonOffset(date) {\n    return this.options.getCommonOffset(date);\n  }\n\n  getAppointmentOffset(date, appointmentTimezone) {\n    return this.options.getAppointmentOffset(date, appointmentTimezone);\n  }\n\n  getConvertedDate(date, appointmentTimezone, useAppointmentTimeZone, isBack) {\n    var newDate = new Date(date.getTime());\n    var offsets = this.getOffsets(newDate, appointmentTimezone);\n\n    if (useAppointmentTimeZone && !!appointmentTimezone) {\n      return this.getConvertedDateByOffsets(date, offsets.client, offsets.appointment, isBack);\n    }\n\n    return this.getConvertedDateByOffsets(date, offsets.client, offsets.common, isBack);\n  }\n\n}","map":{"version":3,"sources":["/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/node_modules/devextreme/esm/renovation/ui/scheduler/timeZoneCalculator/utils.js"],"names":["isDefined","dateUtils","PathTimeZoneConversion","TimeZoneCalculator","constructor","options","createDate","sourceDate","info","date","Date","path","fromSourceToAppointment","getConvertedDate","appointmentTimeZone","fromAppointmentToSource","fromSourceToGrid","fromGridToSource","Error","getOffsets","appointmentTimezone","clientOffset","getClientOffset","dateToMilliseconds","commonOffset","getCommonOffset","appointmentOffset","getAppointmentOffset","client","common","appointment","getConvertedDateByOffsets","targetOffset","isBack","direction","utcDate","getTime","useAppointmentTimeZone","newDate","offsets"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/renovation/ui/scheduler/timeZoneCalculator/utils.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined\r\n} from \"../../../../core/utils/type\";\r\nimport dateUtils from \"../../../../core/utils/date\";\r\nimport {\r\n    PathTimeZoneConversion\r\n} from \"./types\";\r\nexport class TimeZoneCalculator {\r\n    constructor(options) {\r\n        this.options = options\r\n    }\r\n    createDate(sourceDate, info) {\r\n        var date = new Date(sourceDate);\r\n        switch (info.path) {\r\n            case PathTimeZoneConversion.fromSourceToAppointment:\r\n                return this.getConvertedDate(date, info.appointmentTimeZone, true, false);\r\n            case PathTimeZoneConversion.fromAppointmentToSource:\r\n                return this.getConvertedDate(date, info.appointmentTimeZone, true, true);\r\n            case PathTimeZoneConversion.fromSourceToGrid:\r\n                return this.getConvertedDate(date, info.appointmentTimeZone, false, false);\r\n            case PathTimeZoneConversion.fromGridToSource:\r\n                return this.getConvertedDate(date, info.appointmentTimeZone, false, true);\r\n            default:\r\n                throw new Error(\"not specified pathTimeZoneConversion\")\r\n        }\r\n    }\r\n    getOffsets(date, appointmentTimezone) {\r\n        var clientOffset = -this.getClientOffset(date) / dateUtils.dateToMilliseconds(\"hour\");\r\n        var commonOffset = this.getCommonOffset(date);\r\n        var appointmentOffset = this.getAppointmentOffset(date, appointmentTimezone);\r\n        return {\r\n            client: clientOffset,\r\n            common: !isDefined(commonOffset) ? clientOffset : commonOffset,\r\n            appointment: \"number\" !== typeof appointmentOffset ? clientOffset : appointmentOffset\r\n        }\r\n    }\r\n    getConvertedDateByOffsets(date, clientOffset, targetOffset, isBack) {\r\n        var direction = isBack ? -1 : 1;\r\n        var utcDate = date.getTime() - direction * clientOffset * dateUtils.dateToMilliseconds(\"hour\");\r\n        return new Date(utcDate + direction * targetOffset * dateUtils.dateToMilliseconds(\"hour\"))\r\n    }\r\n    getClientOffset(date) {\r\n        return this.options.getClientOffset(date)\r\n    }\r\n    getCommonOffset(date) {\r\n        return this.options.getCommonOffset(date)\r\n    }\r\n    getAppointmentOffset(date, appointmentTimezone) {\r\n        return this.options.getAppointmentOffset(date, appointmentTimezone)\r\n    }\r\n    getConvertedDate(date, appointmentTimezone, useAppointmentTimeZone, isBack) {\r\n        var newDate = new Date(date.getTime());\r\n        var offsets = this.getOffsets(newDate, appointmentTimezone);\r\n        if (useAppointmentTimeZone && !!appointmentTimezone) {\r\n            return this.getConvertedDateByOffsets(date, offsets.client, offsets.appointment, isBack)\r\n        }\r\n        return this.getConvertedDateByOffsets(date, offsets.client, offsets.common, isBack)\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}