{"ast":null,"code":"var _jsxFileName = \"/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/src/components/views/ListContact.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState } from \"react\";\n// import Search from \"../Search\";\n// import Contact from \"./Contact\";\n// const ListContact = () => {\n//   const [searchedName, setSearchedName] = useState(\"\");\n//   const searcheditem = (search) => {\n//     setSearchedName(search);\n//     console.log(searchedName);\n//   };\n//   return (\n//     <>\n//       <Search searcheditem={searcheditem} />\n//       <Contact searchedName={searchedName} />\n//     </>\n//   );\n// };\n// export default ListContact;\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport firebase from \"../../../server/firebase\";\nimport { setChannel } from \"../../../store/actioncreator\";\nimport { Notification } from \"../Notification/Notification.component\";\nimport { Menu, Icon } from \"semantic-ui-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateChat = props => {\n  _s();\n\n  const [usersState, setUsersState] = useState([]);\n  const [connectedUsersState, setConnectedUsersState] = useState([]);\n  const usersRef = firebase.database().ref(\"users\");\n  const connectedRef = firebase.database().ref(\".info/connected\");\n  const statusRef = firebase.database().ref(\"status\");\n  useEffect(() => {\n    usersRef.on(\"child_added\", snap => {\n      setUsersState(currentState => {\n        let updatedState = [...currentState];\n        let user = snap.val();\n        user.name = user.displayName;\n        user.id = snap.key;\n        user.isPrivateChat = true;\n        updatedState.push(user);\n        return updatedState;\n      });\n    });\n    connectedRef.on(\"value\", snap => {\n      if (props.user && snap.val()) {\n        const userStatusRef = statusRef.child(props.user.uid);\n        userStatusRef.set(true);\n        userStatusRef.onDisconnect().remove();\n      }\n    });\n    return () => {\n      usersRef.off();\n      connectedRef.off();\n    };\n  }, [props.user]);\n  useEffect(() => {\n    statusRef.on(\"child_added\", snap => {\n      setConnectedUsersState(currentState => {\n        let updatedState = [...currentState];\n        updatedState.push(snap.key);\n        return updatedState;\n      });\n    });\n    statusRef.on(\"child_removed\", snap => {\n      setConnectedUsersState(currentState => {\n        let updatedState = [...currentState];\n        let index = updatedState.indexOf(snap.key);\n        updatedState.splice(index, 1);\n        return updatedState;\n      });\n    });\n    return () => statusRef.off();\n  }, [usersState]);\n\n  const displayUsers = () => {\n    if (usersState.length > 0) {\n      return usersState.filter(user => user.id !== props.user.uid).map(user => {\n        return /*#__PURE__*/_jsxDEV(Menu.Item, {\n          name: user.name,\n          onClick: () => selectUser(user),\n          active: props.channel && generateChannelId(user.id) === props.channel.id,\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"circle\",\n            color: `${connectedUsersState.indexOf(user.id) !== -1 ? \"green\" : \"red\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Notification, {\n            user: props.user,\n            channel: props.channel,\n            notificationChannelId: generateChannelId(user.id),\n            displayName: \"@ \" + user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)]\n        }, user.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this);\n      });\n    }\n  };\n\n  const selectUser = user => {\n    let userTemp = { ...user\n    };\n    userTemp.id = generateChannelId(user.id);\n    setLastVisited(props.user, props.channel);\n    setLastVisited(props.user, userTemp);\n    props.selectChannel(userTemp);\n  };\n\n  const setLastVisited = (user, channel) => {\n    const lastVisited = usersRef.child(user.uid).child(\"lastVisited\").child(channel.id);\n    lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n    lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n  };\n\n  const generateChannelId = userId => {\n    if (props.user.uid < userId) {\n      return props.user.uid + userId;\n    } else {\n      return userId + props.user.uid;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Menu.Menu, {\n    style: {\n      marginTop: \"35px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Menu.Item, {\n      style: {\n        fontSize: \"17px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), displayUsers()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PrivateChat, \"6U/V5/w1SKMexB1MZPyGIwXk8Wk=\");\n\n_c = PrivateChat;\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user.currentUser,\n    channel: state.channel.currentChannel\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    selectChannel: channel => dispatch(setChannel(channel))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateChat);\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateChat\");","map":{"version":3,"sources":["/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/src/components/views/ListContact.js"],"names":["React","useState","useEffect","connect","firebase","setChannel","Notification","Menu","Icon","PrivateChat","props","usersState","setUsersState","connectedUsersState","setConnectedUsersState","usersRef","database","ref","connectedRef","statusRef","on","snap","currentState","updatedState","user","val","name","displayName","id","key","isPrivateChat","push","userStatusRef","child","uid","set","onDisconnect","remove","off","index","indexOf","splice","displayUsers","length","filter","map","selectUser","channel","generateChannelId","userTemp","setLastVisited","selectChannel","lastVisited","ServerValue","TIMESTAMP","userId","marginTop","fontSize","mapStateToProps","state","currentUser","currentChannel","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// import React, { useState } from \"react\";\n\n// import Search from \"../Search\";\n// import Contact from \"./Contact\";\n// const ListContact = () => {\n//   const [searchedName, setSearchedName] = useState(\"\");\n\n//   const searcheditem = (search) => {\n//     setSearchedName(search);\n//     console.log(searchedName);\n//   };\n//   return (\n//     <>\n//       <Search searcheditem={searcheditem} />\n\n//       <Contact searchedName={searchedName} />\n//     </>\n//   );\n// };\n\n// export default ListContact;\n\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport firebase from \"../../../server/firebase\";\nimport { setChannel } from \"../../../store/actioncreator\";\nimport { Notification } from \"../Notification/Notification.component\";\n\nimport { Menu, Icon } from \"semantic-ui-react\";\n\nconst PrivateChat = (props) => {\n  const [usersState, setUsersState] = useState([]);\n\n  const [connectedUsersState, setConnectedUsersState] = useState([]);\n\n  const usersRef = firebase.database().ref(\"users\");\n\n  const connectedRef = firebase.database().ref(\".info/connected\");\n\n  const statusRef = firebase.database().ref(\"status\");\n\n  useEffect(() => {\n    usersRef.on(\"child_added\", (snap) => {\n      setUsersState((currentState) => {\n        let updatedState = [...currentState];\n\n        let user = snap.val();\n        user.name = user.displayName;\n        user.id = snap.key;\n        user.isPrivateChat = true;\n        updatedState.push(user);\n\n        return updatedState;\n      });\n    });\n\n    connectedRef.on(\"value\", (snap) => {\n      if (props.user && snap.val()) {\n        const userStatusRef = statusRef.child(props.user.uid);\n        userStatusRef.set(true);\n        userStatusRef.onDisconnect().remove();\n      }\n    });\n\n    return () => {\n      usersRef.off();\n      connectedRef.off();\n    };\n  }, [props.user]);\n\n  useEffect(() => {\n    statusRef.on(\"child_added\", (snap) => {\n      setConnectedUsersState((currentState) => {\n        let updatedState = [...currentState];\n        updatedState.push(snap.key);\n        return updatedState;\n      });\n    });\n\n    statusRef.on(\"child_removed\", (snap) => {\n      setConnectedUsersState((currentState) => {\n        let updatedState = [...currentState];\n\n        let index = updatedState.indexOf(snap.key);\n        updatedState.splice(index, 1);\n        return updatedState;\n      });\n    });\n\n    return () => statusRef.off();\n  }, [usersState]);\n\n  const displayUsers = () => {\n    if (usersState.length > 0) {\n      return usersState\n        .filter((user) => user.id !== props.user.uid)\n        .map((user) => {\n          return (\n            <Menu.Item\n              key={user.id}\n              name={user.name}\n              onClick={() => selectUser(user)}\n              active={\n                props.channel && generateChannelId(user.id) === props.channel.id\n              }\n            >\n              <Icon\n                name=\"circle\"\n                color={`${\n                  connectedUsersState.indexOf(user.id) !== -1 ? \"green\" : \"red\"\n                }`}\n              />\n\n              <Notification\n                user={props.user}\n                channel={props.channel}\n                notificationChannelId={generateChannelId(user.id)}\n                displayName={\"@ \" + user.name}\n              />\n            </Menu.Item>\n          );\n        });\n    }\n  };\n\n  const selectUser = (user) => {\n    let userTemp = { ...user };\n    userTemp.id = generateChannelId(user.id);\n    setLastVisited(props.user, props.channel);\n    setLastVisited(props.user, userTemp);\n    props.selectChannel(userTemp);\n  };\n\n  const setLastVisited = (user, channel) => {\n    const lastVisited = usersRef\n      .child(user.uid)\n      .child(\"lastVisited\")\n      .child(channel.id);\n    lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n    lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n  };\n\n  const generateChannelId = (userId) => {\n    if (props.user.uid < userId) {\n      return props.user.uid + userId;\n    } else {\n      return userId + props.user.uid;\n    }\n  };\n\n  return (\n    <Menu.Menu style={{ marginTop: \"35px\" }}>\n      <Menu.Item style={{ fontSize: \"17px\" }}></Menu.Item>\n      {displayUsers()}\n    </Menu.Menu>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user.currentUser,\n    channel: state.channel.currentChannel,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    selectChannel: (channel) => dispatch(setChannel(channel)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateChat);\n"]},"metadata":{},"sourceType":"module"}