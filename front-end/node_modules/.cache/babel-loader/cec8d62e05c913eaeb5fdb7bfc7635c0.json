{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { setWidth, getOuterHeight, getOuterWidth, setOuterHeight, getHeight, getWidth } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { getWindow, hasWindow } from \"../../../core/utils/window\";\nimport { getPublicElement } from \"../../../core/element\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport messageLocalization from \"../../../localization/message\";\nimport { noop } from \"../../../core/utils/common\";\nimport { isDefined } from \"../../../core/utils/type\";\nimport { addNamespace, isMouseEvent } from \"../../../events/utils/index\";\nimport pointerEvents from \"../../../events/pointer\";\nimport errors from \"../../widget/ui.errors\";\nimport { name as clickEventName } from \"../../../events/click\";\nimport { name as contextMenuEventName } from \"../../../events/contextmenu\";\nimport { enter as dragEventEnter, leave as dragEventLeave, drop as dragEventDrop } from \"../../../events/drag\";\nimport Scrollable from \"../../scroll_view/ui.scrollable\";\nimport HorizontalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.horizontal\";\nimport VerticalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.vertical\";\nimport tableCreatorModule from \"../table_creator\";\nvar {\n  tableCreator: tableCreator\n} = tableCreatorModule;\nimport VerticalShader from \"../shaders/ui.scheduler.current_time_shader.vertical\";\nimport AppointmentDragBehavior from \"../appointmentDragBehavior\";\nimport { APPOINTMENT_SETTINGS_KEY } from \"../constants\";\nimport { FIXED_CONTAINER_CLASS, VIRTUAL_CELL_CLASS, TIME_PANEL_CLASS, DATE_TABLE_CLASS, DATE_TABLE_ROW_CLASS, GROUP_ROW_CLASS, GROUP_HEADER_CONTENT_CLASS, VERTICAL_GROUP_COUNT_CLASSES } from \"../classes\";\nimport WidgetObserver from \"../base/widgetObserver\";\nimport { resetPosition, locate } from \"../../../animation/translator\";\nimport { VirtualScrollingDispatcher, VirtualScrollingRenderer } from \"./ui.scheduler.virtual_scrolling\";\nimport ViewDataProvider from \"./view_model/view_data_provider\";\nimport dxrDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/date_table/layout.j\";\nimport dxrAllDayPanelLayout from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/layout.j\";\nimport dxrAllDayPanelTitle from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/title.j\";\nimport dxrTimePanelTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/time_panel/layout.j\";\nimport dxrGroupPanel from \"../../../renovation/ui/scheduler/workspaces/base/group_panel/group_panel.j\";\nimport dxrDateHeader from \"../../../renovation/ui/scheduler/workspaces/base/header_panel/layout.j\";\nimport CellsSelectionState from \"./cells_selection_state\";\nimport { Cache } from \"./cache\";\nimport { CellsSelectionController } from \"./cells_selection_controller\";\nimport { calculateViewStartDate, getViewStartByOptions, validateDayHours, getStartViewDateTimeOffset, isDateAndTimeView, calculateIsGroupedAllDayPanel, getCellDuration } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { createResourcesTree, getCellGroups, getGroupsObjectFromGroupsArray, getGroupCount } from \"../resources/utils\";\nimport { Semaphore } from \"../../../renovation/ui/scheduler/semaphore\";\nimport { getCellWidth, getCellHeight, getAllDayHeight, getMaxAllowedPosition, PositionHelper } from \"./helpers/positionHelper\";\nimport { utils } from \"../utils\";\nimport { compileGetter } from \"../../../core/utils/data\";\nvar abstract = WidgetObserver.abstract;\nvar toMs = dateUtils.dateToMilliseconds;\nvar COMPONENT_CLASS = \"dx-scheduler-work-space\";\nvar GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-grouped\";\nvar VERTICAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-vertical-grouped\";\nvar WORKSPACE_VERTICAL_GROUP_TABLE_CLASS = \"dx-scheduler-work-space-vertical-group-table\";\nvar WORKSPACE_WITH_BOTH_SCROLLS_CLASS = \"dx-scheduler-work-space-both-scrollbar\";\nvar WORKSPACE_WITH_COUNT_CLASS = \"dx-scheduler-work-space-count\";\nvar WORKSPACE_WITH_GROUP_BY_DATE_CLASS = \"dx-scheduler-work-space-group-by-date\";\nvar WORKSPACE_WITH_ODD_CELLS_CLASS = \"dx-scheduler-work-space-odd-cells\";\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\nvar ALL_DAY_PANEL_CLASS = \"dx-scheduler-all-day-panel\";\nvar ALL_DAY_TABLE_CLASS = \"dx-scheduler-all-day-table\";\nvar ALL_DAY_CONTAINER_CLASS = \"dx-scheduler-all-day-appointments\";\nvar ALL_DAY_TITLE_CLASS = \"dx-scheduler-all-day-title\";\nvar ALL_DAY_TABLE_CELL_CLASS = \"dx-scheduler-all-day-table-cell\";\nvar ALL_DAY_TABLE_ROW_CLASS = \"dx-scheduler-all-day-table-row\";\nvar WORKSPACE_WITH_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day\";\nvar WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day-collapsed\";\nvar WORKSPACE_WITH_MOUSE_SELECTION_CLASS = \"dx-scheduler-work-space-mouse-selection\";\nvar HORIZONTAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-horizontal\";\nvar VERTICAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-vertical\";\nvar HEADER_PANEL_CLASS = \"dx-scheduler-header-panel\";\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\nvar GROUP_HEADER_CLASS = \"dx-scheduler-group-header\";\nvar DATE_TABLE_CELL_CLASS = \"dx-scheduler-date-table-cell\";\nvar DATE_TABLE_FOCUSED_CELL_CLASS = \"dx-scheduler-focused-cell\";\nvar VIRTUAL_ROW_CLASS = \"dx-scheduler-virtual-row\";\nvar DATE_TABLE_DROPPABLE_CELL_CLASS = \"dx-scheduler-date-table-droppable-cell\";\nvar SCHEDULER_HEADER_SCROLLABLE_CLASS = \"dx-scheduler-header-scrollable\";\nvar SCHEDULER_SIDEBAR_SCROLLABLE_CLASS = \"dx-scheduler-sidebar-scrollable\";\nvar SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS = \"dx-scheduler-date-table-scrollable\";\nvar SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerWorkSpace\");\nvar DragEventNames = {\n  ENTER: addNamespace(dragEventEnter, \"dxSchedulerDateTable\"),\n  DROP: addNamespace(dragEventDrop, \"dxSchedulerDateTable\"),\n  LEAVE: addNamespace(dragEventLeave, \"dxSchedulerDateTable\")\n};\nvar SCHEDULER_CELL_DXCLICK_EVENT_NAME = addNamespace(clickEventName, \"dxSchedulerDateTable\");\nvar SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerDateTable\");\nvar SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME = addNamespace(pointerEvents.up, \"dxSchedulerDateTable\");\nvar SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME = addNamespace(pointerEvents.move, \"dxSchedulerDateTable\");\nvar CELL_DATA = \"dxCellData\";\nvar DATE_TABLE_MIN_CELL_WIDTH = 75;\nvar DAY_MS = toMs(\"day\");\nvar HOUR_MS = toMs(\"hour\");\nvar DRAG_AND_DROP_SELECTOR = \".\".concat(DATE_TABLE_CLASS, \" td, .\").concat(ALL_DAY_TABLE_CLASS, \" td\");\nvar CELL_SELECTOR = \".\".concat(DATE_TABLE_CELL_CLASS, \", .\").concat(ALL_DAY_TABLE_CELL_CLASS);\n\nclass SchedulerWorkSpace extends WidgetObserver {\n  get viewDataProvider() {\n    if (!this._viewDataProvider) {\n      this._viewDataProvider = new ViewDataProvider(this.type);\n    }\n\n    return this._viewDataProvider;\n  }\n\n  get cache() {\n    if (!this._cache) {\n      this._cache = new Cache();\n    }\n\n    return this._cache;\n  }\n\n  get cellsSelectionState() {\n    if (!this._cellsSelectionState) {\n      this._cellsSelectionState = new CellsSelectionState(this.viewDataProvider);\n      var selectedCellsOption = this.option(\"selectedCellData\");\n\n      if ((null === selectedCellsOption || void 0 === selectedCellsOption ? void 0 : selectedCellsOption.length) > 0) {\n        var validSelectedCells = selectedCellsOption.map(selectedCell => {\n          var groups = selectedCell.groups;\n\n          if (!groups || 0 === this._getGroupCount()) {\n            return _extends({}, selectedCell, {\n              groupIndex: 0\n            });\n          }\n\n          var groupIndex = this._getGroupIndexByResourceId(groups);\n\n          return _extends({}, selectedCell, {\n            groupIndex: groupIndex\n          });\n        });\n\n        this._cellsSelectionState.setSelectedCellsByData(validSelectedCells);\n      }\n    }\n\n    return this._cellsSelectionState;\n  }\n\n  get cellsSelectionController() {\n    if (!this._cellsSelectionController) {\n      this._cellsSelectionController = new CellsSelectionController();\n    }\n\n    return this._cellsSelectionController;\n  }\n\n  get isAllDayPanelVisible() {\n    return this._isShowAllDayPanel() && this.supportAllDayRow();\n  }\n\n  get verticalGroupTableClass() {\n    return WORKSPACE_VERTICAL_GROUP_TABLE_CLASS;\n  }\n\n  get viewDirection() {\n    return \"vertical\";\n  }\n\n  get renovatedHeaderPanelComponent() {\n    return dxrDateHeader;\n  }\n\n  get timeZoneCalculator() {\n    return this.option(\"timeZoneCalculator\");\n  }\n\n  _supportedKeys() {\n    var clickHandler = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var selectedCells = this.cellsSelectionState.getSelectedCells();\n\n      if (null !== selectedCells && void 0 !== selectedCells && selectedCells.length) {\n        var selectedCellsElement = selectedCells.map(cellData => this._getCellByData(cellData)).filter(cell => !!cell);\n        e.target = selectedCellsElement;\n        this._showPopup = true;\n\n        this._cellClickAction({\n          event: e,\n          cellElement: $(selectedCellsElement),\n          cellData: selectedCells[0]\n        });\n      }\n    };\n\n    var onArrowPressed = (e, key) => {\n      var _this$cellsSelectionS;\n\n      e.preventDefault();\n      e.stopPropagation();\n      var focusedCellData = null === (_this$cellsSelectionS = this.cellsSelectionState.focusedCell) || void 0 === _this$cellsSelectionS ? void 0 : _this$cellsSelectionS.cellData;\n\n      if (focusedCellData) {\n        var isAllDayPanelCell = focusedCellData.allDay && !this._isVerticalGroupedWorkSpace();\n        var isMultiSelection = e.shiftKey;\n        var isMultiSelectionAllowed = this.option(\"allowMultipleCellSelection\");\n\n        var isRTL = this._isRTL();\n\n        var groupCount = this._getGroupCount();\n\n        var isGroupedByDate = this.isGroupedByDate();\n\n        var isHorizontalGrouping = this._isHorizontalGroupedWorkSpace();\n\n        var focusedCellPosition = this.viewDataProvider.findCellPositionInMap(_extends({}, focusedCellData, {\n          isAllDay: focusedCellData.allDay\n        }));\n        var edgeIndices = isHorizontalGrouping && isMultiSelection && !isGroupedByDate ? this.viewDataProvider.getGroupEdgeIndices(focusedCellData.groupIndex, isAllDayPanelCell) : this.viewDataProvider.getViewEdgeIndices(isAllDayPanelCell);\n        var nextCellData = this.cellsSelectionController.handleArrowClick({\n          focusedCellPosition: focusedCellPosition,\n          edgeIndices: edgeIndices,\n          isRTL: isRTL,\n          isGroupedByDate: isGroupedByDate,\n          groupCount: groupCount,\n          isMultiSelection: isMultiSelection,\n          isMultiSelectionAllowed: isMultiSelectionAllowed,\n          viewType: this.type,\n          key: key,\n          getCellDataByPosition: this.viewDataProvider.getCellData.bind(this.viewDataProvider),\n          isAllDayPanelCell: isAllDayPanelCell,\n          focusedCellData: focusedCellData\n        });\n\n        this._processNextSelectedCell(nextCellData, focusedCellData, isMultiSelection && isMultiSelectionAllowed);\n      }\n    };\n\n    return extend(super._supportedKeys(), {\n      enter: clickHandler,\n      space: clickHandler,\n      downArrow: e => {\n        onArrowPressed(e, \"down\");\n      },\n      upArrow: e => {\n        onArrowPressed(e, \"up\");\n      },\n      rightArrow: e => {\n        onArrowPressed(e, \"right\");\n      },\n      leftArrow: e => {\n        onArrowPressed(e, \"left\");\n      }\n    });\n  }\n\n  _isRTL() {\n    return this.option(\"rtlEnabled\");\n  }\n\n  _moveToCell($cell, isMultiSelection) {\n    if (!isDefined($cell) || !$cell.length) {\n      return;\n    }\n\n    var isMultiSelectionAllowed = this.option(\"allowMultipleCellSelection\");\n\n    var currentCellData = this._getFullCellData($cell);\n\n    var focusedCellData = this.cellsSelectionState.focusedCell.cellData;\n    var nextFocusedCellData = this.cellsSelectionController.moveToCell({\n      isMultiSelection: isMultiSelection,\n      isMultiSelectionAllowed: isMultiSelectionAllowed,\n      currentCellData: currentCellData,\n      focusedCellData: focusedCellData,\n      isVirtualCell: $cell.hasClass(VIRTUAL_CELL_CLASS)\n    });\n\n    this._processNextSelectedCell(nextFocusedCellData, focusedCellData, isMultiSelectionAllowed && isMultiSelection);\n  }\n\n  _processNextSelectedCell(nextCellData, focusedCellData, isMultiSelection) {\n    var nextCellPosition = this.viewDataProvider.findCellPositionInMap({\n      startDate: nextCellData.startDate,\n      groupIndex: nextCellData.groupIndex,\n      isAllDay: nextCellData.allDay,\n      index: nextCellData.index\n    });\n\n    if (!this.viewDataProvider.isSameCell(focusedCellData, nextCellData)) {\n      var $cell = nextCellData.allDay && !this._isVerticalGroupedWorkSpace() ? this._dom_getAllDayPanelCell(nextCellPosition.columnIndex) : this._dom_getDateCell(nextCellPosition);\n      var isNextCellAllDay = nextCellData.allDay;\n\n      this._setSelectedCellsStateAndUpdateSelection(isNextCellAllDay, nextCellPosition, isMultiSelection, $cell);\n\n      this._dateTableScrollable.scrollToElement($cell);\n    }\n  }\n\n  _setSelectedCellsStateAndUpdateSelection(isAllDay, cellPosition, isMultiSelection, $nextFocusedCell) {\n    var nextCellCoordinates = {\n      rowIndex: cellPosition.rowIndex,\n      columnIndex: cellPosition.columnIndex,\n      allDay: isAllDay\n    };\n    this.cellsSelectionState.setFocusedCell(nextCellCoordinates.rowIndex, nextCellCoordinates.columnIndex, isAllDay);\n\n    if (isMultiSelection) {\n      this.cellsSelectionState.setSelectedCells(nextCellCoordinates);\n    } else {\n      this.cellsSelectionState.setSelectedCells(nextCellCoordinates, nextCellCoordinates);\n    }\n\n    this.updateCellsSelection();\n\n    this._updateSelectedCellDataOption(this.cellsSelectionState.getSelectedCells(), $nextFocusedCell);\n  }\n\n  _hasAllDayClass($cell) {\n    return $cell.hasClass(ALL_DAY_TABLE_CELL_CLASS);\n  }\n\n  _focusInHandler(e) {\n    if ($(e.target).is(this._focusTarget()) && false !== this._isCellClick) {\n      delete this._isCellClick;\n      delete this._contextMenuHandled;\n\n      super._focusInHandler.apply(this, arguments);\n\n      this.cellsSelectionState.restoreSelectedAndFocusedCells();\n\n      if (!this.cellsSelectionState.focusedCell) {\n        var cellCoordinates = {\n          columnIndex: 0,\n          rowIndex: 0,\n          allDay: this._isVerticalGroupedWorkSpace() && this.isAllDayPanelVisible\n        };\n        this.cellsSelectionState.setFocusedCell(cellCoordinates.rowIndex, cellCoordinates.columnIndex, cellCoordinates.allDay);\n        this.cellsSelectionState.setSelectedCells(cellCoordinates, cellCoordinates);\n      }\n\n      this.updateCellsSelection();\n\n      this._updateSelectedCellDataOption(this.cellsSelectionState.getSelectedCells());\n    }\n  }\n\n  _focusOutHandler() {\n    super._focusOutHandler.apply(this, arguments);\n\n    if (!this._contextMenuHandled && !this._disposed) {\n      this.cellsSelectionState.releaseSelectedAndFocusedCells();\n      this.viewDataProvider.updateViewData(this.generateRenderOptions());\n      this.updateCellsSelection();\n    }\n  }\n\n  _focusTarget() {\n    return this.$element();\n  }\n\n  _isVerticalGroupedWorkSpace() {\n    return !!this.option(\"groups\").length && \"vertical\" === this.option(\"groupOrientation\");\n  }\n\n  _isHorizontalGroupedWorkSpace() {\n    return !!this.option(\"groups\").length && \"horizontal\" === this.option(\"groupOrientation\");\n  }\n\n  _isWorkSpaceWithCount() {\n    return this.option(\"intervalCount\") > 1;\n  }\n\n  _isWorkspaceWithOddCells() {\n    return .5 === this.option(\"hoursInterval\") && !this.isVirtualScrolling();\n  }\n\n  _getRealGroupOrientation() {\n    return this._isVerticalGroupedWorkSpace() ? \"vertical\" : \"horizontal\";\n  }\n\n  createRAllDayPanelElements() {\n    this._$allDayPanel = $(\"<div>\");\n    this._$allDayTitle = $(\"<div>\").appendTo(this._$headerPanelEmptyCell);\n  }\n\n  _dateTableScrollableConfig() {\n    var config = {\n      useKeyboard: false,\n      bounceEnabled: false,\n      updateManually: true,\n      onScroll: () => {\n        var _this$_groupedStrateg;\n\n        null === (_this$_groupedStrateg = this._groupedStrategy.cache) || void 0 === _this$_groupedStrateg ? void 0 : _this$_groupedStrateg.clear();\n      }\n    };\n\n    if (this._needCreateCrossScrolling()) {\n      config = extend(config, this._createCrossScrollingConfig(config));\n    }\n\n    if (this.isVirtualScrolling() && (this.virtualScrollingDispatcher.horizontalScrollingAllowed || this.virtualScrollingDispatcher.height)) {\n      var currentOnScroll = config.onScroll;\n      config = _extends({}, config, {\n        onScroll: e => {\n          null === currentOnScroll || void 0 === currentOnScroll ? void 0 : currentOnScroll(e);\n          this.virtualScrollingDispatcher.handleOnScrollEvent(null === e || void 0 === e ? void 0 : e.scrollOffset);\n        }\n      });\n    }\n\n    return config;\n  }\n\n  _createCrossScrollingConfig(currentConfig) {\n    var config = {};\n    config.direction = \"both\";\n    var currentOnScroll = currentConfig.onScroll;\n\n    config.onScroll = e => {\n      currentOnScroll();\n\n      this._dataTableSemaphore.take();\n\n      this._sideBarSemaphore.isFree() && this._sidebarScrollable && this._sidebarScrollable.scrollTo({\n        top: e.scrollOffset.top\n      });\n      this._headerSemaphore.isFree() && this._headerScrollable && this._headerScrollable.scrollTo({\n        left: e.scrollOffset.left\n      });\n\n      this._dataTableSemaphore.release();\n    };\n\n    config.onEnd = () => {\n      this.option(\"onScrollEnd\")();\n    };\n\n    return config;\n  }\n\n  _headerScrollableConfig() {\n    var config = {\n      useKeyboard: false,\n      showScrollbar: \"never\",\n      direction: \"horizontal\",\n      useNative: false,\n      updateManually: true,\n      bounceEnabled: false,\n      onScroll: e => {\n        this._headerSemaphore.take();\n\n        this._dataTableSemaphore.isFree() && this._dateTableScrollable.scrollTo({\n          left: e.scrollOffset.left\n        });\n\n        this._headerSemaphore.release();\n      }\n    };\n    return config;\n  }\n\n  _visibilityChanged(visible) {\n    this.cache.clear();\n\n    if (visible) {\n      this._updateGroupTableHeight();\n    }\n\n    if (visible && this._needCreateCrossScrolling()) {\n      this._setTableSizes();\n    }\n  }\n\n  _setTableSizes() {\n    this.cache.clear();\n\n    this._attachTableClasses();\n\n    var cellWidth = this.getCellWidth();\n\n    if (cellWidth < this.getCellMinWidth()) {\n      cellWidth = this.getCellMinWidth();\n    }\n\n    var minWidth = this.getWorkSpaceMinWidth();\n\n    var groupCount = this._getGroupCount();\n\n    var totalCellCount = this._getTotalCellCount(groupCount);\n\n    var width = cellWidth * totalCellCount;\n\n    if (width < minWidth) {\n      width = minWidth;\n    }\n\n    setWidth(this._$headerPanel, width);\n    setWidth(this._$dateTable, width);\n\n    if (this._$allDayTable) {\n      setWidth(this._$allDayTable, width);\n    }\n\n    this._attachHeaderTableClasses();\n\n    this._updateGroupTableHeight();\n\n    this._updateScrollable();\n  }\n\n  getWorkSpaceMinWidth() {\n    return this._groupedStrategy.getWorkSpaceMinWidth();\n  }\n\n  _dimensionChanged() {\n    if (this.option(\"crossScrollingEnabled\")) {\n      this._setTableSizes();\n    }\n\n    this.updateHeaderEmptyCellWidth();\n\n    this._updateScrollable();\n\n    this.cache.clear();\n  }\n\n  _needCreateCrossScrolling() {\n    return this.option(\"crossScrollingEnabled\");\n  }\n\n  _getElementClass() {\n    return noop();\n  }\n\n  _getRowCount() {\n    return this.viewDataProvider.getRowCount({\n      intervalCount: this.option(\"intervalCount\"),\n      currentDate: this.option(\"currentDate\"),\n      viewType: this.type,\n      hoursInterval: this.option(\"hoursInterval\"),\n      startDayHour: this.option(\"startDayHour\"),\n      endDayHour: this.option(\"endDayHour\")\n    });\n  }\n\n  _getCellCount() {\n    return this.viewDataProvider.getCellCount({\n      intervalCount: this.option(\"intervalCount\"),\n      currentDate: this.option(\"currentDate\"),\n      viewType: this.type,\n      hoursInterval: this.option(\"hoursInterval\"),\n      startDayHour: this.option(\"startDayHour\"),\n      endDayHour: this.option(\"endDayHour\")\n    });\n  }\n\n  isRenovatedRender() {\n    return this.renovatedRenderSupported() && this.option(\"renovateRender\");\n  }\n\n  _isVirtualModeOn() {\n    return \"virtual\" === this.option(\"scrolling.mode\");\n  }\n\n  isVirtualScrolling() {\n    return this.isRenovatedRender() && this._isVirtualModeOn();\n  }\n\n  _initVirtualScrolling() {\n    if (this.virtualScrollingDispatcher) {\n      this.virtualScrollingDispatcher.dispose();\n      this.virtualScrollingDispatcher = null;\n    }\n\n    this.virtualScrollingDispatcher = new VirtualScrollingDispatcher(this._getVirtualScrollingDispatcherOptions());\n    this.virtualScrollingDispatcher.attachScrollableEvents();\n    this.renderer = new VirtualScrollingRenderer(this);\n  }\n\n  onDataSourceChanged() {}\n\n  isGroupedAllDayPanel() {\n    return calculateIsGroupedAllDayPanel(this.option(\"groups\"), this.option(\"groupOrientation\"), this.isAllDayPanelVisible);\n  }\n\n  generateRenderOptions(isProvideVirtualCellsWidth) {\n    var _this$_getToday;\n\n    var groupCount = this._getGroupCount();\n\n    var groupOrientation = groupCount > 0 ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\n\n    var options = _extends({\n      groupByDate: this.option(\"groupByDate\"),\n      startRowIndex: 0,\n      startCellIndex: 0,\n      groupOrientation: groupOrientation,\n      today: null === (_this$_getToday = this._getToday) || void 0 === _this$_getToday ? void 0 : _this$_getToday.call(this),\n      groups: this.option(\"groups\"),\n      isProvideVirtualCellsWidth: isProvideVirtualCellsWidth,\n      isAllDayPanelVisible: this.isAllDayPanelVisible,\n      selectedCells: this.cellsSelectionState.getSelectedCells(),\n      focusedCell: this.cellsSelectionState.focusedCell,\n      headerCellTextFormat: this._getFormat(),\n      getDateForHeaderText: (_, date) => date,\n      startDayHour: this.option(\"startDayHour\"),\n      endDayHour: this.option(\"endDayHour\"),\n      cellDuration: this.getCellDuration(),\n      viewType: this.type,\n      intervalCount: this.option(\"intervalCount\"),\n      hoursInterval: this.option(\"hoursInterval\"),\n      currentDate: this.option(\"currentDate\"),\n      startDate: this.option(\"startDate\"),\n      firstDayOfWeek: this.option(\"firstDayOfWeek\")\n    }, this.virtualScrollingDispatcher.getRenderState());\n\n    return options;\n  }\n\n  renovatedRenderSupported() {\n    return true;\n  }\n\n  _updateGroupTableHeight() {\n    if (this._isVerticalGroupedWorkSpace() && hasWindow()) {\n      this._setHorizontalGroupHeaderCellsHeight();\n    }\n  }\n\n  updateHeaderEmptyCellWidth() {\n    if (hasWindow() && this._isRenderHeaderPanelEmptyCell()) {\n      var timePanelWidth = this.getTimePanelWidth();\n      var groupPanelWidth = this.getGroupTableWidth();\n\n      this._$headerPanelEmptyCell.css(\"width\", timePanelWidth + groupPanelWidth);\n    }\n  }\n\n  _isGroupsSpecified(resources) {\n    return this.option(\"groups\").length && resources;\n  }\n\n  _getGroupIndexByResourceId(id) {\n    var groups = this.option(\"groups\");\n    var resourceTree = createResourcesTree(groups);\n\n    if (!resourceTree.length) {\n      return 0;\n    }\n\n    return this._getGroupIndexRecursively(resourceTree, id);\n  }\n\n  _getGroupIndexRecursively(resourceTree, id) {\n    var currentKey = resourceTree[0].name;\n    var currentValue = id[currentKey];\n    return resourceTree.reduce((prevIndex, _ref) => {\n      var {\n        leafIndex: leafIndex,\n        value: value,\n        children: children\n      } = _ref;\n      var areValuesEqual = currentValue === value;\n\n      if (areValuesEqual && void 0 !== leafIndex) {\n        return leafIndex;\n      }\n\n      if (areValuesEqual) {\n        return this._getGroupIndexRecursively(children, id);\n      }\n\n      return prevIndex;\n    }, 0);\n  }\n\n  _getViewStartByOptions() {\n    return getViewStartByOptions(this.option(\"startDate\"), this.option(\"currentDate\"), this._getIntervalDuration(), this.option(\"startDate\") ? this._calculateViewStartDate() : void 0);\n  }\n\n  _getIntervalDuration() {\n    return this.viewDataProvider.getIntervalDuration(this.option(\"intervalCount\"));\n  }\n\n  _getHeaderDate() {\n    return this.getStartViewDate();\n  }\n\n  _calculateViewStartDate() {\n    return calculateViewStartDate(this.option(\"startDate\"));\n  }\n\n  _firstDayOfWeek() {\n    return this.viewDataProvider.getFirstDayOfWeek(this.option(\"firstDayOfWeek\"));\n  }\n\n  _attachEvents() {\n    this._createSelectionChangedAction();\n\n    this._attachClickEvent();\n\n    this._attachContextMenuEvent();\n  }\n\n  _attachClickEvent() {\n    var that = this;\n\n    var pointerDownAction = this._createAction(function (e) {\n      that._pointerDownHandler(e.event);\n    });\n\n    this._createCellClickAction();\n\n    var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\n    var $element = this.$element();\n    eventsEngine.off($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME);\n    eventsEngine.off($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME);\n    eventsEngine.on($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME, function (e) {\n      if (isMouseEvent(e) && e.which > 1) {\n        e.preventDefault();\n        return;\n      }\n\n      pointerDownAction({\n        event: e\n      });\n    });\n    eventsEngine.on($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME, cellSelector, function (e) {\n      var $cell = $(e.target);\n\n      that._cellClickAction({\n        event: e,\n        cellElement: getPublicElement($cell),\n        cellData: that.getCellData($cell)\n      });\n    });\n  }\n\n  _createCellClickAction() {\n    this._cellClickAction = this._createActionByOption(\"onCellClick\", {\n      afterExecute: e => this._cellClickHandler(e.args[0].event)\n    });\n  }\n\n  _createSelectionChangedAction() {\n    this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\");\n  }\n\n  _cellClickHandler() {\n    if (this._showPopup) {\n      delete this._showPopup;\n\n      this._handleSelectedCellsClick();\n    }\n  }\n\n  _pointerDownHandler(e) {\n    var $target = $(e.target);\n\n    if (!$target.hasClass(DATE_TABLE_CELL_CLASS) && !$target.hasClass(ALL_DAY_TABLE_CELL_CLASS)) {\n      this._isCellClick = false;\n      return;\n    }\n\n    this._isCellClick = true;\n\n    if ($target.hasClass(DATE_TABLE_FOCUSED_CELL_CLASS)) {\n      this._showPopup = true;\n    } else {\n      var cellCoordinates = this._getCoordinatesByCell($target);\n\n      var isAllDayCell = this._hasAllDayClass($target);\n\n      this._setSelectedCellsStateAndUpdateSelection(isAllDayCell, cellCoordinates, false, $target);\n    }\n  }\n\n  _handleSelectedCellsClick() {\n    var selectedCells = this.cellsSelectionState.getSelectedCells();\n    var firstCellData = selectedCells[0];\n    var lastCellData = selectedCells[selectedCells.length - 1];\n    var result = {\n      startDate: firstCellData.startDate,\n      endDate: lastCellData.endDate\n    };\n\n    if (void 0 !== lastCellData.allDay) {\n      result.allDay = lastCellData.allDay;\n    }\n\n    this.option(\"onSelectedCellsClick\")(result, lastCellData.groups);\n  }\n\n  _attachContextMenuEvent() {\n    this._createContextMenuAction();\n\n    var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\n    var $element = this.$element();\n    var eventName = addNamespace(contextMenuEventName, this.NAME);\n    eventsEngine.off($element, eventName, cellSelector);\n    eventsEngine.on($element, eventName, cellSelector, this._contextMenuHandler.bind(this));\n  }\n\n  _contextMenuHandler(e) {\n    var $cell = $(e.target);\n\n    this._contextMenuAction({\n      event: e,\n      cellElement: getPublicElement($cell),\n      cellData: this.getCellData($cell)\n    });\n\n    this._contextMenuHandled = true;\n  }\n\n  _createContextMenuAction() {\n    this._contextMenuAction = this._createActionByOption(\"onCellContextMenu\");\n  }\n\n  _getGroupHeaderContainer() {\n    if (this._isVerticalGroupedWorkSpace()) {\n      return this._$groupTable;\n    }\n\n    return this._$thead;\n  }\n\n  _getDateHeaderContainer() {\n    return this._$thead;\n  }\n\n  _getCalculateHeaderCellRepeatCount() {\n    return this._groupedStrategy.calculateHeaderCellRepeatCount();\n  }\n\n  _updateScrollable() {\n    this._dateTableScrollable.update();\n\n    this._headerScrollable && this._headerScrollable.update();\n    this._sidebarScrollable && this._sidebarScrollable.update();\n  }\n\n  _getTimePanelRowCount() {\n    return this._getCellCountInDay();\n  }\n\n  _getCellCountInDay() {\n    var hoursInterval = this.option(\"hoursInterval\");\n    var startDayHour = this.option(\"startDayHour\");\n    var endDayHour = this.option(\"endDayHour\");\n    return this.viewDataProvider.getCellCountInDay(startDayHour, endDayHour, hoursInterval);\n  }\n\n  _getTotalCellCount(groupCount) {\n    return this._groupedStrategy.getTotalCellCount(groupCount);\n  }\n\n  _getTotalRowCount(groupCount, includeAllDayPanelRows) {\n    var result = this._groupedStrategy.getTotalRowCount(groupCount);\n\n    if (includeAllDayPanelRows && this.isAllDayPanelVisible) {\n      result += groupCount;\n    }\n\n    return result;\n  }\n\n  _getGroupIndex(rowIndex, columnIndex) {\n    return this._groupedStrategy.getGroupIndex(rowIndex, columnIndex);\n  }\n\n  calculateEndDate(startDate) {\n    var viewDataGenerator = this.viewDataProvider.viewDataGenerator;\n    return viewDataGenerator.calculateEndDate(startDate, viewDataGenerator.getInterval(this.option(\"hoursInterval\")), this.option(\"endDayHour\"));\n  }\n\n  _getGroupCount() {\n    return getGroupCount(this.option(\"groups\"));\n  }\n\n  _attachTablesEvents() {\n    var element = this.$element();\n\n    this._attachDragEvents(element);\n\n    this._attachPointerEvents(element);\n  }\n\n  _detachDragEvents(element) {\n    eventsEngine.off(element, DragEventNames.ENTER);\n    eventsEngine.off(element, DragEventNames.LEAVE);\n    eventsEngine.off(element, DragEventNames.DROP);\n  }\n\n  _attachDragEvents(element) {\n    this._detachDragEvents(element);\n\n    eventsEngine.on(element, DragEventNames.ENTER, DRAG_AND_DROP_SELECTOR, {\n      checkDropTarget: (target, event) => !this._isOutsideScrollable(target, event)\n    }, e => {\n      this.removeDroppableCellClass();\n      $(e.target).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS);\n    });\n    eventsEngine.on(element, DragEventNames.LEAVE, () => this.removeDroppableCellClass());\n    eventsEngine.on(element, DragEventNames.DROP, DRAG_AND_DROP_SELECTOR, () => this.removeDroppableCellClass());\n  }\n\n  _attachPointerEvents(element) {\n    var isPointerDown = false;\n    eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME);\n    eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME);\n    eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\n      if (isMouseEvent(e) && 1 === e.which) {\n        isPointerDown = true;\n        this.$element().addClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS);\n        eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\n        eventsEngine.on(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME, () => {\n          isPointerDown = false;\n          this.$element().removeClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS);\n        });\n      }\n    });\n    eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\n      if (isPointerDown && this._dateTableScrollable && !this._dateTableScrollable.option(\"scrollByContent\")) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._moveToCell($(e.target), true);\n      }\n    });\n  }\n\n  _getFormat() {\n    return abstract();\n  }\n\n  getWorkArea() {\n    return this._$dateTableContainer;\n  }\n\n  getScrollable() {\n    return this._dateTableScrollable;\n  }\n\n  getScrollableScrollTop() {\n    return this._dateTableScrollable.scrollTop();\n  }\n\n  getGroupedScrollableScrollTop(allDay) {\n    return this._groupedStrategy.getScrollableScrollTop(allDay);\n  }\n\n  getScrollableScrollLeft() {\n    return this._dateTableScrollable.scrollLeft();\n  }\n\n  getScrollableOuterWidth() {\n    return this._dateTableScrollable.scrollWidth();\n  }\n\n  getScrollableContainer() {\n    return $(this._dateTableScrollable.container());\n  }\n\n  getHeaderPanelHeight() {\n    return this._$headerPanel && getOuterHeight(this._$headerPanel, true);\n  }\n\n  getTimePanelWidth() {\n    return this._$timePanel && getBoundingRect(this._$timePanel.get(0)).width;\n  }\n\n  getGroupTableWidth() {\n    return this._$groupTable ? getOuterWidth(this._$groupTable) : 0;\n  }\n\n  getWorkSpaceLeftOffset() {\n    return this._groupedStrategy.getLeftOffset();\n  }\n\n  _getCellCoordinatesByIndex(index) {\n    var columnIndex = Math.floor(index / this._getRowCount());\n    var rowIndex = index - this._getRowCount() * columnIndex;\n    return {\n      columnIndex: columnIndex,\n      rowIndex: rowIndex\n    };\n  }\n\n  _getDateGenerationOptions() {\n    var _this$viewDataProvide;\n\n    return {\n      startDayHour: this.option(\"startDayHour\"),\n      endDayHour: this.option(\"endDayHour\"),\n      isWorkView: this.viewDataProvider.viewDataGenerator.isWorkView,\n      interval: null === (_this$viewDataProvide = this.viewDataProvider.viewDataGenerator) || void 0 === _this$viewDataProvide ? void 0 : _this$viewDataProvide.getInterval(this.option(\"hoursInterval\")),\n      startViewDate: this.getStartViewDate(),\n      firstDayOfWeek: this._firstDayOfWeek()\n    };\n  }\n\n  _getIntervalBetween(currentDate, allDay) {\n    var firstViewDate = this.getStartViewDate();\n    var startDayTime = this.option(\"startDayHour\") * HOUR_MS;\n    var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n    var fullInterval = currentDate.getTime() - firstViewDate.getTime() - timeZoneOffset;\n\n    var days = this._getDaysOfInterval(fullInterval, startDayTime);\n\n    var weekendsCount = this._getWeekendsCount(days);\n\n    var result = (days - weekendsCount) * DAY_MS;\n\n    if (!allDay) {\n      var hiddenInterval = this.viewDataProvider.hiddenInterval;\n      var visibleDayDuration = this.getVisibleDayDuration();\n      result = fullInterval - days * hiddenInterval - weekendsCount * visibleDayDuration;\n    }\n\n    return result;\n  }\n\n  _getWeekendsCount() {\n    return 0;\n  }\n\n  _getDaysOfInterval(fullInterval, startDayTime) {\n    return Math.floor((fullInterval + startDayTime) / DAY_MS);\n  }\n\n  _updateIndex(index) {\n    return index * this._getRowCount();\n  }\n\n  _getDroppableCell() {\n    return this._getDateTables().find(\".\" + DATE_TABLE_DROPPABLE_CELL_CLASS);\n  }\n\n  _getWorkSpaceWidth() {\n    return this.cache.get(\"workspaceWidth\", () => {\n      if (this._needCreateCrossScrolling()) {\n        return getBoundingRect(this._$dateTable.get(0)).width;\n      }\n\n      var totalWidth = getBoundingRect(this.$element().get(0)).width;\n      var timePanelWidth = this.getTimePanelWidth();\n      var groupTableWidth = this.getGroupTableWidth();\n      return totalWidth - timePanelWidth - groupTableWidth;\n    });\n  }\n\n  _getCellByCoordinates(cellCoordinates, groupIndex, inAllDayRow) {\n    var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow);\n\n    return this._dom_getDateCell(indexes);\n  }\n\n  _dom_getDateCell(position) {\n    return this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).eq(position.rowIndex).find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\")).eq(position.columnIndex);\n  }\n\n  _dom_getAllDayPanelCell(columnIndex) {\n    return this._$allDayPanel.find(\"tr\").eq(0).find(\"td\").eq(columnIndex);\n  }\n\n  _getCells(allDay, direction) {\n    var cellClass = allDay ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\n\n    if (\"vertical\" === direction) {\n      var result = [];\n\n      for (var i = 1;; i++) {\n        var cells = this.$element().find(\"tr .\".concat(cellClass, \":nth-child(\").concat(i, \")\"));\n\n        if (!cells.length) {\n          break;\n        }\n\n        result = result.concat(cells.toArray());\n      }\n\n      return $(result);\n    } else {\n      return this.$element().find(\".\" + cellClass);\n    }\n  }\n\n  _getAllCells(allDay) {\n    if (this._isVerticalGroupedWorkSpace()) {\n      return this._$dateTable.find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\"));\n    }\n\n    var cellClass = allDay && this.supportAllDayRow() ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\n    return this.$element().find(\".\".concat(cellClass));\n  }\n\n  _setHorizontalGroupHeaderCellsHeight() {\n    var height = getBoundingRect(this._$dateTable.get(0)).height;\n    setOuterHeight(this._$groupTable, height);\n  }\n\n  _getGroupHeaderCells() {\n    return this.$element().find(\".\" + GROUP_HEADER_CLASS);\n  }\n\n  _getScrollCoordinates(hours, minutes, date, groupIndex, allDay) {\n    var currentDate = date || new Date(this.option(\"currentDate\"));\n    var startDayHour = this.option(\"startDayHour\");\n    var endDayHour = this.option(\"endDayHour\");\n\n    if (hours < startDayHour) {\n      hours = startDayHour;\n    }\n\n    if (hours >= endDayHour) {\n      hours = endDayHour - 1;\n    }\n\n    currentDate.setHours(hours, minutes, 0, 0);\n    var cell = this.viewDataProvider.findGlobalCellPosition(currentDate, groupIndex, allDay);\n    var {\n      position: position,\n      cellData: cellData\n    } = cell;\n    return this.virtualScrollingDispatcher.calculateCoordinatesByDataAndPosition(cellData, position, currentDate, isDateAndTimeView(this.type), \"vertical\" === this.viewDirection);\n  }\n\n  _isOutsideScrollable(target, event) {\n    var $dateTableScrollableElement = this._dateTableScrollable.$element();\n\n    var scrollableSize = getBoundingRect($dateTableScrollableElement.get(0));\n    var window = getWindow();\n    var isTargetInAllDayPanel = !$(target).closest($dateTableScrollableElement).length;\n    var isOutsideHorizontalScrollable = event.pageX < scrollableSize.left || event.pageX > scrollableSize.left + scrollableSize.width + (window.scrollX || 0);\n    var isOutsideVerticalScrollable = event.pageY < scrollableSize.top || event.pageY > scrollableSize.top + scrollableSize.height + (window.scrollY || 0);\n\n    if (isTargetInAllDayPanel && !isOutsideHorizontalScrollable) {\n      return false;\n    }\n\n    return isOutsideVerticalScrollable || isOutsideHorizontalScrollable;\n  }\n\n  setCellDataCache(cellCoordinates, groupIndex, $cell) {\n    var key = JSON.stringify({\n      rowIndex: cellCoordinates.rowIndex,\n      columnIndex: cellCoordinates.columnIndex,\n      groupIndex: groupIndex\n    });\n    this.cache.set(key, this.getCellData($cell));\n  }\n\n  setCellDataCacheAlias(appointment, geometry) {\n    var key = JSON.stringify({\n      rowIndex: appointment.rowIndex,\n      columnIndex: appointment.columnIndex,\n      groupIndex: appointment.groupIndex\n    });\n    var aliasKey = JSON.stringify({\n      top: geometry.top,\n      left: geometry.left\n    });\n    this.cache.set(aliasKey, this.cache.get(key));\n  }\n\n  supportAllDayRow() {\n    return true;\n  }\n\n  keepOriginalHours() {\n    return false;\n  }\n\n  _filterCellDataFields(cellData) {\n    return extend(true, {}, {\n      startDate: cellData.startDate,\n      endDate: cellData.endDate,\n      groups: cellData.groups,\n      groupIndex: cellData.groupIndex,\n      allDay: cellData.allDay\n    });\n  }\n\n  getCellData($cell) {\n    var cellData = this._getFullCellData($cell) || {};\n    return this._filterCellDataFields(cellData);\n  }\n\n  _getFullCellData($cell) {\n    var currentCell = $cell[0];\n\n    if (currentCell) {\n      return this._getDataByCell($cell);\n    }\n\n    return;\n  }\n\n  _getVirtualRowOffset() {\n    return this.virtualScrollingDispatcher.virtualRowOffset;\n  }\n\n  _getVirtualCellOffset() {\n    return this.virtualScrollingDispatcher.virtualCellOffset;\n  }\n\n  _getDataByCell($cell) {\n    var rowIndex = $cell.parent().index() - this.virtualScrollingDispatcher.topVirtualRowsCount;\n    var columnIndex = $cell.index() - this.virtualScrollingDispatcher.leftVirtualCellsCount;\n    var {\n      viewDataProvider: viewDataProvider\n    } = this;\n\n    var isAllDayCell = this._hasAllDayClass($cell);\n\n    var cellData = viewDataProvider.getCellData(rowIndex, columnIndex, isAllDayCell);\n    return cellData ? cellData : void 0;\n  }\n\n  isGroupedByDate() {\n    return this.option(\"groupByDate\") && this._isHorizontalGroupedWorkSpace() && this._getGroupCount() > 0;\n  }\n\n  getCellIndexByDate(date, inAllDayRow) {\n    var viewDataGenerator = this.viewDataProvider.viewDataGenerator;\n    var timeInterval = inAllDayRow ? 864e5 : viewDataGenerator.getInterval(this.option(\"hoursInterval\"));\n    var startViewDateOffset = getStartViewDateTimeOffset(this.getStartViewDate(), this.option(\"startDayHour\"));\n    var dateTimeStamp = this._getIntervalBetween(date, inAllDayRow) + startViewDateOffset;\n    var index = Math.floor(dateTimeStamp / timeInterval);\n\n    if (inAllDayRow) {\n      index = this._updateIndex(index);\n    }\n\n    if (index < 0) {\n      index = 0;\n    }\n\n    return index;\n  }\n\n  getDroppableCellIndex() {\n    var $droppableCell = this._getDroppableCell();\n\n    var $row = $droppableCell.parent();\n    var rowIndex = $row.index();\n    return rowIndex * $row.find(\"td\").length + $droppableCell.index();\n  }\n\n  getDataByDroppableCell() {\n    var cellData = this.getCellData($(this._getDroppableCell()));\n    var allDay = cellData.allDay;\n    var startDate = cellData.startDate;\n    var endDate = cellData.endDate;\n    return {\n      startDate: startDate,\n      endDate: endDate,\n      allDay: allDay,\n      groups: cellData.groups\n    };\n  }\n\n  getDateRange() {\n    return [this.getStartViewDate(), this.getEndViewDateByEndDayHour()];\n  }\n\n  getCellMinWidth() {\n    return DATE_TABLE_MIN_CELL_WIDTH;\n  }\n\n  getRoundedCellWidth(groupIndex, startIndex, cellCount) {\n    if (groupIndex < 0 || !hasWindow()) {\n      return 0;\n    }\n\n    var $row = this.$element().find(\".\".concat(DATE_TABLE_ROW_CLASS)).eq(0);\n    var width = 0;\n    var $cells = $row.find(\".\" + DATE_TABLE_CELL_CLASS);\n    var totalCellCount = this._getCellCount() * groupIndex;\n    cellCount = cellCount || this._getCellCount();\n\n    if (!isDefined(startIndex)) {\n      startIndex = totalCellCount;\n    }\n\n    for (var i = startIndex; i < totalCellCount + cellCount; i++) {\n      var element = $($cells).eq(i).get(0);\n      var elementWidth = element ? getBoundingRect(element).width : 0;\n      width += elementWidth;\n    }\n\n    return width / (totalCellCount + cellCount - startIndex);\n  }\n\n  getCellWidth() {\n    return getCellWidth(this.getDOMElementsMetaData());\n  }\n\n  getCellHeight() {\n    return getCellHeight(this.getDOMElementsMetaData());\n  }\n\n  getAllDayHeight() {\n    return getAllDayHeight(this.option(\"showAllDayPanel\"), this._isVerticalGroupedWorkSpace(), this.getDOMElementsMetaData());\n  }\n\n  getMaxAllowedPosition(groupIndex) {\n    return getMaxAllowedPosition(groupIndex, this.viewDataProvider, this.option(\"rtlEnabled\"), this.getDOMElementsMetaData());\n  }\n\n  getAllDayOffset() {\n    return this._groupedStrategy.getAllDayOffset();\n  }\n\n  getCellIndexByCoordinates(coordinates, allDay) {\n    var cellCount = this._getTotalCellCount(this._getGroupCount());\n\n    var cellWidth = Math.floor(this._getWorkSpaceWidth() / cellCount);\n    var cellHeight = allDay ? this.getAllDayHeight() : this.getCellHeight();\n    var topIndex = Math.floor(Math.floor(coordinates.top) / Math.floor(cellHeight));\n    var leftIndex = Math.floor((coordinates.left + 5) / cellWidth);\n\n    if (this._isRTL()) {\n      leftIndex = cellCount - leftIndex - 1;\n    }\n\n    return cellCount * topIndex + leftIndex;\n  }\n\n  getStartViewDate() {\n    return this.viewDataProvider.getStartViewDate();\n  }\n\n  getEndViewDate() {\n    return this.viewDataProvider.getLastCellEndDate();\n  }\n\n  getEndViewDateByEndDayHour() {\n    return this.viewDataProvider.getLastViewDateByEndDayHour(this.option(\"endDayHour\"));\n  }\n\n  getCellDuration() {\n    return getCellDuration(this.type, this.option(\"startDayHour\"), this.option(\"endDayHour\"), this.option(\"hoursInterval\"));\n  }\n\n  getIntervalDuration(allDay) {\n    return allDay ? toMs(\"day\") : this.getCellDuration();\n  }\n\n  getVisibleDayDuration() {\n    var startDayHour = this.option(\"startDayHour\");\n    var endDayHour = this.option(\"endDayHour\");\n    var hoursInterval = this.option(\"hoursInterval\");\n    return this.viewDataProvider.getVisibleDayDuration(startDayHour, endDayHour, hoursInterval);\n  }\n\n  getGroupBounds(coordinates) {\n    var cellCount = this._getCellCount();\n\n    var $cells = this._getCells();\n\n    var cellWidth = this.getCellWidth();\n    var groupedDataMap = this.viewDataProvider.groupedDataMap;\n\n    var result = this._groupedStrategy.getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates, groupedDataMap);\n\n    if (this._isRTL()) {\n      var startOffset = result.left;\n      result.left = result.right - 2 * cellWidth;\n      result.right = startOffset + 2 * cellWidth;\n    }\n\n    return result;\n  }\n\n  needRecalculateResizableArea() {\n    return this._isVerticalGroupedWorkSpace() && 0 !== this.getScrollable().scrollTop();\n  }\n\n  getCellDataByCoordinates(coordinates, allDay) {\n    var key = JSON.stringify({\n      top: coordinates.top,\n      left: coordinates.left\n    });\n    return this.cache.get(key, () => {\n      var $cells = this._getCells(allDay);\n\n      var cellIndex = this.getCellIndexByCoordinates(coordinates, allDay);\n      var $cell = $cells.eq(cellIndex);\n      return this.getCellData($cell);\n    });\n  }\n\n  getVisibleBounds() {\n    var result = {};\n    var $scrollable = this.getScrollable().$element();\n    var cellHeight = this.getCellHeight();\n    var scrolledCellCount = this.getScrollableScrollTop() / cellHeight;\n    var totalCellCount = scrolledCellCount + getHeight($scrollable) / cellHeight;\n    result.top = {\n      hours: Math.floor(scrolledCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\n      minutes: scrolledCellCount % 2 ? 30 : 0\n    };\n    result.bottom = {\n      hours: Math.floor(totalCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\n      minutes: Math.floor(totalCellCount) % 2 ? 30 : 0\n    };\n    return result;\n  }\n\n  updateScrollPosition(date, groups) {\n    var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n    var newDate = this.timeZoneCalculator.createDate(date, {\n      path: \"toGrid\"\n    });\n    var inAllDayRow = allDay && this.isAllDayPanelVisible;\n\n    if (this.needUpdateScrollPosition(newDate, groups, inAllDayRow)) {\n      this.scrollTo(newDate, groups, inAllDayRow, false);\n    }\n  }\n\n  needUpdateScrollPosition(date, groups, inAllDayRow) {\n    var cells = this._getCellsInViewport(inAllDayRow);\n\n    var groupIndex = this._isGroupsSpecified(groups) ? this._getGroupIndexByResourceId(groups) : 0;\n    var time = date.getTime();\n    var trimmedTime = dateUtils.trimTime(date).getTime();\n    return cells.reduce((currentResult, cell) => {\n      var {\n        startDate: cellStartDate,\n        endDate: cellEndDate,\n        groupIndex: cellGroupIndex\n      } = this.getCellData(cell);\n      var cellStartTime = cellStartDate.getTime();\n      var cellEndTime = cellEndDate.getTime();\n\n      if ((!inAllDayRow && cellStartTime <= time && time < cellEndTime || inAllDayRow && trimmedTime === cellStartTime) && groupIndex === cellGroupIndex) {\n        return false;\n      }\n\n      return currentResult;\n    }, true);\n  }\n\n  _getCellsInViewport(inAllDayRow) {\n    var $scrollable = this.getScrollable().$element();\n    var cellHeight = this.getCellHeight();\n    var cellWidth = this.getCellWidth();\n\n    var totalColumnCount = this._getTotalCellCount(this._getGroupCount());\n\n    var scrollableScrollTop = this.getScrollableScrollTop();\n    var scrollableScrollLeft = this.getScrollableScrollLeft();\n    var fullScrolledRowCount = scrollableScrollTop / cellHeight - this.virtualScrollingDispatcher.topVirtualRowsCount;\n    var scrolledRowCount = Math.floor(fullScrolledRowCount);\n\n    if (scrollableScrollTop % cellHeight !== 0) {\n      scrolledRowCount += 1;\n    }\n\n    var fullScrolledColumnCount = scrollableScrollLeft / cellWidth;\n    var scrolledColumnCount = Math.floor(fullScrolledColumnCount);\n\n    if (scrollableScrollLeft % cellWidth !== 0) {\n      scrolledColumnCount += 1;\n    }\n\n    var rowCount = Math.floor(fullScrolledRowCount + getHeight($scrollable) / cellHeight);\n    var columnCount = Math.floor(fullScrolledColumnCount + getWidth($scrollable) / cellWidth);\n\n    var $cells = this._getAllCells(inAllDayRow);\n\n    var result = [];\n    $cells.each(function (index) {\n      var $cell = $(this);\n      var columnIndex = index % totalColumnCount;\n      var rowIndex = index / totalColumnCount;\n\n      if (scrolledColumnCount <= columnIndex && columnIndex < columnCount && scrolledRowCount <= rowIndex && rowIndex < rowCount) {\n        result.push($cell);\n      }\n    });\n    return result;\n  }\n\n  scrollToTime(hours, minutes, date) {\n    if (!this._isValidScrollDate(date)) {\n      return;\n    }\n\n    var coordinates = this._getScrollCoordinates(hours, minutes, date);\n\n    var scrollable = this.getScrollable();\n    scrollable.scrollBy({\n      top: coordinates.top - scrollable.scrollTop(),\n      left: 0\n    });\n  }\n\n  scrollTo(date, groups) {\n    var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\n    var throwWarning = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : true;\n\n    if (!this._isValidScrollDate(date, throwWarning)) {\n      return;\n    }\n\n    var groupIndex = this._getGroupCount() && groups ? this._getGroupIndexByResourceId(groups) : 0;\n    var isScrollToAllDay = allDay && this.isAllDayPanelVisible;\n\n    var coordinates = this._getScrollCoordinates(date.getHours(), date.getMinutes(), date, groupIndex, isScrollToAllDay);\n\n    var scrollable = this.getScrollable();\n    var $scrollable = scrollable.$element();\n    var cellWidth = this.getCellWidth();\n    var offset = this.option(\"rtlEnabled\") ? cellWidth : 0;\n    var scrollableHeight = getHeight($scrollable);\n    var scrollableWidth = getWidth($scrollable);\n    var cellHeight = this.getCellHeight();\n    var xShift = (scrollableWidth - cellWidth) / 2;\n    var yShift = (scrollableHeight - cellHeight) / 2;\n    var left = coordinates.left - scrollable.scrollLeft() - xShift - offset;\n    var top = coordinates.top - scrollable.scrollTop() - yShift;\n\n    if (isScrollToAllDay && !this._isVerticalGroupedWorkSpace()) {\n      top = 0;\n    }\n\n    if (this.option(\"templatesRenderAsynchronously\")) {\n      setTimeout(() => {\n        scrollable.scrollBy({\n          left: left,\n          top: top\n        });\n      });\n    } else {\n      scrollable.scrollBy({\n        left: left,\n        top: top\n      });\n    }\n  }\n\n  _isValidScrollDate(date) {\n    var throwWarning = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : true;\n    var min = this.getStartViewDate();\n    var max = this.getEndViewDate();\n\n    if (date < min || date > max) {\n      throwWarning && errors.log(\"W1008\", date);\n      return false;\n    }\n\n    return true;\n  }\n\n  needApplyCollectorOffset() {\n    return false;\n  }\n\n  removeDroppableCellClass($cellElement) {\n    ($cellElement || this._getDroppableCell()).removeClass(DATE_TABLE_DROPPABLE_CELL_CLASS);\n  }\n\n  _getCoordinatesByCell($cell) {\n    var columnIndex = $cell.index() - this.virtualScrollingDispatcher.leftVirtualCellsCount;\n    var rowIndex = $cell.parent().index();\n\n    var isAllDayCell = this._hasAllDayClass($cell);\n\n    var isVerticalGrouping = this._isVerticalGroupedWorkSpace();\n\n    if (!(isAllDayCell && !isVerticalGrouping)) {\n      rowIndex -= this.virtualScrollingDispatcher.topVirtualRowsCount;\n    }\n\n    return {\n      rowIndex: rowIndex,\n      columnIndex: columnIndex\n    };\n  }\n\n  _isShowAllDayPanel() {\n    return this.option(\"showAllDayPanel\");\n  }\n\n  _getTimePanelCells() {\n    return this.$element().find(\".\".concat(TIME_PANEL_CELL_CLASS));\n  }\n\n  _getRDateTableProps() {\n    return {\n      viewData: this.viewDataProvider.viewData,\n      dataCellTemplate: this.option(\"dataCellTemplate\"),\n      addDateTableClass: !this.option(\"crossScrollingEnabled\") || this.isVirtualScrolling(),\n      groupOrientation: this.option(\"groupOrientation\"),\n      addVerticalSizesClassToRows: false\n    };\n  }\n\n  _updateSelectedCellDataOption(selectedCellData) {\n    var correctedSelectedCellData = selectedCellData.map(_ref2 => {\n      var {\n        startDate: startDate,\n        endDate: endDate,\n        allDay: allDay,\n        groupIndex: groupIndex,\n        groups: groups\n      } = _ref2;\n      return {\n        startDate: startDate,\n        endDate: endDate,\n        allDay: allDay,\n        groupIndex: groupIndex,\n        groups: groups\n      };\n    });\n    this.option(\"selectedCellData\", correctedSelectedCellData);\n\n    this._selectionChangedAction({\n      selectedCellData: correctedSelectedCellData\n    });\n  }\n\n  _getCellByData(cellData) {\n    var {\n      startDate: startDate,\n      groupIndex: groupIndex,\n      allDay: allDay,\n      index: index\n    } = cellData;\n    var position = this.viewDataProvider.findCellPositionInMap({\n      startDate: startDate,\n      groupIndex: groupIndex,\n      isAllDay: allDay,\n      index: index\n    });\n\n    if (!position) {\n      return;\n    }\n\n    return allDay && !this._isVerticalGroupedWorkSpace() ? this._dom_getAllDayPanelCell(position.columnIndex) : this._dom_getDateCell(position);\n  }\n\n  getDOMElementsMetaData() {\n    return this.cache.get(\"cellElementsMeta\", () => ({\n      dateTableCellsMeta: this._getDateTableDOMElementsInfo(),\n      allDayPanelCellsMeta: this._getAllDayPanelDOMElementsInfo()\n    }));\n  }\n\n  _getDateTableDOMElementsInfo() {\n    var dateTableCells = this._getAllCells(false);\n\n    if (!dateTableCells.length || !hasWindow()) {\n      return [[{}]];\n    }\n\n    var dateTable = this._getDateTable();\n\n    var dateTableRect = getBoundingRect(dateTable.get(0));\n    var columnsCount = this.viewDataProvider.getColumnsCount();\n    var result = [];\n    dateTableCells.each((index, cell) => {\n      var rowIndex = Math.floor(index / columnsCount);\n\n      if (result.length === rowIndex) {\n        result.push([]);\n      }\n\n      this._addCellMetaData(result[rowIndex], cell, dateTableRect);\n    });\n    return result;\n  }\n\n  _getAllDayPanelDOMElementsInfo() {\n    var result = [];\n\n    if (this.isAllDayPanelVisible && !this._isVerticalGroupedWorkSpace() && hasWindow()) {\n      var allDayCells = this._getAllCells(true);\n\n      if (!allDayCells.length) {\n        return [{}];\n      }\n\n      var allDayAppointmentContainer = this._$allDayPanel;\n      var allDayPanelRect = getBoundingRect(allDayAppointmentContainer.get(0));\n      allDayCells.each((_, cell) => {\n        this._addCellMetaData(result, cell, allDayPanelRect);\n      });\n    }\n\n    return result;\n  }\n\n  _addCellMetaData(cellMetaDataArray, cell, parentRect) {\n    var cellRect = getBoundingRect(cell);\n    cellMetaDataArray.push({\n      left: cellRect.left - parentRect.left,\n      top: cellRect.top - parentRect.top,\n      width: cellRect.width,\n      height: cellRect.height\n    });\n  }\n\n  _oldRender_getAllDayCellData(groupIndex) {\n    return (cell, rowIndex, columnIndex) => {\n      var validColumnIndex = columnIndex % this._getCellCount();\n\n      var options = this._getDateGenerationOptions(true);\n\n      var startDate = this.viewDataProvider.viewDataGenerator.getDateByCellIndices(options, rowIndex, validColumnIndex, this._getCellCountInDay());\n      startDate = dateUtils.trimTime(startDate);\n      var validGroupIndex = groupIndex || 0;\n\n      if (this.isGroupedByDate()) {\n        validGroupIndex = Math.floor(columnIndex % this._getGroupCount());\n      } else if (this._isHorizontalGroupedWorkSpace()) {\n        validGroupIndex = Math.floor(columnIndex / this._getCellCount());\n      }\n\n      var data = {\n        startDate: startDate,\n        endDate: startDate,\n        allDay: true,\n        groupIndex: validGroupIndex\n      };\n      var groupsArray = getCellGroups(validGroupIndex, this.option(\"groups\"));\n\n      if (groupsArray.length) {\n        data.groups = getGroupsObjectFromGroupsArray(groupsArray);\n      }\n\n      return {\n        key: CELL_DATA,\n        value: data\n      };\n    };\n  }\n\n  renderRWorkSpace() {\n    this.renderRHeaderPanel();\n    this.renderRTimeTable();\n    this.renderRDateTable();\n    this.renderRAllDayPanel();\n  }\n\n  renderRDateTable() {\n    utils.renovation.renderComponent(this, this._$dateTable, dxrDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps());\n  }\n\n  renderRGroupPanel() {\n    var options = {\n      groups: this.option(\"groups\"),\n      groupOrientation: this.option(\"groupOrientation\"),\n      groupByDate: this.isGroupedByDate(),\n      resourceCellTemplate: this.option(\"resourceCellTemplate\"),\n      className: this.verticalGroupTableClass,\n      groupPanelData: this.viewDataProvider.getGroupPanelData(this.generateRenderOptions())\n    };\n\n    if (this.option(\"groups\").length) {\n      this._attachGroupCountClass();\n\n      utils.renovation.renderComponent(this, this._getGroupHeaderContainer(), dxrGroupPanel, \"renovatedGroupPanel\", options);\n    } else {\n      this._detachGroupCountClass();\n    }\n  }\n\n  renderRAllDayPanel() {\n    var visible = this.isAllDayPanelVisible && !this.isGroupedAllDayPanel();\n\n    if (visible) {\n      var _this$virtualScrollin;\n\n      this._toggleAllDayVisibility(false);\n\n      var options = _extends({\n        viewData: this.viewDataProvider.viewData,\n        dataCellTemplate: this.option(\"dataCellTemplate\"),\n        startCellIndex: 0\n      }, (null === (_this$virtualScrollin = this.virtualScrollingDispatcher.horizontalVirtualScrolling) || void 0 === _this$virtualScrollin ? void 0 : _this$virtualScrollin.getRenderState()) || {});\n\n      utils.renovation.renderComponent(this, this._$allDayPanel, dxrAllDayPanelLayout, \"renovatedAllDayPanel\", options);\n      utils.renovation.renderComponent(this, this._$allDayTitle, dxrAllDayPanelTitle, \"renovatedAllDayPanelTitle\", {});\n      this._$allDayTable = this.renovatedAllDayPanel.$element().find(\".\".concat(ALL_DAY_TABLE_CLASS));\n\n      this._$allDayPanel.prepend(this._$allDayContainer);\n    }\n\n    this._toggleAllDayVisibility(true);\n  }\n\n  renderRTimeTable() {\n    utils.renovation.renderComponent(this, this._$timePanel, dxrTimePanelTableLayout, \"renovatedTimePanel\", {\n      timePanelData: this.viewDataProvider.timePanelData,\n      timeCellTemplate: this.option(\"timeCellTemplate\"),\n      groupOrientation: this.option(\"groupOrientation\")\n    });\n  }\n\n  renderRHeaderPanel() {\n    var isRenderDateHeader = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\n\n    if (this.option(\"groups\").length) {\n      this._attachGroupCountClass();\n    } else {\n      this._detachGroupCountClass();\n    }\n\n    utils.renovation.renderComponent(this, this._$thead, this.renovatedHeaderPanelComponent, \"renovatedHeaderPanel\", {\n      dateHeaderData: this.viewDataProvider.dateHeaderData,\n      groupPanelData: this.viewDataProvider.getGroupPanelData(this.generateRenderOptions()),\n      dateCellTemplate: this.option(\"dateCellTemplate\"),\n      timeCellTemplate: this.option(\"timeCellTemplate\"),\n      groups: this.option(\"groups\"),\n      groupByDate: this.isGroupedByDate(),\n      groupOrientation: this.option(\"groupOrientation\"),\n      resourceCellTemplate: this.option(\"resourceCellTemplate\"),\n      isRenderDateHeader: isRenderDateHeader\n    });\n  }\n\n  initDragBehavior(scheduler) {\n    if (!this.dragBehavior && scheduler) {\n      this.dragBehavior = new AppointmentDragBehavior(scheduler);\n\n      this._createDragBehavior(this.getWorkArea());\n\n      this._createDragBehavior(this.getAllDayContainer());\n\n      this._createDragBehavior(this._$allDayPanel);\n    }\n  }\n\n  _createDragBehavior($element) {\n    var options = {\n      getItemData: (itemElement, appointments) => appointments._getItemData(itemElement),\n      getItemSettings: $itemElement => $itemElement.data(APPOINTMENT_SETTINGS_KEY)\n    };\n\n    this._createDragBehaviorBase($element, options);\n  }\n\n  _createDragBehaviorBase($element, options) {\n    var container = this.$element().find(\".\".concat(FIXED_CONTAINER_CLASS));\n    var element = this.$element();\n    var isDefaultDraggingMode = \"default\" === this.option(\"draggingMode\");\n    this.dragBehavior.addTo($element, createDragBehaviorConfig(container, isDefaultDraggingMode, this.dragBehavior, () => this._attachDragEvents(element), () => this._detachDragEvents(element), () => this._getDroppableCell(), () => this._getDateTables(), () => this.removeDroppableCellClass(), () => this.getCellWidth(), options));\n  }\n\n  _isRenderHeaderPanelEmptyCell() {\n    return this._isVerticalGroupedWorkSpace();\n  }\n\n  _dispose() {\n    super._dispose();\n\n    this.virtualScrollingDispatcher.dispose();\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      currentDate: new Date(),\n      intervalCount: 1,\n      startDate: null,\n      firstDayOfWeek: void 0,\n      startDayHour: 0,\n      endDayHour: 24,\n      hoursInterval: .5,\n      activeStateEnabled: true,\n      hoverStateEnabled: true,\n      groups: [],\n      showAllDayPanel: true,\n      allDayExpanded: false,\n      onCellClick: null,\n      crossScrollingEnabled: false,\n      dataCellTemplate: null,\n      timeCellTemplate: null,\n      resourceCellTemplate: null,\n      dateCellTemplate: null,\n      allowMultipleCellSelection: true,\n      indicatorTime: new Date(),\n      indicatorUpdateInterval: 5 * toMs(\"minute\"),\n      shadeUntilCurrentTime: true,\n      groupOrientation: \"horizontal\",\n      selectedCellData: [],\n      groupByDate: false,\n      scrolling: {\n        mode: \"standard\"\n      },\n      renovateRender: true,\n      height: void 0,\n      draggingMode: \"outlook\",\n      onScrollEnd: () => {},\n      getHeaderHeight: void 0,\n      onVirtualScrollingUpdated: void 0,\n      onSelectedCellsClick: () => {},\n      timeZoneCalculator: void 0,\n      schedulerHeight: void 0,\n      schedulerWidth: void 0\n    });\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"startDayHour\":\n        validateDayHours(args.value, this.option(\"endDayHour\"));\n\n        this._cleanWorkSpace();\n\n        break;\n\n      case \"endDayHour\":\n        validateDayHours(this.option(\"startDayHour\"), args.value);\n\n        this._cleanWorkSpace();\n\n        break;\n\n      case \"dateCellTemplate\":\n      case \"resourceCellTemplate\":\n      case \"dataCellTemplate\":\n      case \"timeCellTemplate\":\n      case \"hoursInterval\":\n      case \"firstDayOfWeek\":\n      case \"currentDate\":\n      case \"startDate\":\n        this._cleanWorkSpace();\n\n        break;\n\n      case \"groups\":\n        this._cleanView();\n\n        this._removeAllDayElements();\n\n        this._initGrouping();\n\n        this.repaint();\n        break;\n\n      case \"groupOrientation\":\n        this._initGroupedStrategy();\n\n        this._createAllDayPanelElements();\n\n        this._removeAllDayElements();\n\n        this._cleanWorkSpace();\n\n        this._toggleGroupByDateClass();\n\n        break;\n\n      case \"showAllDayPanel\":\n        if (this._isVerticalGroupedWorkSpace()) {\n          this._cleanView();\n\n          this._removeAllDayElements();\n\n          this._initGrouping();\n\n          this.repaint();\n        } else if (!this.isRenovatedRender()) {\n          this._toggleAllDayVisibility(true);\n        } else {\n          this.renderWorkSpace();\n        }\n\n        break;\n\n      case \"allDayExpanded\":\n        this._changeAllDayVisibility();\n\n        this._attachTablesEvents();\n\n        this._updateScrollable();\n\n        break;\n\n      case \"onSelectionChanged\":\n        this._createSelectionChangedAction();\n\n        break;\n\n      case \"onCellClick\":\n        this._createCellClickAction();\n\n        break;\n\n      case \"onCellContextMenu\":\n        this._attachContextMenuEvent();\n\n        break;\n\n      case \"intervalCount\":\n        this._cleanWorkSpace();\n\n        this._toggleWorkSpaceCountClass();\n\n        break;\n\n      case \"groupByDate\":\n        this._cleanWorkSpace();\n\n        this._toggleGroupByDateClass();\n\n        break;\n\n      case \"crossScrollingEnabled\":\n        this._toggleHorizontalScrollClass();\n\n        this._dateTableScrollable.option(this._dateTableScrollableConfig());\n\n        break;\n\n      case \"width\":\n        super._optionChanged(args);\n\n        this._dimensionChanged();\n\n        break;\n\n      case \"timeZoneCalculator\":\n      case \"allowMultipleCellSelection\":\n      case \"selectedCellData\":\n        break;\n\n      case \"renovateRender\":\n      case \"scrolling\":\n        this.repaint();\n        break;\n\n      case \"schedulerHeight\":\n      case \"schedulerWidth\":\n        this.virtualScrollingDispatcher.updateDimensions(true);\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  _getVirtualScrollingDispatcherOptions() {\n    return {\n      getCellHeight: this.getCellHeight.bind(this),\n      getCellWidth: this.getCellWidth.bind(this),\n      getCellMinWidth: this.getCellMinWidth.bind(this),\n      isRTL: this._isRTL.bind(this),\n      getSchedulerHeight: () => this.option(\"schedulerHeight\"),\n      getSchedulerWidth: () => this.option(\"schedulerWidth\"),\n      getViewHeight: () => this.$element().height ? this.$element().height() : getHeight(this.$element()),\n      getViewWidth: () => this.$element().width ? this.$element().width() : getWidth(this.$element()),\n      getScrolling: () => this.option(\"scrolling\"),\n      getScrollableOuterWidth: this.getScrollableOuterWidth.bind(this),\n      getScrollable: this.getScrollable.bind(this),\n      createAction: this._createAction.bind(this),\n      updateRender: this.updateRender.bind(this),\n      updateGrid: this.updateGrid.bind(this),\n      getGroupCount: this._getGroupCount.bind(this),\n      isVerticalGrouping: this._isVerticalGroupedWorkSpace.bind(this),\n      getTotalRowCount: this._getTotalRowCount.bind(this),\n      getTotalCellCount: this._getTotalCellCount.bind(this)\n    };\n  }\n\n  _cleanWorkSpace() {\n    this._cleanView();\n\n    this._toggleGroupedClass();\n\n    this._toggleWorkSpaceWithOddCells();\n\n    this.virtualScrollingDispatcher.updateDimensions(true);\n\n    this._renderView();\n\n    this.option(\"crossScrollingEnabled\") && this._setTableSizes();\n    this.cache.clear();\n  }\n\n  _init() {\n    this._headerSemaphore = new Semaphore();\n    this._sideBarSemaphore = new Semaphore();\n    this._dataTableSemaphore = new Semaphore();\n    this._viewDataProvider = null;\n    this._cellsSelectionState = null;\n    this._activeStateUnit = CELL_SELECTOR;\n\n    super._init();\n\n    this._initGrouping();\n\n    this._toggleHorizontalScrollClass();\n\n    this._toggleWorkSpaceCountClass();\n\n    this._toggleGroupByDateClass();\n\n    this._toggleWorkSpaceWithOddCells();\n\n    this.$element().addClass(COMPONENT_CLASS).addClass(this._getElementClass());\n  }\n\n  _initPositionHelper() {\n    this.positionHelper = new PositionHelper({\n      key: this.option(\"key\"),\n      viewDataProvider: this.viewDataProvider,\n      viewStartDayHour: this.option(\"startDayHour\"),\n      viewEndDayHour: this.option(\"endDayHour\"),\n      cellDuration: this.getCellDuration(),\n      groupedStrategy: this._groupedStrategy,\n      isGroupedByDate: this.isGroupedByDate(),\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      startViewDate: this.getStartViewDate(),\n      isVerticalGrouping: this._isVerticalGroupedWorkSpace(),\n      groupCount: this._getGroupCount(),\n      isVirtualScrolling: this.isVirtualScrolling(),\n      getDOMMetaDataCallback: this.getDOMElementsMetaData.bind(this)\n    });\n  }\n\n  _initGrouping() {\n    this._initGroupedStrategy();\n\n    this._toggleGroupingDirectionClass();\n\n    this._toggleGroupByDateClass();\n  }\n\n  isVerticalOrientation() {\n    var orientation = this.option(\"groups\").length ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\n    return \"vertical\" === orientation;\n  }\n\n  _initGroupedStrategy() {\n    var Strategy = this.isVerticalOrientation() ? VerticalGroupedStrategy : HorizontalGroupedStrategy;\n    this._groupedStrategy = new Strategy(this);\n  }\n\n  _getDefaultGroupStrategy() {\n    return \"horizontal\";\n  }\n\n  _toggleHorizontalScrollClass() {\n    this.$element().toggleClass(WORKSPACE_WITH_BOTH_SCROLLS_CLASS, this.option(\"crossScrollingEnabled\"));\n  }\n\n  _toggleGroupByDateClass() {\n    this.$element().toggleClass(WORKSPACE_WITH_GROUP_BY_DATE_CLASS, this.isGroupedByDate());\n  }\n\n  _toggleWorkSpaceCountClass() {\n    this.$element().toggleClass(WORKSPACE_WITH_COUNT_CLASS, this._isWorkSpaceWithCount());\n  }\n\n  _toggleWorkSpaceWithOddCells() {\n    this.$element().toggleClass(WORKSPACE_WITH_ODD_CELLS_CLASS, this._isWorkspaceWithOddCells());\n  }\n\n  _toggleGroupingDirectionClass() {\n    this.$element().toggleClass(VERTICAL_GROUPED_WORKSPACE_CLASS, this._isVerticalGroupedWorkSpace());\n  }\n\n  _getDateTableCellClass(rowIndex, columnIndex) {\n    var cellClass = DATE_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS + \" \" + VERTICAL_SIZES_CLASS;\n    return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, columnIndex + 1, rowIndex, columnIndex);\n  }\n\n  _getGroupHeaderClass(i) {\n    var cellClass = GROUP_HEADER_CLASS;\n    return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1);\n  }\n\n  _initWorkSpaceUnits() {\n    this._$headerPanelContainer = $(\"<div>\").addClass(\"dx-scheduler-header-panel-container\");\n    this._$headerTablesContainer = $(\"<div>\").addClass(\"dx-scheduler-header-tables-container\");\n    this._$headerPanel = $(\"<table>\");\n    this._$thead = $(\"<thead>\").appendTo(this._$headerPanel);\n    this._$headerPanelEmptyCell = $(\"<div>\").addClass(\"dx-scheduler-header-panel-empty-cell\");\n    this._$fixedContainer = $(\"<div>\").addClass(FIXED_CONTAINER_CLASS);\n    this._$allDayContainer = $(\"<div>\").addClass(ALL_DAY_CONTAINER_CLASS);\n    this._$dateTableScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-date-table-scrollable-content\");\n    this._$sidebarScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-side-bar-scrollable-content\");\n\n    this._initAllDayPanelElements();\n\n    if (this.isRenovatedRender()) {\n      this.createRAllDayPanelElements();\n    } else {\n      this._createAllDayPanelElements();\n    }\n\n    this._$timePanel = $(\"<table>\").addClass(TIME_PANEL_CLASS);\n    this._$dateTable = $(\"<table>\");\n    this._$dateTableContainer = $(\"<div>\").addClass(\"dx-scheduler-date-table-container\");\n    this._$groupTable = $(\"<div>\").addClass(WORKSPACE_VERTICAL_GROUP_TABLE_CLASS);\n  }\n\n  _initAllDayPanelElements() {\n    this._allDayTitles = [];\n    this._allDayTables = [];\n    this._allDayPanels = [];\n  }\n\n  _initDateTableScrollable() {\n    var $dateTableScrollable = $(\"<div>\").addClass(SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS);\n    this._dateTableScrollable = this._createComponent($dateTableScrollable, Scrollable, this._dateTableScrollableConfig());\n  }\n\n  _createWorkSpaceElements() {\n    if (this.option(\"crossScrollingEnabled\")) {\n      this._createWorkSpaceScrollableElements();\n    } else {\n      this._createWorkSpaceStaticElements();\n    }\n  }\n\n  _createWorkSpaceStaticElements() {\n    this._$dateTableContainer.append(this._$dateTable);\n\n    if (this._isVerticalGroupedWorkSpace()) {\n      this._$dateTableContainer.append(this._$allDayContainer);\n\n      this._$dateTableScrollableContent.append(this._$groupTable, this._$timePanel, this._$dateTableContainer);\n\n      this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\n\n      this._$headerTablesContainer.append(this._$headerPanel);\n    } else {\n      this._$dateTableScrollableContent.append(this._$timePanel, this._$dateTableContainer);\n\n      this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\n\n      this._$headerTablesContainer.append(this._$allDayContainer, this._$headerPanel, this._$allDayPanel);\n    }\n\n    this._appendHeaderPanelEmptyCellIfNecessary();\n\n    this._$headerPanelContainer.append(this._$headerTablesContainer);\n\n    this.$element().append(this._$fixedContainer, this._$headerPanelContainer, this._dateTableScrollable.$element());\n  }\n\n  _createWorkSpaceScrollableElements() {\n    this.$element().append(this._$fixedContainer);\n    this._$flexContainer = $(\"<div>\").addClass(\"dx-scheduler-work-space-flex-container\");\n\n    this._createHeaderScrollable();\n\n    this._headerScrollable.$content().append(this._$headerPanel);\n\n    this._appendHeaderPanelEmptyCellIfNecessary();\n\n    this._$headerPanelContainer.append(this._$headerTablesContainer);\n\n    this.$element().append(this._$headerPanelContainer);\n    this.$element().append(this._$flexContainer);\n\n    this._createSidebarScrollable();\n\n    this._$flexContainer.append(this._dateTableScrollable.$element());\n\n    this._$dateTableContainer.append(this._$dateTable);\n\n    this._$dateTableScrollableContent.append(this._$dateTableContainer);\n\n    this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\n\n    if (this._isVerticalGroupedWorkSpace()) {\n      this._$dateTableContainer.append(this._$allDayContainer);\n\n      this._$sidebarScrollableContent.append(this._$groupTable, this._$timePanel);\n    } else {\n      this._headerScrollable.$content().append(this._$allDayContainer, this._$allDayPanel);\n\n      this._$sidebarScrollableContent.append(this._$timePanel);\n    }\n\n    this._sidebarScrollable.$content().append(this._$sidebarScrollableContent);\n  }\n\n  _appendHeaderPanelEmptyCellIfNecessary() {\n    this._isRenderHeaderPanelEmptyCell() && this._$headerPanelContainer.append(this._$headerPanelEmptyCell);\n  }\n\n  _createHeaderScrollable() {\n    var $headerScrollable = $(\"<div>\").addClass(SCHEDULER_HEADER_SCROLLABLE_CLASS).appendTo(this._$headerTablesContainer);\n    this._headerScrollable = this._createComponent($headerScrollable, Scrollable, this._headerScrollableConfig());\n  }\n\n  _createSidebarScrollable() {\n    var $timePanelScrollable = $(\"<div>\").addClass(SCHEDULER_SIDEBAR_SCROLLABLE_CLASS).appendTo(this._$flexContainer);\n    this._sidebarScrollable = this._createComponent($timePanelScrollable, Scrollable, {\n      useKeyboard: false,\n      showScrollbar: \"never\",\n      direction: \"vertical\",\n      useNative: false,\n      updateManually: true,\n      bounceEnabled: false,\n      onScroll: e => {\n        this._sideBarSemaphore.take();\n\n        this._dataTableSemaphore.isFree() && this._dateTableScrollable.scrollTo({\n          top: e.scrollOffset.top\n        });\n\n        this._sideBarSemaphore.release();\n      }\n    });\n  }\n\n  _attachTableClasses() {\n    this._addTableClass(this._$dateTable, DATE_TABLE_CLASS);\n\n    if (this._isVerticalGroupedWorkSpace()) {\n      var groupCount = this._getGroupCount();\n\n      for (var i = 0; i < groupCount; i++) {\n        this._addTableClass(this._allDayTables[i], ALL_DAY_TABLE_CLASS);\n      }\n    } else {\n      this._addTableClass(this._$allDayTable, ALL_DAY_TABLE_CLASS);\n    }\n  }\n\n  _attachHeaderTableClasses() {\n    this._addTableClass(this._$headerPanel, HEADER_PANEL_CLASS);\n  }\n\n  _addTableClass($el, className) {\n    $el && !$el.hasClass(className) && $el.addClass(className);\n  }\n\n  _initMarkup() {\n    this.cache.clear();\n\n    this._initWorkSpaceUnits();\n\n    this._initVirtualScrolling();\n\n    this._initDateTableScrollable();\n\n    this._createWorkSpaceElements();\n\n    super._initMarkup();\n\n    if (!this.option(\"crossScrollingEnabled\")) {\n      this._attachTableClasses();\n\n      this._attachHeaderTableClasses();\n    }\n\n    this._toggleGroupedClass();\n\n    this._renderView();\n\n    this._attachEvents();\n  }\n\n  _render() {\n    super._render();\n\n    this._renderDateTimeIndication();\n\n    this._setIndicationUpdateInterval();\n  }\n\n  _toggleGroupedClass() {\n    this.$element().toggleClass(GROUPED_WORKSPACE_CLASS, this._getGroupCount() > 0);\n  }\n\n  _renderView() {\n    if (this.isRenovatedRender()) {\n      if (this._isVerticalGroupedWorkSpace()) {\n        this.renderRGroupPanel();\n      }\n    } else {\n      this._applyCellTemplates(this._renderGroupHeader());\n    }\n\n    this.renderWorkSpace();\n\n    this._updateGroupTableHeight();\n\n    this.updateHeaderEmptyCellWidth();\n    this._shader = new VerticalShader(this);\n  }\n\n  updateCellsSelection() {\n    var renderOptions = this.generateRenderOptions();\n    this.viewDataProvider.updateViewData(renderOptions);\n    this.renderRWorkSpace();\n  }\n\n  _renderDateTimeIndication() {\n    return noop();\n  }\n\n  _setIndicationUpdateInterval() {\n    return noop();\n  }\n\n  _refreshDateTimeIndication() {\n    return noop();\n  }\n\n  _detachGroupCountClass() {\n    [...VERTICAL_GROUP_COUNT_CLASSES].forEach(className => {\n      this.$element().removeClass(className);\n    });\n  }\n\n  _attachGroupCountClass() {\n    var className = this._groupedStrategy.getGroupCountClass(this.option(\"groups\"));\n\n    this.$element().addClass(className);\n  }\n\n  _getDateHeaderTemplate() {\n    return this.option(\"dateCellTemplate\");\n  }\n\n  _toggleAllDayVisibility(isUpdateScrollable) {\n    var showAllDayPanel = this._isShowAllDayPanel();\n\n    this.$element().toggleClass(WORKSPACE_WITH_ALL_DAY_CLASS, showAllDayPanel);\n\n    this._changeAllDayVisibility();\n\n    isUpdateScrollable && this._updateScrollable();\n  }\n\n  _changeAllDayVisibility() {\n    this.cache.clear();\n    this.$element().toggleClass(WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS, !this.option(\"allDayExpanded\") && this._isShowAllDayPanel());\n  }\n\n  _getDateTables() {\n    return this._$dateTable.add(this._$allDayTable);\n  }\n\n  _getDateTable() {\n    return this._$dateTable;\n  }\n\n  _removeAllDayElements() {\n    this._$allDayTable && this._$allDayTable.remove();\n    this._$allDayTitle && this._$allDayTitle.remove();\n  }\n\n  _cleanView() {\n    var _this$_shader;\n\n    this.cache.clear();\n\n    this._cleanTableWidths();\n\n    this.cellsSelectionState.clearSelectedAndFocusedCells();\n\n    if (!this.isRenovatedRender()) {\n      var _this$_$allDayTable, _this$_$sidebarTable;\n\n      this._$thead.empty();\n\n      this._$dateTable.empty();\n\n      this._$timePanel.empty();\n\n      this._$groupTable.empty();\n\n      null === (_this$_$allDayTable = this._$allDayTable) || void 0 === _this$_$allDayTable ? void 0 : _this$_$allDayTable.empty();\n      null === (_this$_$sidebarTable = this._$sidebarTable) || void 0 === _this$_$sidebarTable ? void 0 : _this$_$sidebarTable.empty();\n    }\n\n    null === (_this$_shader = this._shader) || void 0 === _this$_shader ? void 0 : _this$_shader.clean();\n    delete this._interval;\n  }\n\n  _clean() {\n    eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\n\n    this._disposeRenovatedComponents();\n\n    super._clean();\n  }\n\n  _cleanTableWidths() {\n    this._$headerPanel.css(\"width\", \"\");\n\n    this._$dateTable.css(\"width\", \"\");\n\n    this._$allDayTable && this._$allDayTable.css(\"width\", \"\");\n  }\n\n  _disposeRenovatedComponents() {\n    var _this$renovatedAllDay, _this$renovatedDateTa, _this$renovatedTimePa, _this$renovatedGroupP, _this$renovatedHeader;\n\n    null === (_this$renovatedAllDay = this.renovatedAllDayPanel) || void 0 === _this$renovatedAllDay ? void 0 : _this$renovatedAllDay.dispose();\n    this.renovatedAllDayPanel = void 0;\n    null === (_this$renovatedDateTa = this.renovatedDateTable) || void 0 === _this$renovatedDateTa ? void 0 : _this$renovatedDateTa.dispose();\n    this.renovatedDateTable = void 0;\n    null === (_this$renovatedTimePa = this.renovatedTimePanel) || void 0 === _this$renovatedTimePa ? void 0 : _this$renovatedTimePa.dispose();\n    this.renovatedTimePanel = void 0;\n    null === (_this$renovatedGroupP = this.renovatedGroupPanel) || void 0 === _this$renovatedGroupP ? void 0 : _this$renovatedGroupP.dispose();\n    this.renovatedGroupPanel = void 0;\n    null === (_this$renovatedHeader = this.renovatedHeaderPanel) || void 0 === _this$renovatedHeader ? void 0 : _this$renovatedHeader.dispose();\n    this.renovatedHeaderPanel = void 0;\n  }\n\n  getGroupedStrategy() {\n    return this._groupedStrategy;\n  }\n\n  getFixedContainer() {\n    return this._$fixedContainer;\n  }\n\n  getAllDayContainer() {\n    return this._$allDayContainer;\n  }\n\n  updateRender() {\n    this.renderer.updateRender();\n  }\n\n  updateGrid() {\n    this.renderer._renderGrid();\n  }\n\n  updateAppointments() {\n    var _this$dragBehavior;\n\n    this.option(\"onVirtualScrollingUpdated\")();\n    null === (_this$dragBehavior = this.dragBehavior) || void 0 === _this$dragBehavior ? void 0 : _this$dragBehavior.updateDragSource();\n  }\n\n  _createAllDayPanelElements() {\n    var groupCount = this._getGroupCount();\n\n    if (this._isVerticalGroupedWorkSpace() && 0 !== groupCount) {\n      for (var i = 0; i < groupCount; i++) {\n        var $allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\"));\n\n        this._allDayTitles.push($allDayTitle);\n\n        this._$allDayTable = $(\"<table>\");\n\n        this._allDayTables.push(this._$allDayTable);\n\n        this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable);\n\n        this._allDayPanels.push(this._$allDayPanel);\n      }\n    } else {\n      this._$allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\")).appendTo(this.$element());\n      this._$allDayTable = $(\"<table>\");\n      this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable);\n    }\n  }\n\n  renderWorkSpace() {\n    var isGenerateNewViewData = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\n    this.cache.clear();\n    this.viewDataProvider.update(this.generateRenderOptions(), isGenerateNewViewData);\n\n    if (this.isRenovatedRender()) {\n      this.renderRWorkSpace();\n      this.virtualScrollingDispatcher.updateDimensions();\n    } else {\n      this._renderDateHeader();\n\n      this._renderTimePanel();\n\n      this._renderGroupAllDayPanel();\n\n      this._renderDateTable();\n\n      this._renderAllDayPanel();\n    }\n\n    this._initPositionHelper();\n  }\n\n  _renderGroupHeader() {\n    var $container = this._getGroupHeaderContainer();\n\n    var groupCount = this._getGroupCount();\n\n    var cellTemplates = [];\n\n    if (groupCount) {\n      var groupRows = this._makeGroupRows(this.option(\"groups\"), this.option(\"groupByDate\"));\n\n      this._attachGroupCountClass();\n\n      $container.append(groupRows.elements);\n      cellTemplates = groupRows.cellTemplates;\n    } else {\n      this._detachGroupCountClass();\n    }\n\n    return cellTemplates;\n  }\n\n  _applyCellTemplates(templates) {\n    null === templates || void 0 === templates ? void 0 : templates.forEach(function (template) {\n      template();\n    });\n  }\n\n  _makeGroupRows(groups, groupByDate) {\n    var tableCreatorStrategy = this._isVerticalGroupedWorkSpace() ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\n    return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\n      groupHeaderRowClass: GROUP_ROW_CLASS,\n      groupRowClass: GROUP_ROW_CLASS,\n      groupHeaderClass: this._getGroupHeaderClass.bind(this),\n      groupHeaderContentClass: GROUP_HEADER_CONTENT_CLASS\n    }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getGroupCount(), groupByDate);\n  }\n\n  _renderDateHeader() {\n    var container = this._getDateHeaderContainer();\n\n    var $headerRow = $(\"<tr>\").addClass(HEADER_ROW_CLASS);\n\n    var count = this._getCellCount();\n\n    var cellTemplate = this._getDateHeaderTemplate();\n\n    var repeatCount = this._getCalculateHeaderCellRepeatCount();\n\n    var templateCallbacks = [];\n    var groupByDate = this.isGroupedByDate();\n\n    if (!groupByDate) {\n      for (var rowIndex = 0; rowIndex < repeatCount; rowIndex++) {\n        for (var columnIndex = 0; columnIndex < count; columnIndex++) {\n          var templateIndex = rowIndex * count + columnIndex;\n\n          this._renderDateHeaderTemplate($headerRow, columnIndex, templateIndex, cellTemplate, templateCallbacks);\n        }\n      }\n\n      container.append($headerRow);\n    } else {\n      var colSpan = groupByDate ? this._getGroupCount() : 1;\n\n      for (var _columnIndex = 0; _columnIndex < count; _columnIndex++) {\n        var _templateIndex = _columnIndex * repeatCount;\n\n        var cellElement = this._renderDateHeaderTemplate($headerRow, _columnIndex, _templateIndex, cellTemplate, templateCallbacks);\n\n        cellElement.attr(\"colSpan\", colSpan);\n      }\n\n      container.prepend($headerRow);\n    }\n\n    this._applyCellTemplates(templateCallbacks);\n\n    return $headerRow;\n  }\n\n  _renderDateHeaderTemplate(container, panelCellIndex, templateIndex, cellTemplate, templateCallbacks) {\n    var validTemplateIndex = this.isGroupedByDate() ? Math.floor(templateIndex / this._getGroupCount()) : templateIndex;\n    var completeDateHeaderMap = this.viewDataProvider.completeDateHeaderMap;\n    var {\n      text: text,\n      startDate: date\n    } = completeDateHeaderMap[completeDateHeaderMap.length - 1][validTemplateIndex];\n    var $cell = $(\"<th>\").addClass(this._getHeaderPanelCellClass(panelCellIndex)).attr(\"title\", text);\n\n    if (null !== cellTemplate && void 0 !== cellTemplate && cellTemplate.render) {\n      templateCallbacks.push(cellTemplate.render.bind(cellTemplate, {\n        model: _extends({\n          text: text,\n          date: date\n        }, this._getGroupsForDateHeaderTemplate(templateIndex)),\n        index: templateIndex,\n        container: getPublicElement($cell)\n      }));\n    } else {\n      $cell.text(text);\n    }\n\n    container.append($cell);\n    return $cell;\n  }\n\n  _getGroupsForDateHeaderTemplate(templateIndex) {\n    var indexMultiplier = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;\n    var groupIndex;\n    var groups;\n\n    if (this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate()) {\n      groupIndex = this._getGroupIndex(0, templateIndex * indexMultiplier);\n      var groupsArray = getCellGroups(groupIndex, this.option(\"groups\"));\n      groups = getGroupsObjectFromGroupsArray(groupsArray);\n    }\n\n    return {\n      groups: groups,\n      groupIndex: groupIndex\n    };\n  }\n\n  _getHeaderPanelCellClass(i) {\n    var cellClass = HEADER_PANEL_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\n    return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1, void 0, void 0, this.isGroupedByDate());\n  }\n\n  _renderAllDayPanel(index) {\n    var cellCount = this._getCellCount();\n\n    if (!this._isVerticalGroupedWorkSpace()) {\n      cellCount *= this._getGroupCount() || 1;\n    }\n\n    var cellTemplates = this._renderTableBody({\n      container: this._allDayPanels.length ? getPublicElement(this._allDayTables[index]) : getPublicElement(this._$allDayTable),\n      rowCount: 1,\n      cellCount: cellCount,\n      cellClass: this._getAllDayPanelCellClass.bind(this),\n      rowClass: ALL_DAY_TABLE_ROW_CLASS,\n      cellTemplate: this.option(\"dataCellTemplate\"),\n      getCellData: this._oldRender_getAllDayCellData(index),\n      groupIndex: index\n    }, true);\n\n    this._toggleAllDayVisibility(true);\n\n    this._applyCellTemplates(cellTemplates);\n  }\n\n  _renderGroupAllDayPanel() {\n    if (this._isVerticalGroupedWorkSpace()) {\n      var groupCount = this._getGroupCount();\n\n      for (var i = 0; i < groupCount; i++) {\n        this._renderAllDayPanel(i);\n      }\n    }\n  }\n\n  _getAllDayPanelCellClass(i, j) {\n    var cellClass = ALL_DAY_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\n    return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, j + 1);\n  }\n\n  _renderTimePanel() {\n    var repeatCount = this._groupedStrategy.calculateTimeCellRepeatCount();\n\n    var getData = (rowIndex, field) => {\n      var allDayPanelsCount = 0;\n\n      if (this.isAllDayPanelVisible) {\n        allDayPanelsCount = 1;\n      }\n\n      if (this.isGroupedAllDayPanel()) {\n        allDayPanelsCount = Math.ceil((rowIndex + 1) / this._getRowCount());\n      }\n\n      var validRowIndex = rowIndex + allDayPanelsCount;\n      return this.viewDataProvider.completeTimePanelMap[validRowIndex][field];\n    };\n\n    this._renderTableBody({\n      container: getPublicElement(this._$timePanel),\n      rowCount: this._getTimePanelRowCount() * repeatCount,\n      cellCount: 1,\n      cellClass: this._getTimeCellClass.bind(this),\n      rowClass: TIME_PANEL_ROW_CLASS,\n      cellTemplate: this.option(\"timeCellTemplate\"),\n      getCellText: rowIndex => getData(rowIndex, \"text\"),\n      getCellDate: rowIndex => getData(rowIndex, \"startDate\"),\n      groupCount: this._getGroupCount(),\n      allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayTitles : void 0,\n      getTemplateData: (rowIndex => {\n        if (!this._isVerticalGroupedWorkSpace()) {\n          return {};\n        }\n\n        var groupIndex = this._getGroupIndex(rowIndex, 0);\n\n        var groupsArray = getCellGroups(groupIndex, this.option(\"groups\"));\n        var groups = getGroupsObjectFromGroupsArray(groupsArray);\n        return {\n          groupIndex: groupIndex,\n          groups: groups\n        };\n      }).bind(this)\n    });\n  }\n\n  _getTimeCellClass(i) {\n    var cellClass = TIME_PANEL_CELL_CLASS + \" \" + VERTICAL_SIZES_CLASS;\n    return this._isVerticalGroupedWorkSpace() ? this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i, i) : cellClass;\n  }\n\n  _renderDateTable() {\n    var groupCount = this._getGroupCount();\n\n    this._renderTableBody({\n      container: getPublicElement(this._$dateTable),\n      rowCount: this._getTotalRowCount(groupCount),\n      cellCount: this._getTotalCellCount(groupCount),\n      cellClass: this._getDateTableCellClass.bind(this),\n      rowClass: DATE_TABLE_ROW_CLASS,\n      cellTemplate: this.option(\"dataCellTemplate\"),\n      getCellData: (_, rowIndex, columnIndex) => {\n        var isGroupedAllDayPanel = this.isGroupedAllDayPanel();\n        var validRowIndex = rowIndex;\n\n        if (isGroupedAllDayPanel) {\n          var rowCount = this._getRowCount();\n\n          var allDayPanelsCount = Math.ceil(rowIndex / rowCount);\n          validRowIndex += allDayPanelsCount;\n        }\n\n        var cellData = this.viewDataProvider.viewDataMap.dateTableMap[validRowIndex][columnIndex].cellData;\n        return {\n          value: this._filterCellDataFields(cellData),\n          fullValue: cellData,\n          key: CELL_DATA\n        };\n      },\n      allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayPanels : void 0,\n      groupCount: groupCount,\n      groupByDate: this.option(\"groupByDate\")\n    });\n  }\n\n  _insertAllDayRowsIntoDateTable() {\n    return this._groupedStrategy.insertAllDayRowsIntoDateTable();\n  }\n\n  _renderTableBody(options, delayCellTemplateRendering) {\n    var result = [];\n\n    if (!delayCellTemplateRendering) {\n      this._applyCellTemplates(tableCreator.makeTable(options));\n    } else {\n      result = tableCreator.makeTable(options);\n    }\n\n    return result;\n  }\n\n}\n\nvar createDragBehaviorConfig = (container, isDefaultDraggingMode, dragBehavior, attachGeneralEvents, detachGeneralEvents, getDroppableCell, getDateTables, removeDroppableCellClass, getCellWidth, options) => {\n  var state = {\n    dragElement: void 0,\n    itemData: void 0\n  };\n\n  var isItemDisabled = () => {\n    var {\n      itemData: itemData\n    } = state;\n\n    if (itemData) {\n      var getter = compileGetter(\"disabled\");\n      return getter(itemData);\n    }\n\n    return true;\n  };\n\n  var cursorOffset = options.isSetCursorOffset ? () => {\n    var $dragElement = $(state.dragElement);\n    return {\n      x: getWidth($dragElement) / 2,\n      y: getHeight($dragElement) / 2\n    };\n  } : void 0;\n  return {\n    container: container,\n    dragTemplate: () => state.dragElement,\n    onDragStart: e => {\n      if (!isDefaultDraggingMode) {\n        detachGeneralEvents();\n      }\n\n      var canceled = e.cancel;\n      var event = e.event;\n      var $itemElement = $(e.itemElement);\n      var appointments = e.component._appointments;\n      state.itemData = options.getItemData(e.itemElement, appointments);\n      var settings = options.getItemSettings($itemElement, e);\n      var initialPosition = options.initialPosition;\n\n      if (!isItemDisabled()) {\n        event.data = event.data || {};\n\n        if (!canceled) {\n          if (!settings.isCompact) {\n            dragBehavior.updateDragSource(state.itemData, settings);\n          }\n\n          state.dragElement = ((itemData, settings, appointments) => {\n            var appointmentIndex = appointments.option(\"items\").length;\n            settings.isCompact = false;\n            settings.virtual = false;\n\n            var items = appointments._renderItem(appointmentIndex, {\n              itemData: itemData,\n              settings: [settings]\n            });\n\n            return items[0];\n          })(state.itemData, settings, appointments);\n\n          event.data.itemElement = state.dragElement;\n          event.data.initialPosition = null !== initialPosition && void 0 !== initialPosition ? initialPosition : locate($(state.dragElement));\n          event.data.itemData = state.itemData;\n          event.data.itemSettings = settings;\n          dragBehavior.onDragStart(event.data);\n          resetPosition($(state.dragElement));\n        }\n      }\n    },\n    onDragMove: () => {\n      if (isDefaultDraggingMode) {\n        return;\n      }\n\n      var appointmentWidth = getWidth(state.dragElement);\n      var cellWidth = getCellWidth();\n      var isWideAppointment = appointmentWidth > cellWidth;\n      var dragElementContainer = $(state.dragElement).parent();\n      var boundingRect = getBoundingRect(dragElementContainer.get(0));\n      var newX = boundingRect.left + 10;\n      var newY = boundingRect.top + 10;\n      var elements = isWideAppointment ? domAdapter.elementsFromPoint(newX, newY) : domAdapter.elementsFromPoint(newX + appointmentWidth / 2, newY);\n      var dateTables = getDateTables();\n      var droppableCell = elements.find(el => {\n        var classList = el.classList;\n        var isCurrentSchedulerElement = 1 === dateTables.find(el).length;\n        return isCurrentSchedulerElement && (classList.contains(DATE_TABLE_CELL_CLASS) || classList.contains(ALL_DAY_TABLE_CELL_CLASS));\n      });\n\n      if (droppableCell) {\n        var oldDroppableCell = getDroppableCell();\n\n        if (!oldDroppableCell.is(droppableCell)) {\n          removeDroppableCellClass();\n        }\n\n        $(droppableCell).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS);\n      }\n    },\n    onDragEnd: e => {\n      var _state$dragElement;\n\n      if (!isDefaultDraggingMode) {\n        attachGeneralEvents();\n      }\n\n      if (!isItemDisabled()) {\n        dragBehavior.onDragEnd(e);\n      }\n\n      null === (_state$dragElement = state.dragElement) || void 0 === _state$dragElement ? void 0 : _state$dragElement.remove();\n      removeDroppableCellClass();\n    },\n    cursorOffset: cursorOffset,\n    filter: options.filter\n  };\n};\n\nexport default SchedulerWorkSpace;","map":{"version":3,"sources":["/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space.js"],"names":["_extends","setWidth","getOuterHeight","getOuterWidth","setOuterHeight","getHeight","getWidth","$","domAdapter","eventsEngine","dateUtils","getWindow","hasWindow","getPublicElement","extend","getBoundingRect","messageLocalization","noop","isDefined","addNamespace","isMouseEvent","pointerEvents","errors","name","clickEventName","contextMenuEventName","enter","dragEventEnter","leave","dragEventLeave","drop","dragEventDrop","Scrollable","HorizontalGroupedStrategy","VerticalGroupedStrategy","tableCreatorModule","tableCreator","VerticalShader","AppointmentDragBehavior","APPOINTMENT_SETTINGS_KEY","FIXED_CONTAINER_CLASS","VIRTUAL_CELL_CLASS","TIME_PANEL_CLASS","DATE_TABLE_CLASS","DATE_TABLE_ROW_CLASS","GROUP_ROW_CLASS","GROUP_HEADER_CONTENT_CLASS","VERTICAL_GROUP_COUNT_CLASSES","WidgetObserver","resetPosition","locate","VirtualScrollingDispatcher","VirtualScrollingRenderer","ViewDataProvider","dxrDateTableLayout","dxrAllDayPanelLayout","dxrAllDayPanelTitle","dxrTimePanelTableLayout","dxrGroupPanel","dxrDateHeader","CellsSelectionState","Cache","CellsSelectionController","calculateViewStartDate","getViewStartByOptions","validateDayHours","getStartViewDateTimeOffset","isDateAndTimeView","calculateIsGroupedAllDayPanel","getCellDuration","createResourcesTree","getCellGroups","getGroupsObjectFromGroupsArray","getGroupCount","Semaphore","getCellWidth","getCellHeight","getAllDayHeight","getMaxAllowedPosition","PositionHelper","utils","compileGetter","abstract","toMs","dateToMilliseconds","COMPONENT_CLASS","GROUPED_WORKSPACE_CLASS","VERTICAL_GROUPED_WORKSPACE_CLASS","WORKSPACE_VERTICAL_GROUP_TABLE_CLASS","WORKSPACE_WITH_BOTH_SCROLLS_CLASS","WORKSPACE_WITH_COUNT_CLASS","WORKSPACE_WITH_GROUP_BY_DATE_CLASS","WORKSPACE_WITH_ODD_CELLS_CLASS","TIME_PANEL_CELL_CLASS","TIME_PANEL_ROW_CLASS","ALL_DAY_PANEL_CLASS","ALL_DAY_TABLE_CLASS","ALL_DAY_CONTAINER_CLASS","ALL_DAY_TITLE_CLASS","ALL_DAY_TABLE_CELL_CLASS","ALL_DAY_TABLE_ROW_CLASS","WORKSPACE_WITH_ALL_DAY_CLASS","WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS","WORKSPACE_WITH_MOUSE_SELECTION_CLASS","HORIZONTAL_SIZES_CLASS","VERTICAL_SIZES_CLASS","HEADER_PANEL_CLASS","HEADER_PANEL_CELL_CLASS","HEADER_ROW_CLASS","GROUP_HEADER_CLASS","DATE_TABLE_CELL_CLASS","DATE_TABLE_FOCUSED_CELL_CLASS","VIRTUAL_ROW_CLASS","DATE_TABLE_DROPPABLE_CELL_CLASS","SCHEDULER_HEADER_SCROLLABLE_CLASS","SCHEDULER_SIDEBAR_SCROLLABLE_CLASS","SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS","SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME","down","DragEventNames","ENTER","DROP","LEAVE","SCHEDULER_CELL_DXCLICK_EVENT_NAME","SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME","SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME","up","SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME","move","CELL_DATA","DATE_TABLE_MIN_CELL_WIDTH","DAY_MS","HOUR_MS","DRAG_AND_DROP_SELECTOR","concat","CELL_SELECTOR","SchedulerWorkSpace","viewDataProvider","_viewDataProvider","type","cache","_cache","cellsSelectionState","_cellsSelectionState","selectedCellsOption","option","length","validSelectedCells","map","selectedCell","groups","_getGroupCount","groupIndex","_getGroupIndexByResourceId","setSelectedCellsByData","cellsSelectionController","_cellsSelectionController","isAllDayPanelVisible","_isShowAllDayPanel","supportAllDayRow","verticalGroupTableClass","viewDirection","renovatedHeaderPanelComponent","timeZoneCalculator","_supportedKeys","clickHandler","e","preventDefault","stopPropagation","selectedCells","getSelectedCells","selectedCellsElement","cellData","_getCellByData","filter","cell","target","_showPopup","_cellClickAction","event","cellElement","onArrowPressed","key","_this$cellsSelectionS","focusedCellData","focusedCell","isAllDayPanelCell","allDay","_isVerticalGroupedWorkSpace","isMultiSelection","shiftKey","isMultiSelectionAllowed","isRTL","_isRTL","groupCount","isGroupedByDate","isHorizontalGrouping","_isHorizontalGroupedWorkSpace","focusedCellPosition","findCellPositionInMap","isAllDay","edgeIndices","getGroupEdgeIndices","getViewEdgeIndices","nextCellData","handleArrowClick","viewType","getCellDataByPosition","getCellData","bind","_processNextSelectedCell","space","downArrow","upArrow","rightArrow","leftArrow","_moveToCell","$cell","currentCellData","_getFullCellData","nextFocusedCellData","moveToCell","isVirtualCell","hasClass","nextCellPosition","startDate","index","isSameCell","_dom_getAllDayPanelCell","columnIndex","_dom_getDateCell","isNextCellAllDay","_setSelectedCellsStateAndUpdateSelection","_dateTableScrollable","scrollToElement","cellPosition","$nextFocusedCell","nextCellCoordinates","rowIndex","setFocusedCell","setSelectedCells","updateCellsSelection","_updateSelectedCellDataOption","_hasAllDayClass","_focusInHandler","is","_focusTarget","_isCellClick","_contextMenuHandled","apply","arguments","restoreSelectedAndFocusedCells","cellCoordinates","_focusOutHandler","_disposed","releaseSelectedAndFocusedCells","updateViewData","generateRenderOptions","$element","_isWorkSpaceWithCount","_isWorkspaceWithOddCells","isVirtualScrolling","_getRealGroupOrientation","createRAllDayPanelElements","_$allDayPanel","_$allDayTitle","appendTo","_$headerPanelEmptyCell","_dateTableScrollableConfig","config","useKeyboard","bounceEnabled","updateManually","onScroll","_this$_groupedStrateg","_groupedStrategy","clear","_needCreateCrossScrolling","_createCrossScrollingConfig","virtualScrollingDispatcher","horizontalScrollingAllowed","height","currentOnScroll","handleOnScrollEvent","scrollOffset","currentConfig","direction","_dataTableSemaphore","take","_sideBarSemaphore","isFree","_sidebarScrollable","scrollTo","top","_headerSemaphore","_headerScrollable","left","release","onEnd","_headerScrollableConfig","showScrollbar","useNative","_visibilityChanged","visible","_updateGroupTableHeight","_setTableSizes","_attachTableClasses","cellWidth","getCellMinWidth","minWidth","getWorkSpaceMinWidth","totalCellCount","_getTotalCellCount","width","_$headerPanel","_$dateTable","_$allDayTable","_attachHeaderTableClasses","_updateScrollable","_dimensionChanged","updateHeaderEmptyCellWidth","_getElementClass","_getRowCount","getRowCount","intervalCount","currentDate","hoursInterval","startDayHour","endDayHour","_getCellCount","getCellCount","isRenovatedRender","renovatedRenderSupported","_isVirtualModeOn","_initVirtualScrolling","dispose","_getVirtualScrollingDispatcherOptions","attachScrollableEvents","renderer","onDataSourceChanged","isGroupedAllDayPanel","isProvideVirtualCellsWidth","_this$_getToday","groupOrientation","_getDefaultGroupStrategy","options","groupByDate","startRowIndex","startCellIndex","today","_getToday","call","headerCellTextFormat","_getFormat","getDateForHeaderText","_","date","cellDuration","firstDayOfWeek","getRenderState","_setHorizontalGroupHeaderCellsHeight","_isRenderHeaderPanelEmptyCell","timePanelWidth","getTimePanelWidth","groupPanelWidth","getGroupTableWidth","css","_isGroupsSpecified","resources","id","resourceTree","_getGroupIndexRecursively","currentKey","currentValue","reduce","prevIndex","_ref","leafIndex","value","children","areValuesEqual","_getViewStartByOptions","_getIntervalDuration","_calculateViewStartDate","getIntervalDuration","_getHeaderDate","getStartViewDate","_firstDayOfWeek","getFirstDayOfWeek","_attachEvents","_createSelectionChangedAction","_attachClickEvent","_attachContextMenuEvent","that","pointerDownAction","_createAction","_pointerDownHandler","_createCellClickAction","cellSelector","off","on","which","_createActionByOption","afterExecute","_cellClickHandler","args","_selectionChangedAction","_handleSelectedCellsClick","$target","_getCoordinatesByCell","isAllDayCell","firstCellData","lastCellData","result","endDate","_createContextMenuAction","eventName","NAME","_contextMenuHandler","_contextMenuAction","_getGroupHeaderContainer","_$groupTable","_$thead","_getDateHeaderContainer","_getCalculateHeaderCellRepeatCount","calculateHeaderCellRepeatCount","update","_getTimePanelRowCount","_getCellCountInDay","getCellCountInDay","getTotalCellCount","_getTotalRowCount","includeAllDayPanelRows","getTotalRowCount","_getGroupIndex","getGroupIndex","calculateEndDate","viewDataGenerator","getInterval","_attachTablesEvents","element","_attachDragEvents","_attachPointerEvents","_detachDragEvents","checkDropTarget","_isOutsideScrollable","removeDroppableCellClass","addClass","isPointerDown","getDocument","removeClass","getWorkArea","_$dateTableContainer","getScrollable","getScrollableScrollTop","scrollTop","getGroupedScrollableScrollTop","getScrollableScrollLeft","scrollLeft","getScrollableOuterWidth","scrollWidth","getScrollableContainer","container","getHeaderPanelHeight","_$timePanel","get","getWorkSpaceLeftOffset","getLeftOffset","_getCellCoordinatesByIndex","Math","floor","_getDateGenerationOptions","_this$viewDataProvide","isWorkView","interval","startViewDate","_getIntervalBetween","firstViewDate","startDayTime","timeZoneOffset","getTimezonesDifference","fullInterval","getTime","days","_getDaysOfInterval","weekendsCount","_getWeekendsCount","hiddenInterval","visibleDayDuration","getVisibleDayDuration","_updateIndex","_getDroppableCell","_getDateTables","find","_getWorkSpaceWidth","totalWidth","groupTableWidth","_getCellByCoordinates","inAllDayRow","indexes","prepareCellIndexes","position","eq","_getCells","cellClass","i","cells","toArray","_getAllCells","_getGroupHeaderCells","_getScrollCoordinates","hours","minutes","Date","setHours","findGlobalCellPosition","calculateCoordinatesByDataAndPosition","$dateTableScrollableElement","scrollableSize","window","isTargetInAllDayPanel","closest","isOutsideHorizontalScrollable","pageX","scrollX","isOutsideVerticalScrollable","pageY","scrollY","setCellDataCache","JSON","stringify","set","setCellDataCacheAlias","appointment","geometry","aliasKey","keepOriginalHours","_filterCellDataFields","currentCell","_getDataByCell","_getVirtualRowOffset","virtualRowOffset","_getVirtualCellOffset","virtualCellOffset","parent","topVirtualRowsCount","leftVirtualCellsCount","getCellIndexByDate","timeInterval","startViewDateOffset","dateTimeStamp","getDroppableCellIndex","$droppableCell","$row","getDataByDroppableCell","getDateRange","getEndViewDateByEndDayHour","getRoundedCellWidth","startIndex","cellCount","$cells","elementWidth","getDOMElementsMetaData","getAllDayOffset","getCellIndexByCoordinates","coordinates","cellHeight","topIndex","leftIndex","getEndViewDate","getLastCellEndDate","getLastViewDateByEndDayHour","getGroupBounds","groupedDataMap","getGroupBoundsOffset","startOffset","right","needRecalculateResizableArea","getCellDataByCoordinates","cellIndex","getVisibleBounds","$scrollable","scrolledCellCount","bottom","updateScrollPosition","newDate","createDate","path","needUpdateScrollPosition","_getCellsInViewport","time","trimmedTime","trimTime","currentResult","cellStartDate","cellEndDate","cellGroupIndex","cellStartTime","cellEndTime","totalColumnCount","scrollableScrollTop","scrollableScrollLeft","fullScrolledRowCount","scrolledRowCount","fullScrolledColumnCount","scrolledColumnCount","rowCount","columnCount","each","push","scrollToTime","_isValidScrollDate","scrollable","scrollBy","throwWarning","isScrollToAllDay","getHours","getMinutes","offset","scrollableHeight","scrollableWidth","xShift","yShift","setTimeout","min","max","log","needApplyCollectorOffset","$cellElement","isVerticalGrouping","_getTimePanelCells","_getRDateTableProps","viewData","dataCellTemplate","addDateTableClass","addVerticalSizesClassToRows","selectedCellData","correctedSelectedCellData","_ref2","dateTableCellsMeta","_getDateTableDOMElementsInfo","allDayPanelCellsMeta","_getAllDayPanelDOMElementsInfo","dateTableCells","dateTable","_getDateTable","dateTableRect","columnsCount","getColumnsCount","_addCellMetaData","allDayCells","allDayAppointmentContainer","allDayPanelRect","cellMetaDataArray","parentRect","cellRect","_oldRender_getAllDayCellData","validColumnIndex","getDateByCellIndices","validGroupIndex","data","groupsArray","renderRWorkSpace","renderRHeaderPanel","renderRTimeTable","renderRDateTable","renderRAllDayPanel","renovation","renderComponent","renderRGroupPanel","resourceCellTemplate","className","groupPanelData","getGroupPanelData","_attachGroupCountClass","_detachGroupCountClass","_this$virtualScrollin","_toggleAllDayVisibility","horizontalVirtualScrolling","renovatedAllDayPanel","prepend","_$allDayContainer","timePanelData","timeCellTemplate","isRenderDateHeader","dateHeaderData","dateCellTemplate","initDragBehavior","scheduler","dragBehavior","_createDragBehavior","getAllDayContainer","getItemData","itemElement","appointments","_getItemData","getItemSettings","$itemElement","_createDragBehaviorBase","isDefaultDraggingMode","addTo","createDragBehaviorConfig","_dispose","_getDefaultOptions","activeStateEnabled","hoverStateEnabled","showAllDayPanel","allDayExpanded","onCellClick","crossScrollingEnabled","allowMultipleCellSelection","indicatorTime","indicatorUpdateInterval","shadeUntilCurrentTime","scrolling","mode","renovateRender","draggingMode","onScrollEnd","getHeaderHeight","onVirtualScrollingUpdated","onSelectedCellsClick","schedulerHeight","schedulerWidth","_optionChanged","_cleanWorkSpace","_cleanView","_removeAllDayElements","_initGrouping","repaint","_initGroupedStrategy","_createAllDayPanelElements","_toggleGroupByDateClass","renderWorkSpace","_changeAllDayVisibility","_toggleWorkSpaceCountClass","_toggleHorizontalScrollClass","updateDimensions","getSchedulerHeight","getSchedulerWidth","getViewHeight","getViewWidth","getScrolling","createAction","updateRender","updateGrid","_toggleGroupedClass","_toggleWorkSpaceWithOddCells","_renderView","_init","_activeStateUnit","_initPositionHelper","positionHelper","viewStartDayHour","viewEndDayHour","groupedStrategy","rtlEnabled","getDOMMetaDataCallback","_toggleGroupingDirectionClass","isVerticalOrientation","orientation","Strategy","toggleClass","_getDateTableCellClass","addAdditionalGroupCellClasses","_getGroupHeaderClass","_initWorkSpaceUnits","_$headerPanelContainer","_$headerTablesContainer","_$fixedContainer","_$dateTableScrollableContent","_$sidebarScrollableContent","_initAllDayPanelElements","_allDayTitles","_allDayTables","_allDayPanels","_initDateTableScrollable","$dateTableScrollable","_createComponent","_createWorkSpaceElements","_createWorkSpaceScrollableElements","_createWorkSpaceStaticElements","append","$content","_appendHeaderPanelEmptyCellIfNecessary","_$flexContainer","_createHeaderScrollable","_createSidebarScrollable","$headerScrollable","$timePanelScrollable","_addTableClass","$el","_initMarkup","_render","_renderDateTimeIndication","_setIndicationUpdateInterval","_applyCellTemplates","_renderGroupHeader","_shader","renderOptions","_refreshDateTimeIndication","forEach","getGroupCountClass","_getDateHeaderTemplate","isUpdateScrollable","add","remove","_this$_shader","_cleanTableWidths","clearSelectedAndFocusedCells","_this$_$allDayTable","_this$_$sidebarTable","empty","_$sidebarTable","clean","_interval","_clean","_disposeRenovatedComponents","_this$renovatedAllDay","_this$renovatedDateTa","_this$renovatedTimePa","_this$renovatedGroupP","_this$renovatedHeader","renovatedDateTable","renovatedTimePanel","renovatedGroupPanel","renovatedHeaderPanel","getGroupedStrategy","getFixedContainer","_renderGrid","updateAppointments","_this$dragBehavior","updateDragSource","$allDayTitle","text","format","isGenerateNewViewData","_renderDateHeader","_renderTimePanel","_renderGroupAllDayPanel","_renderDateTable","_renderAllDayPanel","$container","cellTemplates","groupRows","_makeGroupRows","elements","templates","template","tableCreatorStrategy","VERTICAL","HORIZONTAL","makeGroupedTable","groupHeaderRowClass","groupRowClass","groupHeaderClass","groupHeaderContentClass","$headerRow","count","cellTemplate","repeatCount","templateCallbacks","templateIndex","_renderDateHeaderTemplate","colSpan","_columnIndex","_templateIndex","attr","panelCellIndex","validTemplateIndex","completeDateHeaderMap","_getHeaderPanelCellClass","render","model","_getGroupsForDateHeaderTemplate","indexMultiplier","_renderTableBody","_getAllDayPanelCellClass","rowClass","j","calculateTimeCellRepeatCount","getData","field","allDayPanelsCount","ceil","validRowIndex","completeTimePanelMap","_getTimeCellClass","getCellText","getCellDate","allDayElements","_insertAllDayRowsIntoDateTable","getTemplateData","viewDataMap","dateTableMap","fullValue","insertAllDayRowsIntoDateTable","delayCellTemplateRendering","makeTable","attachGeneralEvents","detachGeneralEvents","getDroppableCell","getDateTables","state","dragElement","itemData","isItemDisabled","getter","cursorOffset","isSetCursorOffset","$dragElement","x","y","dragTemplate","onDragStart","canceled","cancel","component","_appointments","settings","initialPosition","isCompact","appointmentIndex","virtual","items","_renderItem","itemSettings","onDragMove","appointmentWidth","isWideAppointment","dragElementContainer","boundingRect","newX","newY","elementsFromPoint","dateTables","droppableCell","el","classList","isCurrentSchedulerElement","contains","oldDroppableCell","onDragEnd","_state$dragElement"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    setWidth,\r\n    getOuterHeight,\r\n    getOuterWidth,\r\n    setOuterHeight,\r\n    getHeight,\r\n    getWidth\r\n} from \"../../../core/utils/size\";\r\nimport $ from \"../../../core/renderer\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport eventsEngine from \"../../../events/core/events_engine\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport {\r\n    getWindow,\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../../core/element\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport messageLocalization from \"../../../localization/message\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nimport {\r\n    addNamespace,\r\n    isMouseEvent\r\n} from \"../../../events/utils/index\";\r\nimport pointerEvents from \"../../../events/pointer\";\r\nimport errors from \"../../widget/ui.errors\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../../events/click\";\r\nimport {\r\n    name as contextMenuEventName\r\n} from \"../../../events/contextmenu\";\r\nimport {\r\n    enter as dragEventEnter,\r\n    leave as dragEventLeave,\r\n    drop as dragEventDrop\r\n} from \"../../../events/drag\";\r\nimport Scrollable from \"../../scroll_view/ui.scrollable\";\r\nimport HorizontalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.horizontal\";\r\nimport VerticalGroupedStrategy from \"./ui.scheduler.work_space.grouped.strategy.vertical\";\r\nimport tableCreatorModule from \"../table_creator\";\r\nvar {\r\n    tableCreator: tableCreator\r\n} = tableCreatorModule;\r\nimport VerticalShader from \"../shaders/ui.scheduler.current_time_shader.vertical\";\r\nimport AppointmentDragBehavior from \"../appointmentDragBehavior\";\r\nimport {\r\n    APPOINTMENT_SETTINGS_KEY\r\n} from \"../constants\";\r\nimport {\r\n    FIXED_CONTAINER_CLASS,\r\n    VIRTUAL_CELL_CLASS,\r\n    TIME_PANEL_CLASS,\r\n    DATE_TABLE_CLASS,\r\n    DATE_TABLE_ROW_CLASS,\r\n    GROUP_ROW_CLASS,\r\n    GROUP_HEADER_CONTENT_CLASS,\r\n    VERTICAL_GROUP_COUNT_CLASSES\r\n} from \"../classes\";\r\nimport WidgetObserver from \"../base/widgetObserver\";\r\nimport {\r\n    resetPosition,\r\n    locate\r\n} from \"../../../animation/translator\";\r\nimport {\r\n    VirtualScrollingDispatcher,\r\n    VirtualScrollingRenderer\r\n} from \"./ui.scheduler.virtual_scrolling\";\r\nimport ViewDataProvider from \"./view_model/view_data_provider\";\r\nimport dxrDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/date_table/layout.j\";\r\nimport dxrAllDayPanelLayout from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/layout.j\";\r\nimport dxrAllDayPanelTitle from \"../../../renovation/ui/scheduler/workspaces/base/date_table/all_day_panel/title.j\";\r\nimport dxrTimePanelTableLayout from \"../../../renovation/ui/scheduler/workspaces/base/time_panel/layout.j\";\r\nimport dxrGroupPanel from \"../../../renovation/ui/scheduler/workspaces/base/group_panel/group_panel.j\";\r\nimport dxrDateHeader from \"../../../renovation/ui/scheduler/workspaces/base/header_panel/layout.j\";\r\nimport CellsSelectionState from \"./cells_selection_state\";\r\nimport {\r\n    Cache\r\n} from \"./cache\";\r\nimport {\r\n    CellsSelectionController\r\n} from \"./cells_selection_controller\";\r\nimport {\r\n    calculateViewStartDate,\r\n    getViewStartByOptions,\r\n    validateDayHours,\r\n    getStartViewDateTimeOffset,\r\n    isDateAndTimeView,\r\n    calculateIsGroupedAllDayPanel,\r\n    getCellDuration\r\n} from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    createResourcesTree,\r\n    getCellGroups,\r\n    getGroupsObjectFromGroupsArray,\r\n    getGroupCount\r\n} from \"../resources/utils\";\r\nimport {\r\n    Semaphore\r\n} from \"../../../renovation/ui/scheduler/semaphore\";\r\nimport {\r\n    getCellWidth,\r\n    getCellHeight,\r\n    getAllDayHeight,\r\n    getMaxAllowedPosition,\r\n    PositionHelper\r\n} from \"./helpers/positionHelper\";\r\nimport {\r\n    utils\r\n} from \"../utils\";\r\nimport {\r\n    compileGetter\r\n} from \"../../../core/utils/data\";\r\nvar abstract = WidgetObserver.abstract;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar COMPONENT_CLASS = \"dx-scheduler-work-space\";\r\nvar GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-grouped\";\r\nvar VERTICAL_GROUPED_WORKSPACE_CLASS = \"dx-scheduler-work-space-vertical-grouped\";\r\nvar WORKSPACE_VERTICAL_GROUP_TABLE_CLASS = \"dx-scheduler-work-space-vertical-group-table\";\r\nvar WORKSPACE_WITH_BOTH_SCROLLS_CLASS = \"dx-scheduler-work-space-both-scrollbar\";\r\nvar WORKSPACE_WITH_COUNT_CLASS = \"dx-scheduler-work-space-count\";\r\nvar WORKSPACE_WITH_GROUP_BY_DATE_CLASS = \"dx-scheduler-work-space-group-by-date\";\r\nvar WORKSPACE_WITH_ODD_CELLS_CLASS = \"dx-scheduler-work-space-odd-cells\";\r\nvar TIME_PANEL_CELL_CLASS = \"dx-scheduler-time-panel-cell\";\r\nvar TIME_PANEL_ROW_CLASS = \"dx-scheduler-time-panel-row\";\r\nvar ALL_DAY_PANEL_CLASS = \"dx-scheduler-all-day-panel\";\r\nvar ALL_DAY_TABLE_CLASS = \"dx-scheduler-all-day-table\";\r\nvar ALL_DAY_CONTAINER_CLASS = \"dx-scheduler-all-day-appointments\";\r\nvar ALL_DAY_TITLE_CLASS = \"dx-scheduler-all-day-title\";\r\nvar ALL_DAY_TABLE_CELL_CLASS = \"dx-scheduler-all-day-table-cell\";\r\nvar ALL_DAY_TABLE_ROW_CLASS = \"dx-scheduler-all-day-table-row\";\r\nvar WORKSPACE_WITH_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day\";\r\nvar WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS = \"dx-scheduler-work-space-all-day-collapsed\";\r\nvar WORKSPACE_WITH_MOUSE_SELECTION_CLASS = \"dx-scheduler-work-space-mouse-selection\";\r\nvar HORIZONTAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-horizontal\";\r\nvar VERTICAL_SIZES_CLASS = \"dx-scheduler-cell-sizes-vertical\";\r\nvar HEADER_PANEL_CLASS = \"dx-scheduler-header-panel\";\r\nvar HEADER_PANEL_CELL_CLASS = \"dx-scheduler-header-panel-cell\";\r\nvar HEADER_ROW_CLASS = \"dx-scheduler-header-row\";\r\nvar GROUP_HEADER_CLASS = \"dx-scheduler-group-header\";\r\nvar DATE_TABLE_CELL_CLASS = \"dx-scheduler-date-table-cell\";\r\nvar DATE_TABLE_FOCUSED_CELL_CLASS = \"dx-scheduler-focused-cell\";\r\nvar VIRTUAL_ROW_CLASS = \"dx-scheduler-virtual-row\";\r\nvar DATE_TABLE_DROPPABLE_CELL_CLASS = \"dx-scheduler-date-table-droppable-cell\";\r\nvar SCHEDULER_HEADER_SCROLLABLE_CLASS = \"dx-scheduler-header-scrollable\";\r\nvar SCHEDULER_SIDEBAR_SCROLLABLE_CLASS = \"dx-scheduler-sidebar-scrollable\";\r\nvar SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS = \"dx-scheduler-date-table-scrollable\";\r\nvar SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerWorkSpace\");\r\nvar DragEventNames = {\r\n    ENTER: addNamespace(dragEventEnter, \"dxSchedulerDateTable\"),\r\n    DROP: addNamespace(dragEventDrop, \"dxSchedulerDateTable\"),\r\n    LEAVE: addNamespace(dragEventLeave, \"dxSchedulerDateTable\")\r\n};\r\nvar SCHEDULER_CELL_DXCLICK_EVENT_NAME = addNamespace(clickEventName, \"dxSchedulerDateTable\");\r\nvar SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME = addNamespace(pointerEvents.down, \"dxSchedulerDateTable\");\r\nvar SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME = addNamespace(pointerEvents.up, \"dxSchedulerDateTable\");\r\nvar SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME = addNamespace(pointerEvents.move, \"dxSchedulerDateTable\");\r\nvar CELL_DATA = \"dxCellData\";\r\nvar DATE_TABLE_MIN_CELL_WIDTH = 75;\r\nvar DAY_MS = toMs(\"day\");\r\nvar HOUR_MS = toMs(\"hour\");\r\nvar DRAG_AND_DROP_SELECTOR = \".\".concat(DATE_TABLE_CLASS, \" td, .\").concat(ALL_DAY_TABLE_CLASS, \" td\");\r\nvar CELL_SELECTOR = \".\".concat(DATE_TABLE_CELL_CLASS, \", .\").concat(ALL_DAY_TABLE_CELL_CLASS);\r\nclass SchedulerWorkSpace extends WidgetObserver {\r\n    get viewDataProvider() {\r\n        if (!this._viewDataProvider) {\r\n            this._viewDataProvider = new ViewDataProvider(this.type)\r\n        }\r\n        return this._viewDataProvider\r\n    }\r\n    get cache() {\r\n        if (!this._cache) {\r\n            this._cache = new Cache\r\n        }\r\n        return this._cache\r\n    }\r\n    get cellsSelectionState() {\r\n        if (!this._cellsSelectionState) {\r\n            this._cellsSelectionState = new CellsSelectionState(this.viewDataProvider);\r\n            var selectedCellsOption = this.option(\"selectedCellData\");\r\n            if ((null === selectedCellsOption || void 0 === selectedCellsOption ? void 0 : selectedCellsOption.length) > 0) {\r\n                var validSelectedCells = selectedCellsOption.map(selectedCell => {\r\n                    var groups = selectedCell.groups;\r\n                    if (!groups || 0 === this._getGroupCount()) {\r\n                        return _extends({}, selectedCell, {\r\n                            groupIndex: 0\r\n                        })\r\n                    }\r\n                    var groupIndex = this._getGroupIndexByResourceId(groups);\r\n                    return _extends({}, selectedCell, {\r\n                        groupIndex: groupIndex\r\n                    })\r\n                });\r\n                this._cellsSelectionState.setSelectedCellsByData(validSelectedCells)\r\n            }\r\n        }\r\n        return this._cellsSelectionState\r\n    }\r\n    get cellsSelectionController() {\r\n        if (!this._cellsSelectionController) {\r\n            this._cellsSelectionController = new CellsSelectionController\r\n        }\r\n        return this._cellsSelectionController\r\n    }\r\n    get isAllDayPanelVisible() {\r\n        return this._isShowAllDayPanel() && this.supportAllDayRow()\r\n    }\r\n    get verticalGroupTableClass() {\r\n        return WORKSPACE_VERTICAL_GROUP_TABLE_CLASS\r\n    }\r\n    get viewDirection() {\r\n        return \"vertical\"\r\n    }\r\n    get renovatedHeaderPanelComponent() {\r\n        return dxrDateHeader\r\n    }\r\n    get timeZoneCalculator() {\r\n        return this.option(\"timeZoneCalculator\")\r\n    }\r\n    _supportedKeys() {\r\n        var clickHandler = function(e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            var selectedCells = this.cellsSelectionState.getSelectedCells();\r\n            if (null !== selectedCells && void 0 !== selectedCells && selectedCells.length) {\r\n                var selectedCellsElement = selectedCells.map(cellData => this._getCellByData(cellData)).filter(cell => !!cell);\r\n                e.target = selectedCellsElement;\r\n                this._showPopup = true;\r\n                this._cellClickAction({\r\n                    event: e,\r\n                    cellElement: $(selectedCellsElement),\r\n                    cellData: selectedCells[0]\r\n                })\r\n            }\r\n        };\r\n        var onArrowPressed = (e, key) => {\r\n            var _this$cellsSelectionS;\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            var focusedCellData = null === (_this$cellsSelectionS = this.cellsSelectionState.focusedCell) || void 0 === _this$cellsSelectionS ? void 0 : _this$cellsSelectionS.cellData;\r\n            if (focusedCellData) {\r\n                var isAllDayPanelCell = focusedCellData.allDay && !this._isVerticalGroupedWorkSpace();\r\n                var isMultiSelection = e.shiftKey;\r\n                var isMultiSelectionAllowed = this.option(\"allowMultipleCellSelection\");\r\n                var isRTL = this._isRTL();\r\n                var groupCount = this._getGroupCount();\r\n                var isGroupedByDate = this.isGroupedByDate();\r\n                var isHorizontalGrouping = this._isHorizontalGroupedWorkSpace();\r\n                var focusedCellPosition = this.viewDataProvider.findCellPositionInMap(_extends({}, focusedCellData, {\r\n                    isAllDay: focusedCellData.allDay\r\n                }));\r\n                var edgeIndices = isHorizontalGrouping && isMultiSelection && !isGroupedByDate ? this.viewDataProvider.getGroupEdgeIndices(focusedCellData.groupIndex, isAllDayPanelCell) : this.viewDataProvider.getViewEdgeIndices(isAllDayPanelCell);\r\n                var nextCellData = this.cellsSelectionController.handleArrowClick({\r\n                    focusedCellPosition: focusedCellPosition,\r\n                    edgeIndices: edgeIndices,\r\n                    isRTL: isRTL,\r\n                    isGroupedByDate: isGroupedByDate,\r\n                    groupCount: groupCount,\r\n                    isMultiSelection: isMultiSelection,\r\n                    isMultiSelectionAllowed: isMultiSelectionAllowed,\r\n                    viewType: this.type,\r\n                    key: key,\r\n                    getCellDataByPosition: this.viewDataProvider.getCellData.bind(this.viewDataProvider),\r\n                    isAllDayPanelCell: isAllDayPanelCell,\r\n                    focusedCellData: focusedCellData\r\n                });\r\n                this._processNextSelectedCell(nextCellData, focusedCellData, isMultiSelection && isMultiSelectionAllowed)\r\n            }\r\n        };\r\n        return extend(super._supportedKeys(), {\r\n            enter: clickHandler,\r\n            space: clickHandler,\r\n            downArrow: e => {\r\n                onArrowPressed(e, \"down\")\r\n            },\r\n            upArrow: e => {\r\n                onArrowPressed(e, \"up\")\r\n            },\r\n            rightArrow: e => {\r\n                onArrowPressed(e, \"right\")\r\n            },\r\n            leftArrow: e => {\r\n                onArrowPressed(e, \"left\")\r\n            }\r\n        })\r\n    }\r\n    _isRTL() {\r\n        return this.option(\"rtlEnabled\")\r\n    }\r\n    _moveToCell($cell, isMultiSelection) {\r\n        if (!isDefined($cell) || !$cell.length) {\r\n            return\r\n        }\r\n        var isMultiSelectionAllowed = this.option(\"allowMultipleCellSelection\");\r\n        var currentCellData = this._getFullCellData($cell);\r\n        var focusedCellData = this.cellsSelectionState.focusedCell.cellData;\r\n        var nextFocusedCellData = this.cellsSelectionController.moveToCell({\r\n            isMultiSelection: isMultiSelection,\r\n            isMultiSelectionAllowed: isMultiSelectionAllowed,\r\n            currentCellData: currentCellData,\r\n            focusedCellData: focusedCellData,\r\n            isVirtualCell: $cell.hasClass(VIRTUAL_CELL_CLASS)\r\n        });\r\n        this._processNextSelectedCell(nextFocusedCellData, focusedCellData, isMultiSelectionAllowed && isMultiSelection)\r\n    }\r\n    _processNextSelectedCell(nextCellData, focusedCellData, isMultiSelection) {\r\n        var nextCellPosition = this.viewDataProvider.findCellPositionInMap({\r\n            startDate: nextCellData.startDate,\r\n            groupIndex: nextCellData.groupIndex,\r\n            isAllDay: nextCellData.allDay,\r\n            index: nextCellData.index\r\n        });\r\n        if (!this.viewDataProvider.isSameCell(focusedCellData, nextCellData)) {\r\n            var $cell = nextCellData.allDay && !this._isVerticalGroupedWorkSpace() ? this._dom_getAllDayPanelCell(nextCellPosition.columnIndex) : this._dom_getDateCell(nextCellPosition);\r\n            var isNextCellAllDay = nextCellData.allDay;\r\n            this._setSelectedCellsStateAndUpdateSelection(isNextCellAllDay, nextCellPosition, isMultiSelection, $cell);\r\n            this._dateTableScrollable.scrollToElement($cell)\r\n        }\r\n    }\r\n    _setSelectedCellsStateAndUpdateSelection(isAllDay, cellPosition, isMultiSelection, $nextFocusedCell) {\r\n        var nextCellCoordinates = {\r\n            rowIndex: cellPosition.rowIndex,\r\n            columnIndex: cellPosition.columnIndex,\r\n            allDay: isAllDay\r\n        };\r\n        this.cellsSelectionState.setFocusedCell(nextCellCoordinates.rowIndex, nextCellCoordinates.columnIndex, isAllDay);\r\n        if (isMultiSelection) {\r\n            this.cellsSelectionState.setSelectedCells(nextCellCoordinates)\r\n        } else {\r\n            this.cellsSelectionState.setSelectedCells(nextCellCoordinates, nextCellCoordinates)\r\n        }\r\n        this.updateCellsSelection();\r\n        this._updateSelectedCellDataOption(this.cellsSelectionState.getSelectedCells(), $nextFocusedCell)\r\n    }\r\n    _hasAllDayClass($cell) {\r\n        return $cell.hasClass(ALL_DAY_TABLE_CELL_CLASS)\r\n    }\r\n    _focusInHandler(e) {\r\n        if ($(e.target).is(this._focusTarget()) && false !== this._isCellClick) {\r\n            delete this._isCellClick;\r\n            delete this._contextMenuHandled;\r\n            super._focusInHandler.apply(this, arguments);\r\n            this.cellsSelectionState.restoreSelectedAndFocusedCells();\r\n            if (!this.cellsSelectionState.focusedCell) {\r\n                var cellCoordinates = {\r\n                    columnIndex: 0,\r\n                    rowIndex: 0,\r\n                    allDay: this._isVerticalGroupedWorkSpace() && this.isAllDayPanelVisible\r\n                };\r\n                this.cellsSelectionState.setFocusedCell(cellCoordinates.rowIndex, cellCoordinates.columnIndex, cellCoordinates.allDay);\r\n                this.cellsSelectionState.setSelectedCells(cellCoordinates, cellCoordinates)\r\n            }\r\n            this.updateCellsSelection();\r\n            this._updateSelectedCellDataOption(this.cellsSelectionState.getSelectedCells())\r\n        }\r\n    }\r\n    _focusOutHandler() {\r\n        super._focusOutHandler.apply(this, arguments);\r\n        if (!this._contextMenuHandled && !this._disposed) {\r\n            this.cellsSelectionState.releaseSelectedAndFocusedCells();\r\n            this.viewDataProvider.updateViewData(this.generateRenderOptions());\r\n            this.updateCellsSelection()\r\n        }\r\n    }\r\n    _focusTarget() {\r\n        return this.$element()\r\n    }\r\n    _isVerticalGroupedWorkSpace() {\r\n        return !!this.option(\"groups\").length && \"vertical\" === this.option(\"groupOrientation\")\r\n    }\r\n    _isHorizontalGroupedWorkSpace() {\r\n        return !!this.option(\"groups\").length && \"horizontal\" === this.option(\"groupOrientation\")\r\n    }\r\n    _isWorkSpaceWithCount() {\r\n        return this.option(\"intervalCount\") > 1\r\n    }\r\n    _isWorkspaceWithOddCells() {\r\n        return .5 === this.option(\"hoursInterval\") && !this.isVirtualScrolling()\r\n    }\r\n    _getRealGroupOrientation() {\r\n        return this._isVerticalGroupedWorkSpace() ? \"vertical\" : \"horizontal\"\r\n    }\r\n    createRAllDayPanelElements() {\r\n        this._$allDayPanel = $(\"<div>\");\r\n        this._$allDayTitle = $(\"<div>\").appendTo(this._$headerPanelEmptyCell)\r\n    }\r\n    _dateTableScrollableConfig() {\r\n        var config = {\r\n            useKeyboard: false,\r\n            bounceEnabled: false,\r\n            updateManually: true,\r\n            onScroll: () => {\r\n                var _this$_groupedStrateg;\r\n                null === (_this$_groupedStrateg = this._groupedStrategy.cache) || void 0 === _this$_groupedStrateg ? void 0 : _this$_groupedStrateg.clear()\r\n            }\r\n        };\r\n        if (this._needCreateCrossScrolling()) {\r\n            config = extend(config, this._createCrossScrollingConfig(config))\r\n        }\r\n        if (this.isVirtualScrolling() && (this.virtualScrollingDispatcher.horizontalScrollingAllowed || this.virtualScrollingDispatcher.height)) {\r\n            var currentOnScroll = config.onScroll;\r\n            config = _extends({}, config, {\r\n                onScroll: e => {\r\n                    null === currentOnScroll || void 0 === currentOnScroll ? void 0 : currentOnScroll(e);\r\n                    this.virtualScrollingDispatcher.handleOnScrollEvent(null === e || void 0 === e ? void 0 : e.scrollOffset)\r\n                }\r\n            })\r\n        }\r\n        return config\r\n    }\r\n    _createCrossScrollingConfig(currentConfig) {\r\n        var config = {};\r\n        config.direction = \"both\";\r\n        var currentOnScroll = currentConfig.onScroll;\r\n        config.onScroll = e => {\r\n            currentOnScroll();\r\n            this._dataTableSemaphore.take();\r\n            this._sideBarSemaphore.isFree() && this._sidebarScrollable && this._sidebarScrollable.scrollTo({\r\n                top: e.scrollOffset.top\r\n            });\r\n            this._headerSemaphore.isFree() && this._headerScrollable && this._headerScrollable.scrollTo({\r\n                left: e.scrollOffset.left\r\n            });\r\n            this._dataTableSemaphore.release()\r\n        };\r\n        config.onEnd = () => {\r\n            this.option(\"onScrollEnd\")()\r\n        };\r\n        return config\r\n    }\r\n    _headerScrollableConfig() {\r\n        var config = {\r\n            useKeyboard: false,\r\n            showScrollbar: \"never\",\r\n            direction: \"horizontal\",\r\n            useNative: false,\r\n            updateManually: true,\r\n            bounceEnabled: false,\r\n            onScroll: e => {\r\n                this._headerSemaphore.take();\r\n                this._dataTableSemaphore.isFree() && this._dateTableScrollable.scrollTo({\r\n                    left: e.scrollOffset.left\r\n                });\r\n                this._headerSemaphore.release()\r\n            }\r\n        };\r\n        return config\r\n    }\r\n    _visibilityChanged(visible) {\r\n        this.cache.clear();\r\n        if (visible) {\r\n            this._updateGroupTableHeight()\r\n        }\r\n        if (visible && this._needCreateCrossScrolling()) {\r\n            this._setTableSizes()\r\n        }\r\n    }\r\n    _setTableSizes() {\r\n        this.cache.clear();\r\n        this._attachTableClasses();\r\n        var cellWidth = this.getCellWidth();\r\n        if (cellWidth < this.getCellMinWidth()) {\r\n            cellWidth = this.getCellMinWidth()\r\n        }\r\n        var minWidth = this.getWorkSpaceMinWidth();\r\n        var groupCount = this._getGroupCount();\r\n        var totalCellCount = this._getTotalCellCount(groupCount);\r\n        var width = cellWidth * totalCellCount;\r\n        if (width < minWidth) {\r\n            width = minWidth\r\n        }\r\n        setWidth(this._$headerPanel, width);\r\n        setWidth(this._$dateTable, width);\r\n        if (this._$allDayTable) {\r\n            setWidth(this._$allDayTable, width)\r\n        }\r\n        this._attachHeaderTableClasses();\r\n        this._updateGroupTableHeight();\r\n        this._updateScrollable()\r\n    }\r\n    getWorkSpaceMinWidth() {\r\n        return this._groupedStrategy.getWorkSpaceMinWidth()\r\n    }\r\n    _dimensionChanged() {\r\n        if (this.option(\"crossScrollingEnabled\")) {\r\n            this._setTableSizes()\r\n        }\r\n        this.updateHeaderEmptyCellWidth();\r\n        this._updateScrollable();\r\n        this.cache.clear()\r\n    }\r\n    _needCreateCrossScrolling() {\r\n        return this.option(\"crossScrollingEnabled\")\r\n    }\r\n    _getElementClass() {\r\n        return noop()\r\n    }\r\n    _getRowCount() {\r\n        return this.viewDataProvider.getRowCount({\r\n            intervalCount: this.option(\"intervalCount\"),\r\n            currentDate: this.option(\"currentDate\"),\r\n            viewType: this.type,\r\n            hoursInterval: this.option(\"hoursInterval\"),\r\n            startDayHour: this.option(\"startDayHour\"),\r\n            endDayHour: this.option(\"endDayHour\")\r\n        })\r\n    }\r\n    _getCellCount() {\r\n        return this.viewDataProvider.getCellCount({\r\n            intervalCount: this.option(\"intervalCount\"),\r\n            currentDate: this.option(\"currentDate\"),\r\n            viewType: this.type,\r\n            hoursInterval: this.option(\"hoursInterval\"),\r\n            startDayHour: this.option(\"startDayHour\"),\r\n            endDayHour: this.option(\"endDayHour\")\r\n        })\r\n    }\r\n    isRenovatedRender() {\r\n        return this.renovatedRenderSupported() && this.option(\"renovateRender\")\r\n    }\r\n    _isVirtualModeOn() {\r\n        return \"virtual\" === this.option(\"scrolling.mode\")\r\n    }\r\n    isVirtualScrolling() {\r\n        return this.isRenovatedRender() && this._isVirtualModeOn()\r\n    }\r\n    _initVirtualScrolling() {\r\n        if (this.virtualScrollingDispatcher) {\r\n            this.virtualScrollingDispatcher.dispose();\r\n            this.virtualScrollingDispatcher = null\r\n        }\r\n        this.virtualScrollingDispatcher = new VirtualScrollingDispatcher(this._getVirtualScrollingDispatcherOptions());\r\n        this.virtualScrollingDispatcher.attachScrollableEvents();\r\n        this.renderer = new VirtualScrollingRenderer(this)\r\n    }\r\n    onDataSourceChanged() {}\r\n    isGroupedAllDayPanel() {\r\n        return calculateIsGroupedAllDayPanel(this.option(\"groups\"), this.option(\"groupOrientation\"), this.isAllDayPanelVisible)\r\n    }\r\n    generateRenderOptions(isProvideVirtualCellsWidth) {\r\n        var _this$_getToday;\r\n        var groupCount = this._getGroupCount();\r\n        var groupOrientation = groupCount > 0 ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\r\n        var options = _extends({\r\n            groupByDate: this.option(\"groupByDate\"),\r\n            startRowIndex: 0,\r\n            startCellIndex: 0,\r\n            groupOrientation: groupOrientation,\r\n            today: null === (_this$_getToday = this._getToday) || void 0 === _this$_getToday ? void 0 : _this$_getToday.call(this),\r\n            groups: this.option(\"groups\"),\r\n            isProvideVirtualCellsWidth: isProvideVirtualCellsWidth,\r\n            isAllDayPanelVisible: this.isAllDayPanelVisible,\r\n            selectedCells: this.cellsSelectionState.getSelectedCells(),\r\n            focusedCell: this.cellsSelectionState.focusedCell,\r\n            headerCellTextFormat: this._getFormat(),\r\n            getDateForHeaderText: (_, date) => date,\r\n            startDayHour: this.option(\"startDayHour\"),\r\n            endDayHour: this.option(\"endDayHour\"),\r\n            cellDuration: this.getCellDuration(),\r\n            viewType: this.type,\r\n            intervalCount: this.option(\"intervalCount\"),\r\n            hoursInterval: this.option(\"hoursInterval\"),\r\n            currentDate: this.option(\"currentDate\"),\r\n            startDate: this.option(\"startDate\"),\r\n            firstDayOfWeek: this.option(\"firstDayOfWeek\")\r\n        }, this.virtualScrollingDispatcher.getRenderState());\r\n        return options\r\n    }\r\n    renovatedRenderSupported() {\r\n        return true\r\n    }\r\n    _updateGroupTableHeight() {\r\n        if (this._isVerticalGroupedWorkSpace() && hasWindow()) {\r\n            this._setHorizontalGroupHeaderCellsHeight()\r\n        }\r\n    }\r\n    updateHeaderEmptyCellWidth() {\r\n        if (hasWindow() && this._isRenderHeaderPanelEmptyCell()) {\r\n            var timePanelWidth = this.getTimePanelWidth();\r\n            var groupPanelWidth = this.getGroupTableWidth();\r\n            this._$headerPanelEmptyCell.css(\"width\", timePanelWidth + groupPanelWidth)\r\n        }\r\n    }\r\n    _isGroupsSpecified(resources) {\r\n        return this.option(\"groups\").length && resources\r\n    }\r\n    _getGroupIndexByResourceId(id) {\r\n        var groups = this.option(\"groups\");\r\n        var resourceTree = createResourcesTree(groups);\r\n        if (!resourceTree.length) {\r\n            return 0\r\n        }\r\n        return this._getGroupIndexRecursively(resourceTree, id)\r\n    }\r\n    _getGroupIndexRecursively(resourceTree, id) {\r\n        var currentKey = resourceTree[0].name;\r\n        var currentValue = id[currentKey];\r\n        return resourceTree.reduce((prevIndex, _ref) => {\r\n            var {\r\n                leafIndex: leafIndex,\r\n                value: value,\r\n                children: children\r\n            } = _ref;\r\n            var areValuesEqual = currentValue === value;\r\n            if (areValuesEqual && void 0 !== leafIndex) {\r\n                return leafIndex\r\n            }\r\n            if (areValuesEqual) {\r\n                return this._getGroupIndexRecursively(children, id)\r\n            }\r\n            return prevIndex\r\n        }, 0)\r\n    }\r\n    _getViewStartByOptions() {\r\n        return getViewStartByOptions(this.option(\"startDate\"), this.option(\"currentDate\"), this._getIntervalDuration(), this.option(\"startDate\") ? this._calculateViewStartDate() : void 0)\r\n    }\r\n    _getIntervalDuration() {\r\n        return this.viewDataProvider.getIntervalDuration(this.option(\"intervalCount\"))\r\n    }\r\n    _getHeaderDate() {\r\n        return this.getStartViewDate()\r\n    }\r\n    _calculateViewStartDate() {\r\n        return calculateViewStartDate(this.option(\"startDate\"))\r\n    }\r\n    _firstDayOfWeek() {\r\n        return this.viewDataProvider.getFirstDayOfWeek(this.option(\"firstDayOfWeek\"))\r\n    }\r\n    _attachEvents() {\r\n        this._createSelectionChangedAction();\r\n        this._attachClickEvent();\r\n        this._attachContextMenuEvent()\r\n    }\r\n    _attachClickEvent() {\r\n        var that = this;\r\n        var pointerDownAction = this._createAction((function(e) {\r\n            that._pointerDownHandler(e.event)\r\n        }));\r\n        this._createCellClickAction();\r\n        var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\r\n        var $element = this.$element();\r\n        eventsEngine.off($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME);\r\n        eventsEngine.off($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME);\r\n        eventsEngine.on($element, SCHEDULER_WORKSPACE_DXPOINTERDOWN_EVENT_NAME, (function(e) {\r\n            if (isMouseEvent(e) && e.which > 1) {\r\n                e.preventDefault();\r\n                return\r\n            }\r\n            pointerDownAction({\r\n                event: e\r\n            })\r\n        }));\r\n        eventsEngine.on($element, SCHEDULER_CELL_DXCLICK_EVENT_NAME, cellSelector, (function(e) {\r\n            var $cell = $(e.target);\r\n            that._cellClickAction({\r\n                event: e,\r\n                cellElement: getPublicElement($cell),\r\n                cellData: that.getCellData($cell)\r\n            })\r\n        }))\r\n    }\r\n    _createCellClickAction() {\r\n        this._cellClickAction = this._createActionByOption(\"onCellClick\", {\r\n            afterExecute: e => this._cellClickHandler(e.args[0].event)\r\n        })\r\n    }\r\n    _createSelectionChangedAction() {\r\n        this._selectionChangedAction = this._createActionByOption(\"onSelectionChanged\")\r\n    }\r\n    _cellClickHandler() {\r\n        if (this._showPopup) {\r\n            delete this._showPopup;\r\n            this._handleSelectedCellsClick()\r\n        }\r\n    }\r\n    _pointerDownHandler(e) {\r\n        var $target = $(e.target);\r\n        if (!$target.hasClass(DATE_TABLE_CELL_CLASS) && !$target.hasClass(ALL_DAY_TABLE_CELL_CLASS)) {\r\n            this._isCellClick = false;\r\n            return\r\n        }\r\n        this._isCellClick = true;\r\n        if ($target.hasClass(DATE_TABLE_FOCUSED_CELL_CLASS)) {\r\n            this._showPopup = true\r\n        } else {\r\n            var cellCoordinates = this._getCoordinatesByCell($target);\r\n            var isAllDayCell = this._hasAllDayClass($target);\r\n            this._setSelectedCellsStateAndUpdateSelection(isAllDayCell, cellCoordinates, false, $target)\r\n        }\r\n    }\r\n    _handleSelectedCellsClick() {\r\n        var selectedCells = this.cellsSelectionState.getSelectedCells();\r\n        var firstCellData = selectedCells[0];\r\n        var lastCellData = selectedCells[selectedCells.length - 1];\r\n        var result = {\r\n            startDate: firstCellData.startDate,\r\n            endDate: lastCellData.endDate\r\n        };\r\n        if (void 0 !== lastCellData.allDay) {\r\n            result.allDay = lastCellData.allDay\r\n        }\r\n        this.option(\"onSelectedCellsClick\")(result, lastCellData.groups)\r\n    }\r\n    _attachContextMenuEvent() {\r\n        this._createContextMenuAction();\r\n        var cellSelector = \".\" + DATE_TABLE_CELL_CLASS + \",.\" + ALL_DAY_TABLE_CELL_CLASS;\r\n        var $element = this.$element();\r\n        var eventName = addNamespace(contextMenuEventName, this.NAME);\r\n        eventsEngine.off($element, eventName, cellSelector);\r\n        eventsEngine.on($element, eventName, cellSelector, this._contextMenuHandler.bind(this))\r\n    }\r\n    _contextMenuHandler(e) {\r\n        var $cell = $(e.target);\r\n        this._contextMenuAction({\r\n            event: e,\r\n            cellElement: getPublicElement($cell),\r\n            cellData: this.getCellData($cell)\r\n        });\r\n        this._contextMenuHandled = true\r\n    }\r\n    _createContextMenuAction() {\r\n        this._contextMenuAction = this._createActionByOption(\"onCellContextMenu\")\r\n    }\r\n    _getGroupHeaderContainer() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            return this._$groupTable\r\n        }\r\n        return this._$thead\r\n    }\r\n    _getDateHeaderContainer() {\r\n        return this._$thead\r\n    }\r\n    _getCalculateHeaderCellRepeatCount() {\r\n        return this._groupedStrategy.calculateHeaderCellRepeatCount()\r\n    }\r\n    _updateScrollable() {\r\n        this._dateTableScrollable.update();\r\n        this._headerScrollable && this._headerScrollable.update();\r\n        this._sidebarScrollable && this._sidebarScrollable.update()\r\n    }\r\n    _getTimePanelRowCount() {\r\n        return this._getCellCountInDay()\r\n    }\r\n    _getCellCountInDay() {\r\n        var hoursInterval = this.option(\"hoursInterval\");\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        var endDayHour = this.option(\"endDayHour\");\r\n        return this.viewDataProvider.getCellCountInDay(startDayHour, endDayHour, hoursInterval)\r\n    }\r\n    _getTotalCellCount(groupCount) {\r\n        return this._groupedStrategy.getTotalCellCount(groupCount)\r\n    }\r\n    _getTotalRowCount(groupCount, includeAllDayPanelRows) {\r\n        var result = this._groupedStrategy.getTotalRowCount(groupCount);\r\n        if (includeAllDayPanelRows && this.isAllDayPanelVisible) {\r\n            result += groupCount\r\n        }\r\n        return result\r\n    }\r\n    _getGroupIndex(rowIndex, columnIndex) {\r\n        return this._groupedStrategy.getGroupIndex(rowIndex, columnIndex)\r\n    }\r\n    calculateEndDate(startDate) {\r\n        var viewDataGenerator = this.viewDataProvider.viewDataGenerator;\r\n        return viewDataGenerator.calculateEndDate(startDate, viewDataGenerator.getInterval(this.option(\"hoursInterval\")), this.option(\"endDayHour\"))\r\n    }\r\n    _getGroupCount() {\r\n        return getGroupCount(this.option(\"groups\"))\r\n    }\r\n    _attachTablesEvents() {\r\n        var element = this.$element();\r\n        this._attachDragEvents(element);\r\n        this._attachPointerEvents(element)\r\n    }\r\n    _detachDragEvents(element) {\r\n        eventsEngine.off(element, DragEventNames.ENTER);\r\n        eventsEngine.off(element, DragEventNames.LEAVE);\r\n        eventsEngine.off(element, DragEventNames.DROP)\r\n    }\r\n    _attachDragEvents(element) {\r\n        this._detachDragEvents(element);\r\n        eventsEngine.on(element, DragEventNames.ENTER, DRAG_AND_DROP_SELECTOR, {\r\n            checkDropTarget: (target, event) => !this._isOutsideScrollable(target, event)\r\n        }, e => {\r\n            this.removeDroppableCellClass();\r\n            $(e.target).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n        });\r\n        eventsEngine.on(element, DragEventNames.LEAVE, () => this.removeDroppableCellClass());\r\n        eventsEngine.on(element, DragEventNames.DROP, DRAG_AND_DROP_SELECTOR, () => this.removeDroppableCellClass())\r\n    }\r\n    _attachPointerEvents(element) {\r\n        var isPointerDown = false;\r\n        eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME);\r\n        eventsEngine.off(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME);\r\n        eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERDOWN_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\r\n            if (isMouseEvent(e) && 1 === e.which) {\r\n                isPointerDown = true;\r\n                this.$element().addClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS);\r\n                eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\r\n                eventsEngine.on(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME, () => {\r\n                    isPointerDown = false;\r\n                    this.$element().removeClass(WORKSPACE_WITH_MOUSE_SELECTION_CLASS)\r\n                })\r\n            }\r\n        });\r\n        eventsEngine.on(element, SCHEDULER_CELL_DXPOINTERMOVE_EVENT_NAME, DRAG_AND_DROP_SELECTOR, e => {\r\n            if (isPointerDown && this._dateTableScrollable && !this._dateTableScrollable.option(\"scrollByContent\")) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this._moveToCell($(e.target), true)\r\n            }\r\n        })\r\n    }\r\n    _getFormat() {\r\n        return abstract()\r\n    }\r\n    getWorkArea() {\r\n        return this._$dateTableContainer\r\n    }\r\n    getScrollable() {\r\n        return this._dateTableScrollable\r\n    }\r\n    getScrollableScrollTop() {\r\n        return this._dateTableScrollable.scrollTop()\r\n    }\r\n    getGroupedScrollableScrollTop(allDay) {\r\n        return this._groupedStrategy.getScrollableScrollTop(allDay)\r\n    }\r\n    getScrollableScrollLeft() {\r\n        return this._dateTableScrollable.scrollLeft()\r\n    }\r\n    getScrollableOuterWidth() {\r\n        return this._dateTableScrollable.scrollWidth()\r\n    }\r\n    getScrollableContainer() {\r\n        return $(this._dateTableScrollable.container())\r\n    }\r\n    getHeaderPanelHeight() {\r\n        return this._$headerPanel && getOuterHeight(this._$headerPanel, true)\r\n    }\r\n    getTimePanelWidth() {\r\n        return this._$timePanel && getBoundingRect(this._$timePanel.get(0)).width\r\n    }\r\n    getGroupTableWidth() {\r\n        return this._$groupTable ? getOuterWidth(this._$groupTable) : 0\r\n    }\r\n    getWorkSpaceLeftOffset() {\r\n        return this._groupedStrategy.getLeftOffset()\r\n    }\r\n    _getCellCoordinatesByIndex(index) {\r\n        var columnIndex = Math.floor(index / this._getRowCount());\r\n        var rowIndex = index - this._getRowCount() * columnIndex;\r\n        return {\r\n            columnIndex: columnIndex,\r\n            rowIndex: rowIndex\r\n        }\r\n    }\r\n    _getDateGenerationOptions() {\r\n        var _this$viewDataProvide;\r\n        return {\r\n            startDayHour: this.option(\"startDayHour\"),\r\n            endDayHour: this.option(\"endDayHour\"),\r\n            isWorkView: this.viewDataProvider.viewDataGenerator.isWorkView,\r\n            interval: null === (_this$viewDataProvide = this.viewDataProvider.viewDataGenerator) || void 0 === _this$viewDataProvide ? void 0 : _this$viewDataProvide.getInterval(this.option(\"hoursInterval\")),\r\n            startViewDate: this.getStartViewDate(),\r\n            firstDayOfWeek: this._firstDayOfWeek()\r\n        }\r\n    }\r\n    _getIntervalBetween(currentDate, allDay) {\r\n        var firstViewDate = this.getStartViewDate();\r\n        var startDayTime = this.option(\"startDayHour\") * HOUR_MS;\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        var fullInterval = currentDate.getTime() - firstViewDate.getTime() - timeZoneOffset;\r\n        var days = this._getDaysOfInterval(fullInterval, startDayTime);\r\n        var weekendsCount = this._getWeekendsCount(days);\r\n        var result = (days - weekendsCount) * DAY_MS;\r\n        if (!allDay) {\r\n            var hiddenInterval = this.viewDataProvider.hiddenInterval;\r\n            var visibleDayDuration = this.getVisibleDayDuration();\r\n            result = fullInterval - days * hiddenInterval - weekendsCount * visibleDayDuration\r\n        }\r\n        return result\r\n    }\r\n    _getWeekendsCount() {\r\n        return 0\r\n    }\r\n    _getDaysOfInterval(fullInterval, startDayTime) {\r\n        return Math.floor((fullInterval + startDayTime) / DAY_MS)\r\n    }\r\n    _updateIndex(index) {\r\n        return index * this._getRowCount()\r\n    }\r\n    _getDroppableCell() {\r\n        return this._getDateTables().find(\".\" + DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n    }\r\n    _getWorkSpaceWidth() {\r\n        return this.cache.get(\"workspaceWidth\", () => {\r\n            if (this._needCreateCrossScrolling()) {\r\n                return getBoundingRect(this._$dateTable.get(0)).width\r\n            }\r\n            var totalWidth = getBoundingRect(this.$element().get(0)).width;\r\n            var timePanelWidth = this.getTimePanelWidth();\r\n            var groupTableWidth = this.getGroupTableWidth();\r\n            return totalWidth - timePanelWidth - groupTableWidth\r\n        })\r\n    }\r\n    _getCellByCoordinates(cellCoordinates, groupIndex, inAllDayRow) {\r\n        var indexes = this._groupedStrategy.prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow);\r\n        return this._dom_getDateCell(indexes)\r\n    }\r\n    _dom_getDateCell(position) {\r\n        return this._$dateTable.find(\"tr:not(.\".concat(VIRTUAL_ROW_CLASS, \")\")).eq(position.rowIndex).find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\")).eq(position.columnIndex)\r\n    }\r\n    _dom_getAllDayPanelCell(columnIndex) {\r\n        return this._$allDayPanel.find(\"tr\").eq(0).find(\"td\").eq(columnIndex)\r\n    }\r\n    _getCells(allDay, direction) {\r\n        var cellClass = allDay ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\r\n        if (\"vertical\" === direction) {\r\n            var result = [];\r\n            for (var i = 1;; i++) {\r\n                var cells = this.$element().find(\"tr .\".concat(cellClass, \":nth-child(\").concat(i, \")\"));\r\n                if (!cells.length) {\r\n                    break\r\n                }\r\n                result = result.concat(cells.toArray())\r\n            }\r\n            return $(result)\r\n        } else {\r\n            return this.$element().find(\".\" + cellClass)\r\n        }\r\n    }\r\n    _getAllCells(allDay) {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            return this._$dateTable.find(\"td:not(.\".concat(VIRTUAL_CELL_CLASS, \")\"))\r\n        }\r\n        var cellClass = allDay && this.supportAllDayRow() ? ALL_DAY_TABLE_CELL_CLASS : DATE_TABLE_CELL_CLASS;\r\n        return this.$element().find(\".\".concat(cellClass))\r\n    }\r\n    _setHorizontalGroupHeaderCellsHeight() {\r\n        var height = getBoundingRect(this._$dateTable.get(0)).height;\r\n        setOuterHeight(this._$groupTable, height)\r\n    }\r\n    _getGroupHeaderCells() {\r\n        return this.$element().find(\".\" + GROUP_HEADER_CLASS)\r\n    }\r\n    _getScrollCoordinates(hours, minutes, date, groupIndex, allDay) {\r\n        var currentDate = date || new Date(this.option(\"currentDate\"));\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        var endDayHour = this.option(\"endDayHour\");\r\n        if (hours < startDayHour) {\r\n            hours = startDayHour\r\n        }\r\n        if (hours >= endDayHour) {\r\n            hours = endDayHour - 1\r\n        }\r\n        currentDate.setHours(hours, minutes, 0, 0);\r\n        var cell = this.viewDataProvider.findGlobalCellPosition(currentDate, groupIndex, allDay);\r\n        var {\r\n            position: position,\r\n            cellData: cellData\r\n        } = cell;\r\n        return this.virtualScrollingDispatcher.calculateCoordinatesByDataAndPosition(cellData, position, currentDate, isDateAndTimeView(this.type), \"vertical\" === this.viewDirection)\r\n    }\r\n    _isOutsideScrollable(target, event) {\r\n        var $dateTableScrollableElement = this._dateTableScrollable.$element();\r\n        var scrollableSize = getBoundingRect($dateTableScrollableElement.get(0));\r\n        var window = getWindow();\r\n        var isTargetInAllDayPanel = !$(target).closest($dateTableScrollableElement).length;\r\n        var isOutsideHorizontalScrollable = event.pageX < scrollableSize.left || event.pageX > scrollableSize.left + scrollableSize.width + (window.scrollX || 0);\r\n        var isOutsideVerticalScrollable = event.pageY < scrollableSize.top || event.pageY > scrollableSize.top + scrollableSize.height + (window.scrollY || 0);\r\n        if (isTargetInAllDayPanel && !isOutsideHorizontalScrollable) {\r\n            return false\r\n        }\r\n        return isOutsideVerticalScrollable || isOutsideHorizontalScrollable\r\n    }\r\n    setCellDataCache(cellCoordinates, groupIndex, $cell) {\r\n        var key = JSON.stringify({\r\n            rowIndex: cellCoordinates.rowIndex,\r\n            columnIndex: cellCoordinates.columnIndex,\r\n            groupIndex: groupIndex\r\n        });\r\n        this.cache.set(key, this.getCellData($cell))\r\n    }\r\n    setCellDataCacheAlias(appointment, geometry) {\r\n        var key = JSON.stringify({\r\n            rowIndex: appointment.rowIndex,\r\n            columnIndex: appointment.columnIndex,\r\n            groupIndex: appointment.groupIndex\r\n        });\r\n        var aliasKey = JSON.stringify({\r\n            top: geometry.top,\r\n            left: geometry.left\r\n        });\r\n        this.cache.set(aliasKey, this.cache.get(key))\r\n    }\r\n    supportAllDayRow() {\r\n        return true\r\n    }\r\n    keepOriginalHours() {\r\n        return false\r\n    }\r\n    _filterCellDataFields(cellData) {\r\n        return extend(true, {}, {\r\n            startDate: cellData.startDate,\r\n            endDate: cellData.endDate,\r\n            groups: cellData.groups,\r\n            groupIndex: cellData.groupIndex,\r\n            allDay: cellData.allDay\r\n        })\r\n    }\r\n    getCellData($cell) {\r\n        var cellData = this._getFullCellData($cell) || {};\r\n        return this._filterCellDataFields(cellData)\r\n    }\r\n    _getFullCellData($cell) {\r\n        var currentCell = $cell[0];\r\n        if (currentCell) {\r\n            return this._getDataByCell($cell)\r\n        }\r\n        return\r\n    }\r\n    _getVirtualRowOffset() {\r\n        return this.virtualScrollingDispatcher.virtualRowOffset\r\n    }\r\n    _getVirtualCellOffset() {\r\n        return this.virtualScrollingDispatcher.virtualCellOffset\r\n    }\r\n    _getDataByCell($cell) {\r\n        var rowIndex = $cell.parent().index() - this.virtualScrollingDispatcher.topVirtualRowsCount;\r\n        var columnIndex = $cell.index() - this.virtualScrollingDispatcher.leftVirtualCellsCount;\r\n        var {\r\n            viewDataProvider: viewDataProvider\r\n        } = this;\r\n        var isAllDayCell = this._hasAllDayClass($cell);\r\n        var cellData = viewDataProvider.getCellData(rowIndex, columnIndex, isAllDayCell);\r\n        return cellData ? cellData : void 0\r\n    }\r\n    isGroupedByDate() {\r\n        return this.option(\"groupByDate\") && this._isHorizontalGroupedWorkSpace() && this._getGroupCount() > 0\r\n    }\r\n    getCellIndexByDate(date, inAllDayRow) {\r\n        var viewDataGenerator = this.viewDataProvider.viewDataGenerator;\r\n        var timeInterval = inAllDayRow ? 864e5 : viewDataGenerator.getInterval(this.option(\"hoursInterval\"));\r\n        var startViewDateOffset = getStartViewDateTimeOffset(this.getStartViewDate(), this.option(\"startDayHour\"));\r\n        var dateTimeStamp = this._getIntervalBetween(date, inAllDayRow) + startViewDateOffset;\r\n        var index = Math.floor(dateTimeStamp / timeInterval);\r\n        if (inAllDayRow) {\r\n            index = this._updateIndex(index)\r\n        }\r\n        if (index < 0) {\r\n            index = 0\r\n        }\r\n        return index\r\n    }\r\n    getDroppableCellIndex() {\r\n        var $droppableCell = this._getDroppableCell();\r\n        var $row = $droppableCell.parent();\r\n        var rowIndex = $row.index();\r\n        return rowIndex * $row.find(\"td\").length + $droppableCell.index()\r\n    }\r\n    getDataByDroppableCell() {\r\n        var cellData = this.getCellData($(this._getDroppableCell()));\r\n        var allDay = cellData.allDay;\r\n        var startDate = cellData.startDate;\r\n        var endDate = cellData.endDate;\r\n        return {\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            allDay: allDay,\r\n            groups: cellData.groups\r\n        }\r\n    }\r\n    getDateRange() {\r\n        return [this.getStartViewDate(), this.getEndViewDateByEndDayHour()]\r\n    }\r\n    getCellMinWidth() {\r\n        return DATE_TABLE_MIN_CELL_WIDTH\r\n    }\r\n    getRoundedCellWidth(groupIndex, startIndex, cellCount) {\r\n        if (groupIndex < 0 || !hasWindow()) {\r\n            return 0\r\n        }\r\n        var $row = this.$element().find(\".\".concat(DATE_TABLE_ROW_CLASS)).eq(0);\r\n        var width = 0;\r\n        var $cells = $row.find(\".\" + DATE_TABLE_CELL_CLASS);\r\n        var totalCellCount = this._getCellCount() * groupIndex;\r\n        cellCount = cellCount || this._getCellCount();\r\n        if (!isDefined(startIndex)) {\r\n            startIndex = totalCellCount\r\n        }\r\n        for (var i = startIndex; i < totalCellCount + cellCount; i++) {\r\n            var element = $($cells).eq(i).get(0);\r\n            var elementWidth = element ? getBoundingRect(element).width : 0;\r\n            width += elementWidth\r\n        }\r\n        return width / (totalCellCount + cellCount - startIndex)\r\n    }\r\n    getCellWidth() {\r\n        return getCellWidth(this.getDOMElementsMetaData())\r\n    }\r\n    getCellHeight() {\r\n        return getCellHeight(this.getDOMElementsMetaData())\r\n    }\r\n    getAllDayHeight() {\r\n        return getAllDayHeight(this.option(\"showAllDayPanel\"), this._isVerticalGroupedWorkSpace(), this.getDOMElementsMetaData())\r\n    }\r\n    getMaxAllowedPosition(groupIndex) {\r\n        return getMaxAllowedPosition(groupIndex, this.viewDataProvider, this.option(\"rtlEnabled\"), this.getDOMElementsMetaData())\r\n    }\r\n    getAllDayOffset() {\r\n        return this._groupedStrategy.getAllDayOffset()\r\n    }\r\n    getCellIndexByCoordinates(coordinates, allDay) {\r\n        var cellCount = this._getTotalCellCount(this._getGroupCount());\r\n        var cellWidth = Math.floor(this._getWorkSpaceWidth() / cellCount);\r\n        var cellHeight = allDay ? this.getAllDayHeight() : this.getCellHeight();\r\n        var topIndex = Math.floor(Math.floor(coordinates.top) / Math.floor(cellHeight));\r\n        var leftIndex = Math.floor((coordinates.left + 5) / cellWidth);\r\n        if (this._isRTL()) {\r\n            leftIndex = cellCount - leftIndex - 1\r\n        }\r\n        return cellCount * topIndex + leftIndex\r\n    }\r\n    getStartViewDate() {\r\n        return this.viewDataProvider.getStartViewDate()\r\n    }\r\n    getEndViewDate() {\r\n        return this.viewDataProvider.getLastCellEndDate()\r\n    }\r\n    getEndViewDateByEndDayHour() {\r\n        return this.viewDataProvider.getLastViewDateByEndDayHour(this.option(\"endDayHour\"))\r\n    }\r\n    getCellDuration() {\r\n        return getCellDuration(this.type, this.option(\"startDayHour\"), this.option(\"endDayHour\"), this.option(\"hoursInterval\"))\r\n    }\r\n    getIntervalDuration(allDay) {\r\n        return allDay ? toMs(\"day\") : this.getCellDuration()\r\n    }\r\n    getVisibleDayDuration() {\r\n        var startDayHour = this.option(\"startDayHour\");\r\n        var endDayHour = this.option(\"endDayHour\");\r\n        var hoursInterval = this.option(\"hoursInterval\");\r\n        return this.viewDataProvider.getVisibleDayDuration(startDayHour, endDayHour, hoursInterval)\r\n    }\r\n    getGroupBounds(coordinates) {\r\n        var cellCount = this._getCellCount();\r\n        var $cells = this._getCells();\r\n        var cellWidth = this.getCellWidth();\r\n        var groupedDataMap = this.viewDataProvider.groupedDataMap;\r\n        var result = this._groupedStrategy.getGroupBoundsOffset(cellCount, $cells, cellWidth, coordinates, groupedDataMap);\r\n        if (this._isRTL()) {\r\n            var startOffset = result.left;\r\n            result.left = result.right - 2 * cellWidth;\r\n            result.right = startOffset + 2 * cellWidth\r\n        }\r\n        return result\r\n    }\r\n    needRecalculateResizableArea() {\r\n        return this._isVerticalGroupedWorkSpace() && 0 !== this.getScrollable().scrollTop()\r\n    }\r\n    getCellDataByCoordinates(coordinates, allDay) {\r\n        var key = JSON.stringify({\r\n            top: coordinates.top,\r\n            left: coordinates.left\r\n        });\r\n        return this.cache.get(key, () => {\r\n            var $cells = this._getCells(allDay);\r\n            var cellIndex = this.getCellIndexByCoordinates(coordinates, allDay);\r\n            var $cell = $cells.eq(cellIndex);\r\n            return this.getCellData($cell)\r\n        })\r\n    }\r\n    getVisibleBounds() {\r\n        var result = {};\r\n        var $scrollable = this.getScrollable().$element();\r\n        var cellHeight = this.getCellHeight();\r\n        var scrolledCellCount = this.getScrollableScrollTop() / cellHeight;\r\n        var totalCellCount = scrolledCellCount + getHeight($scrollable) / cellHeight;\r\n        result.top = {\r\n            hours: Math.floor(scrolledCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\r\n            minutes: scrolledCellCount % 2 ? 30 : 0\r\n        };\r\n        result.bottom = {\r\n            hours: Math.floor(totalCellCount * this.option(\"hoursInterval\")) + this.option(\"startDayHour\"),\r\n            minutes: Math.floor(totalCellCount) % 2 ? 30 : 0\r\n        };\r\n        return result\r\n    }\r\n    updateScrollPosition(date, groups) {\r\n        var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\r\n        var newDate = this.timeZoneCalculator.createDate(date, {\r\n            path: \"toGrid\"\r\n        });\r\n        var inAllDayRow = allDay && this.isAllDayPanelVisible;\r\n        if (this.needUpdateScrollPosition(newDate, groups, inAllDayRow)) {\r\n            this.scrollTo(newDate, groups, inAllDayRow, false)\r\n        }\r\n    }\r\n    needUpdateScrollPosition(date, groups, inAllDayRow) {\r\n        var cells = this._getCellsInViewport(inAllDayRow);\r\n        var groupIndex = this._isGroupsSpecified(groups) ? this._getGroupIndexByResourceId(groups) : 0;\r\n        var time = date.getTime();\r\n        var trimmedTime = dateUtils.trimTime(date).getTime();\r\n        return cells.reduce((currentResult, cell) => {\r\n            var {\r\n                startDate: cellStartDate,\r\n                endDate: cellEndDate,\r\n                groupIndex: cellGroupIndex\r\n            } = this.getCellData(cell);\r\n            var cellStartTime = cellStartDate.getTime();\r\n            var cellEndTime = cellEndDate.getTime();\r\n            if ((!inAllDayRow && cellStartTime <= time && time < cellEndTime || inAllDayRow && trimmedTime === cellStartTime) && groupIndex === cellGroupIndex) {\r\n                return false\r\n            }\r\n            return currentResult\r\n        }, true)\r\n    }\r\n    _getCellsInViewport(inAllDayRow) {\r\n        var $scrollable = this.getScrollable().$element();\r\n        var cellHeight = this.getCellHeight();\r\n        var cellWidth = this.getCellWidth();\r\n        var totalColumnCount = this._getTotalCellCount(this._getGroupCount());\r\n        var scrollableScrollTop = this.getScrollableScrollTop();\r\n        var scrollableScrollLeft = this.getScrollableScrollLeft();\r\n        var fullScrolledRowCount = scrollableScrollTop / cellHeight - this.virtualScrollingDispatcher.topVirtualRowsCount;\r\n        var scrolledRowCount = Math.floor(fullScrolledRowCount);\r\n        if (scrollableScrollTop % cellHeight !== 0) {\r\n            scrolledRowCount += 1\r\n        }\r\n        var fullScrolledColumnCount = scrollableScrollLeft / cellWidth;\r\n        var scrolledColumnCount = Math.floor(fullScrolledColumnCount);\r\n        if (scrollableScrollLeft % cellWidth !== 0) {\r\n            scrolledColumnCount += 1\r\n        }\r\n        var rowCount = Math.floor(fullScrolledRowCount + getHeight($scrollable) / cellHeight);\r\n        var columnCount = Math.floor(fullScrolledColumnCount + getWidth($scrollable) / cellWidth);\r\n        var $cells = this._getAllCells(inAllDayRow);\r\n        var result = [];\r\n        $cells.each((function(index) {\r\n            var $cell = $(this);\r\n            var columnIndex = index % totalColumnCount;\r\n            var rowIndex = index / totalColumnCount;\r\n            if (scrolledColumnCount <= columnIndex && columnIndex < columnCount && scrolledRowCount <= rowIndex && rowIndex < rowCount) {\r\n                result.push($cell)\r\n            }\r\n        }));\r\n        return result\r\n    }\r\n    scrollToTime(hours, minutes, date) {\r\n        if (!this._isValidScrollDate(date)) {\r\n            return\r\n        }\r\n        var coordinates = this._getScrollCoordinates(hours, minutes, date);\r\n        var scrollable = this.getScrollable();\r\n        scrollable.scrollBy({\r\n            top: coordinates.top - scrollable.scrollTop(),\r\n            left: 0\r\n        })\r\n    }\r\n    scrollTo(date, groups) {\r\n        var allDay = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;\r\n        var throwWarning = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : true;\r\n        if (!this._isValidScrollDate(date, throwWarning)) {\r\n            return\r\n        }\r\n        var groupIndex = this._getGroupCount() && groups ? this._getGroupIndexByResourceId(groups) : 0;\r\n        var isScrollToAllDay = allDay && this.isAllDayPanelVisible;\r\n        var coordinates = this._getScrollCoordinates(date.getHours(), date.getMinutes(), date, groupIndex, isScrollToAllDay);\r\n        var scrollable = this.getScrollable();\r\n        var $scrollable = scrollable.$element();\r\n        var cellWidth = this.getCellWidth();\r\n        var offset = this.option(\"rtlEnabled\") ? cellWidth : 0;\r\n        var scrollableHeight = getHeight($scrollable);\r\n        var scrollableWidth = getWidth($scrollable);\r\n        var cellHeight = this.getCellHeight();\r\n        var xShift = (scrollableWidth - cellWidth) / 2;\r\n        var yShift = (scrollableHeight - cellHeight) / 2;\r\n        var left = coordinates.left - scrollable.scrollLeft() - xShift - offset;\r\n        var top = coordinates.top - scrollable.scrollTop() - yShift;\r\n        if (isScrollToAllDay && !this._isVerticalGroupedWorkSpace()) {\r\n            top = 0\r\n        }\r\n        if (this.option(\"templatesRenderAsynchronously\")) {\r\n            setTimeout(() => {\r\n                scrollable.scrollBy({\r\n                    left: left,\r\n                    top: top\r\n                })\r\n            })\r\n        } else {\r\n            scrollable.scrollBy({\r\n                left: left,\r\n                top: top\r\n            })\r\n        }\r\n    }\r\n    _isValidScrollDate(date) {\r\n        var throwWarning = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : true;\r\n        var min = this.getStartViewDate();\r\n        var max = this.getEndViewDate();\r\n        if (date < min || date > max) {\r\n            throwWarning && errors.log(\"W1008\", date);\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n    needApplyCollectorOffset() {\r\n        return false\r\n    }\r\n    removeDroppableCellClass($cellElement) {\r\n        ($cellElement || this._getDroppableCell()).removeClass(DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n    }\r\n    _getCoordinatesByCell($cell) {\r\n        var columnIndex = $cell.index() - this.virtualScrollingDispatcher.leftVirtualCellsCount;\r\n        var rowIndex = $cell.parent().index();\r\n        var isAllDayCell = this._hasAllDayClass($cell);\r\n        var isVerticalGrouping = this._isVerticalGroupedWorkSpace();\r\n        if (!(isAllDayCell && !isVerticalGrouping)) {\r\n            rowIndex -= this.virtualScrollingDispatcher.topVirtualRowsCount\r\n        }\r\n        return {\r\n            rowIndex: rowIndex,\r\n            columnIndex: columnIndex\r\n        }\r\n    }\r\n    _isShowAllDayPanel() {\r\n        return this.option(\"showAllDayPanel\")\r\n    }\r\n    _getTimePanelCells() {\r\n        return this.$element().find(\".\".concat(TIME_PANEL_CELL_CLASS))\r\n    }\r\n    _getRDateTableProps() {\r\n        return {\r\n            viewData: this.viewDataProvider.viewData,\r\n            dataCellTemplate: this.option(\"dataCellTemplate\"),\r\n            addDateTableClass: !this.option(\"crossScrollingEnabled\") || this.isVirtualScrolling(),\r\n            groupOrientation: this.option(\"groupOrientation\"),\r\n            addVerticalSizesClassToRows: false\r\n        }\r\n    }\r\n    _updateSelectedCellDataOption(selectedCellData) {\r\n        var correctedSelectedCellData = selectedCellData.map(_ref2 => {\r\n            var {\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                allDay: allDay,\r\n                groupIndex: groupIndex,\r\n                groups: groups\r\n            } = _ref2;\r\n            return {\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                allDay: allDay,\r\n                groupIndex: groupIndex,\r\n                groups: groups\r\n            }\r\n        });\r\n        this.option(\"selectedCellData\", correctedSelectedCellData);\r\n        this._selectionChangedAction({\r\n            selectedCellData: correctedSelectedCellData\r\n        })\r\n    }\r\n    _getCellByData(cellData) {\r\n        var {\r\n            startDate: startDate,\r\n            groupIndex: groupIndex,\r\n            allDay: allDay,\r\n            index: index\r\n        } = cellData;\r\n        var position = this.viewDataProvider.findCellPositionInMap({\r\n            startDate: startDate,\r\n            groupIndex: groupIndex,\r\n            isAllDay: allDay,\r\n            index: index\r\n        });\r\n        if (!position) {\r\n            return\r\n        }\r\n        return allDay && !this._isVerticalGroupedWorkSpace() ? this._dom_getAllDayPanelCell(position.columnIndex) : this._dom_getDateCell(position)\r\n    }\r\n    getDOMElementsMetaData() {\r\n        return this.cache.get(\"cellElementsMeta\", () => ({\r\n            dateTableCellsMeta: this._getDateTableDOMElementsInfo(),\r\n            allDayPanelCellsMeta: this._getAllDayPanelDOMElementsInfo()\r\n        }))\r\n    }\r\n    _getDateTableDOMElementsInfo() {\r\n        var dateTableCells = this._getAllCells(false);\r\n        if (!dateTableCells.length || !hasWindow()) {\r\n            return [\r\n                [{}]\r\n            ]\r\n        }\r\n        var dateTable = this._getDateTable();\r\n        var dateTableRect = getBoundingRect(dateTable.get(0));\r\n        var columnsCount = this.viewDataProvider.getColumnsCount();\r\n        var result = [];\r\n        dateTableCells.each((index, cell) => {\r\n            var rowIndex = Math.floor(index / columnsCount);\r\n            if (result.length === rowIndex) {\r\n                result.push([])\r\n            }\r\n            this._addCellMetaData(result[rowIndex], cell, dateTableRect)\r\n        });\r\n        return result\r\n    }\r\n    _getAllDayPanelDOMElementsInfo() {\r\n        var result = [];\r\n        if (this.isAllDayPanelVisible && !this._isVerticalGroupedWorkSpace() && hasWindow()) {\r\n            var allDayCells = this._getAllCells(true);\r\n            if (!allDayCells.length) {\r\n                return [{}]\r\n            }\r\n            var allDayAppointmentContainer = this._$allDayPanel;\r\n            var allDayPanelRect = getBoundingRect(allDayAppointmentContainer.get(0));\r\n            allDayCells.each((_, cell) => {\r\n                this._addCellMetaData(result, cell, allDayPanelRect)\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    _addCellMetaData(cellMetaDataArray, cell, parentRect) {\r\n        var cellRect = getBoundingRect(cell);\r\n        cellMetaDataArray.push({\r\n            left: cellRect.left - parentRect.left,\r\n            top: cellRect.top - parentRect.top,\r\n            width: cellRect.width,\r\n            height: cellRect.height\r\n        })\r\n    }\r\n    _oldRender_getAllDayCellData(groupIndex) {\r\n        return (cell, rowIndex, columnIndex) => {\r\n            var validColumnIndex = columnIndex % this._getCellCount();\r\n            var options = this._getDateGenerationOptions(true);\r\n            var startDate = this.viewDataProvider.viewDataGenerator.getDateByCellIndices(options, rowIndex, validColumnIndex, this._getCellCountInDay());\r\n            startDate = dateUtils.trimTime(startDate);\r\n            var validGroupIndex = groupIndex || 0;\r\n            if (this.isGroupedByDate()) {\r\n                validGroupIndex = Math.floor(columnIndex % this._getGroupCount())\r\n            } else if (this._isHorizontalGroupedWorkSpace()) {\r\n                validGroupIndex = Math.floor(columnIndex / this._getCellCount())\r\n            }\r\n            var data = {\r\n                startDate: startDate,\r\n                endDate: startDate,\r\n                allDay: true,\r\n                groupIndex: validGroupIndex\r\n            };\r\n            var groupsArray = getCellGroups(validGroupIndex, this.option(\"groups\"));\r\n            if (groupsArray.length) {\r\n                data.groups = getGroupsObjectFromGroupsArray(groupsArray)\r\n            }\r\n            return {\r\n                key: CELL_DATA,\r\n                value: data\r\n            }\r\n        }\r\n    }\r\n    renderRWorkSpace() {\r\n        this.renderRHeaderPanel();\r\n        this.renderRTimeTable();\r\n        this.renderRDateTable();\r\n        this.renderRAllDayPanel()\r\n    }\r\n    renderRDateTable() {\r\n        utils.renovation.renderComponent(this, this._$dateTable, dxrDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps())\r\n    }\r\n    renderRGroupPanel() {\r\n        var options = {\r\n            groups: this.option(\"groups\"),\r\n            groupOrientation: this.option(\"groupOrientation\"),\r\n            groupByDate: this.isGroupedByDate(),\r\n            resourceCellTemplate: this.option(\"resourceCellTemplate\"),\r\n            className: this.verticalGroupTableClass,\r\n            groupPanelData: this.viewDataProvider.getGroupPanelData(this.generateRenderOptions())\r\n        };\r\n        if (this.option(\"groups\").length) {\r\n            this._attachGroupCountClass();\r\n            utils.renovation.renderComponent(this, this._getGroupHeaderContainer(), dxrGroupPanel, \"renovatedGroupPanel\", options)\r\n        } else {\r\n            this._detachGroupCountClass()\r\n        }\r\n    }\r\n    renderRAllDayPanel() {\r\n        var visible = this.isAllDayPanelVisible && !this.isGroupedAllDayPanel();\r\n        if (visible) {\r\n            var _this$virtualScrollin;\r\n            this._toggleAllDayVisibility(false);\r\n            var options = _extends({\r\n                viewData: this.viewDataProvider.viewData,\r\n                dataCellTemplate: this.option(\"dataCellTemplate\"),\r\n                startCellIndex: 0\r\n            }, (null === (_this$virtualScrollin = this.virtualScrollingDispatcher.horizontalVirtualScrolling) || void 0 === _this$virtualScrollin ? void 0 : _this$virtualScrollin.getRenderState()) || {});\r\n            utils.renovation.renderComponent(this, this._$allDayPanel, dxrAllDayPanelLayout, \"renovatedAllDayPanel\", options);\r\n            utils.renovation.renderComponent(this, this._$allDayTitle, dxrAllDayPanelTitle, \"renovatedAllDayPanelTitle\", {});\r\n            this._$allDayTable = this.renovatedAllDayPanel.$element().find(\".\".concat(ALL_DAY_TABLE_CLASS));\r\n            this._$allDayPanel.prepend(this._$allDayContainer)\r\n        }\r\n        this._toggleAllDayVisibility(true)\r\n    }\r\n    renderRTimeTable() {\r\n        utils.renovation.renderComponent(this, this._$timePanel, dxrTimePanelTableLayout, \"renovatedTimePanel\", {\r\n            timePanelData: this.viewDataProvider.timePanelData,\r\n            timeCellTemplate: this.option(\"timeCellTemplate\"),\r\n            groupOrientation: this.option(\"groupOrientation\")\r\n        })\r\n    }\r\n    renderRHeaderPanel() {\r\n        var isRenderDateHeader = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\r\n        if (this.option(\"groups\").length) {\r\n            this._attachGroupCountClass()\r\n        } else {\r\n            this._detachGroupCountClass()\r\n        }\r\n        utils.renovation.renderComponent(this, this._$thead, this.renovatedHeaderPanelComponent, \"renovatedHeaderPanel\", {\r\n            dateHeaderData: this.viewDataProvider.dateHeaderData,\r\n            groupPanelData: this.viewDataProvider.getGroupPanelData(this.generateRenderOptions()),\r\n            dateCellTemplate: this.option(\"dateCellTemplate\"),\r\n            timeCellTemplate: this.option(\"timeCellTemplate\"),\r\n            groups: this.option(\"groups\"),\r\n            groupByDate: this.isGroupedByDate(),\r\n            groupOrientation: this.option(\"groupOrientation\"),\r\n            resourceCellTemplate: this.option(\"resourceCellTemplate\"),\r\n            isRenderDateHeader: isRenderDateHeader\r\n        })\r\n    }\r\n    initDragBehavior(scheduler) {\r\n        if (!this.dragBehavior && scheduler) {\r\n            this.dragBehavior = new AppointmentDragBehavior(scheduler);\r\n            this._createDragBehavior(this.getWorkArea());\r\n            this._createDragBehavior(this.getAllDayContainer());\r\n            this._createDragBehavior(this._$allDayPanel)\r\n        }\r\n    }\r\n    _createDragBehavior($element) {\r\n        var options = {\r\n            getItemData: (itemElement, appointments) => appointments._getItemData(itemElement),\r\n            getItemSettings: $itemElement => $itemElement.data(APPOINTMENT_SETTINGS_KEY)\r\n        };\r\n        this._createDragBehaviorBase($element, options)\r\n    }\r\n    _createDragBehaviorBase($element, options) {\r\n        var container = this.$element().find(\".\".concat(FIXED_CONTAINER_CLASS));\r\n        var element = this.$element();\r\n        var isDefaultDraggingMode = \"default\" === this.option(\"draggingMode\");\r\n        this.dragBehavior.addTo($element, createDragBehaviorConfig(container, isDefaultDraggingMode, this.dragBehavior, () => this._attachDragEvents(element), () => this._detachDragEvents(element), () => this._getDroppableCell(), () => this._getDateTables(), () => this.removeDroppableCellClass(), () => this.getCellWidth(), options))\r\n    }\r\n    _isRenderHeaderPanelEmptyCell() {\r\n        return this._isVerticalGroupedWorkSpace()\r\n    }\r\n    _dispose() {\r\n        super._dispose();\r\n        this.virtualScrollingDispatcher.dispose()\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            currentDate: new Date,\r\n            intervalCount: 1,\r\n            startDate: null,\r\n            firstDayOfWeek: void 0,\r\n            startDayHour: 0,\r\n            endDayHour: 24,\r\n            hoursInterval: .5,\r\n            activeStateEnabled: true,\r\n            hoverStateEnabled: true,\r\n            groups: [],\r\n            showAllDayPanel: true,\r\n            allDayExpanded: false,\r\n            onCellClick: null,\r\n            crossScrollingEnabled: false,\r\n            dataCellTemplate: null,\r\n            timeCellTemplate: null,\r\n            resourceCellTemplate: null,\r\n            dateCellTemplate: null,\r\n            allowMultipleCellSelection: true,\r\n            indicatorTime: new Date,\r\n            indicatorUpdateInterval: 5 * toMs(\"minute\"),\r\n            shadeUntilCurrentTime: true,\r\n            groupOrientation: \"horizontal\",\r\n            selectedCellData: [],\r\n            groupByDate: false,\r\n            scrolling: {\r\n                mode: \"standard\"\r\n            },\r\n            renovateRender: true,\r\n            height: void 0,\r\n            draggingMode: \"outlook\",\r\n            onScrollEnd: () => {},\r\n            getHeaderHeight: void 0,\r\n            onVirtualScrollingUpdated: void 0,\r\n            onSelectedCellsClick: () => {},\r\n            timeZoneCalculator: void 0,\r\n            schedulerHeight: void 0,\r\n            schedulerWidth: void 0\r\n        })\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"startDayHour\":\r\n                validateDayHours(args.value, this.option(\"endDayHour\"));\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"endDayHour\":\r\n                validateDayHours(this.option(\"startDayHour\"), args.value);\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"dateCellTemplate\":\r\n            case \"resourceCellTemplate\":\r\n            case \"dataCellTemplate\":\r\n            case \"timeCellTemplate\":\r\n            case \"hoursInterval\":\r\n            case \"firstDayOfWeek\":\r\n            case \"currentDate\":\r\n            case \"startDate\":\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"groups\":\r\n                this._cleanView();\r\n                this._removeAllDayElements();\r\n                this._initGrouping();\r\n                this.repaint();\r\n                break;\r\n            case \"groupOrientation\":\r\n                this._initGroupedStrategy();\r\n                this._createAllDayPanelElements();\r\n                this._removeAllDayElements();\r\n                this._cleanWorkSpace();\r\n                this._toggleGroupByDateClass();\r\n                break;\r\n            case \"showAllDayPanel\":\r\n                if (this._isVerticalGroupedWorkSpace()) {\r\n                    this._cleanView();\r\n                    this._removeAllDayElements();\r\n                    this._initGrouping();\r\n                    this.repaint()\r\n                } else if (!this.isRenovatedRender()) {\r\n                    this._toggleAllDayVisibility(true)\r\n                } else {\r\n                    this.renderWorkSpace()\r\n                }\r\n                break;\r\n            case \"allDayExpanded\":\r\n                this._changeAllDayVisibility();\r\n                this._attachTablesEvents();\r\n                this._updateScrollable();\r\n                break;\r\n            case \"onSelectionChanged\":\r\n                this._createSelectionChangedAction();\r\n                break;\r\n            case \"onCellClick\":\r\n                this._createCellClickAction();\r\n                break;\r\n            case \"onCellContextMenu\":\r\n                this._attachContextMenuEvent();\r\n                break;\r\n            case \"intervalCount\":\r\n                this._cleanWorkSpace();\r\n                this._toggleWorkSpaceCountClass();\r\n                break;\r\n            case \"groupByDate\":\r\n                this._cleanWorkSpace();\r\n                this._toggleGroupByDateClass();\r\n                break;\r\n            case \"crossScrollingEnabled\":\r\n                this._toggleHorizontalScrollClass();\r\n                this._dateTableScrollable.option(this._dateTableScrollableConfig());\r\n                break;\r\n            case \"width\":\r\n                super._optionChanged(args);\r\n                this._dimensionChanged();\r\n                break;\r\n            case \"timeZoneCalculator\":\r\n            case \"allowMultipleCellSelection\":\r\n            case \"selectedCellData\":\r\n                break;\r\n            case \"renovateRender\":\r\n            case \"scrolling\":\r\n                this.repaint();\r\n                break;\r\n            case \"schedulerHeight\":\r\n            case \"schedulerWidth\":\r\n                this.virtualScrollingDispatcher.updateDimensions(true);\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _getVirtualScrollingDispatcherOptions() {\r\n        return {\r\n            getCellHeight: this.getCellHeight.bind(this),\r\n            getCellWidth: this.getCellWidth.bind(this),\r\n            getCellMinWidth: this.getCellMinWidth.bind(this),\r\n            isRTL: this._isRTL.bind(this),\r\n            getSchedulerHeight: () => this.option(\"schedulerHeight\"),\r\n            getSchedulerWidth: () => this.option(\"schedulerWidth\"),\r\n            getViewHeight: () => this.$element().height ? this.$element().height() : getHeight(this.$element()),\r\n            getViewWidth: () => this.$element().width ? this.$element().width() : getWidth(this.$element()),\r\n            getScrolling: () => this.option(\"scrolling\"),\r\n            getScrollableOuterWidth: this.getScrollableOuterWidth.bind(this),\r\n            getScrollable: this.getScrollable.bind(this),\r\n            createAction: this._createAction.bind(this),\r\n            updateRender: this.updateRender.bind(this),\r\n            updateGrid: this.updateGrid.bind(this),\r\n            getGroupCount: this._getGroupCount.bind(this),\r\n            isVerticalGrouping: this._isVerticalGroupedWorkSpace.bind(this),\r\n            getTotalRowCount: this._getTotalRowCount.bind(this),\r\n            getTotalCellCount: this._getTotalCellCount.bind(this)\r\n        }\r\n    }\r\n    _cleanWorkSpace() {\r\n        this._cleanView();\r\n        this._toggleGroupedClass();\r\n        this._toggleWorkSpaceWithOddCells();\r\n        this.virtualScrollingDispatcher.updateDimensions(true);\r\n        this._renderView();\r\n        this.option(\"crossScrollingEnabled\") && this._setTableSizes();\r\n        this.cache.clear()\r\n    }\r\n    _init() {\r\n        this._headerSemaphore = new Semaphore;\r\n        this._sideBarSemaphore = new Semaphore;\r\n        this._dataTableSemaphore = new Semaphore;\r\n        this._viewDataProvider = null;\r\n        this._cellsSelectionState = null;\r\n        this._activeStateUnit = CELL_SELECTOR;\r\n        super._init();\r\n        this._initGrouping();\r\n        this._toggleHorizontalScrollClass();\r\n        this._toggleWorkSpaceCountClass();\r\n        this._toggleGroupByDateClass();\r\n        this._toggleWorkSpaceWithOddCells();\r\n        this.$element().addClass(COMPONENT_CLASS).addClass(this._getElementClass())\r\n    }\r\n    _initPositionHelper() {\r\n        this.positionHelper = new PositionHelper({\r\n            key: this.option(\"key\"),\r\n            viewDataProvider: this.viewDataProvider,\r\n            viewStartDayHour: this.option(\"startDayHour\"),\r\n            viewEndDayHour: this.option(\"endDayHour\"),\r\n            cellDuration: this.getCellDuration(),\r\n            groupedStrategy: this._groupedStrategy,\r\n            isGroupedByDate: this.isGroupedByDate(),\r\n            rtlEnabled: this.option(\"rtlEnabled\"),\r\n            startViewDate: this.getStartViewDate(),\r\n            isVerticalGrouping: this._isVerticalGroupedWorkSpace(),\r\n            groupCount: this._getGroupCount(),\r\n            isVirtualScrolling: this.isVirtualScrolling(),\r\n            getDOMMetaDataCallback: this.getDOMElementsMetaData.bind(this)\r\n        })\r\n    }\r\n    _initGrouping() {\r\n        this._initGroupedStrategy();\r\n        this._toggleGroupingDirectionClass();\r\n        this._toggleGroupByDateClass()\r\n    }\r\n    isVerticalOrientation() {\r\n        var orientation = this.option(\"groups\").length ? this.option(\"groupOrientation\") : this._getDefaultGroupStrategy();\r\n        return \"vertical\" === orientation\r\n    }\r\n    _initGroupedStrategy() {\r\n        var Strategy = this.isVerticalOrientation() ? VerticalGroupedStrategy : HorizontalGroupedStrategy;\r\n        this._groupedStrategy = new Strategy(this)\r\n    }\r\n    _getDefaultGroupStrategy() {\r\n        return \"horizontal\"\r\n    }\r\n    _toggleHorizontalScrollClass() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_BOTH_SCROLLS_CLASS, this.option(\"crossScrollingEnabled\"))\r\n    }\r\n    _toggleGroupByDateClass() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_GROUP_BY_DATE_CLASS, this.isGroupedByDate())\r\n    }\r\n    _toggleWorkSpaceCountClass() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_COUNT_CLASS, this._isWorkSpaceWithCount())\r\n    }\r\n    _toggleWorkSpaceWithOddCells() {\r\n        this.$element().toggleClass(WORKSPACE_WITH_ODD_CELLS_CLASS, this._isWorkspaceWithOddCells())\r\n    }\r\n    _toggleGroupingDirectionClass() {\r\n        this.$element().toggleClass(VERTICAL_GROUPED_WORKSPACE_CLASS, this._isVerticalGroupedWorkSpace())\r\n    }\r\n    _getDateTableCellClass(rowIndex, columnIndex) {\r\n        var cellClass = DATE_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS + \" \" + VERTICAL_SIZES_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, columnIndex + 1, rowIndex, columnIndex)\r\n    }\r\n    _getGroupHeaderClass(i) {\r\n        var cellClass = GROUP_HEADER_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1)\r\n    }\r\n    _initWorkSpaceUnits() {\r\n        this._$headerPanelContainer = $(\"<div>\").addClass(\"dx-scheduler-header-panel-container\");\r\n        this._$headerTablesContainer = $(\"<div>\").addClass(\"dx-scheduler-header-tables-container\");\r\n        this._$headerPanel = $(\"<table>\");\r\n        this._$thead = $(\"<thead>\").appendTo(this._$headerPanel);\r\n        this._$headerPanelEmptyCell = $(\"<div>\").addClass(\"dx-scheduler-header-panel-empty-cell\");\r\n        this._$fixedContainer = $(\"<div>\").addClass(FIXED_CONTAINER_CLASS);\r\n        this._$allDayContainer = $(\"<div>\").addClass(ALL_DAY_CONTAINER_CLASS);\r\n        this._$dateTableScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-date-table-scrollable-content\");\r\n        this._$sidebarScrollableContent = $(\"<div>\").addClass(\"dx-scheduler-side-bar-scrollable-content\");\r\n        this._initAllDayPanelElements();\r\n        if (this.isRenovatedRender()) {\r\n            this.createRAllDayPanelElements()\r\n        } else {\r\n            this._createAllDayPanelElements()\r\n        }\r\n        this._$timePanel = $(\"<table>\").addClass(TIME_PANEL_CLASS);\r\n        this._$dateTable = $(\"<table>\");\r\n        this._$dateTableContainer = $(\"<div>\").addClass(\"dx-scheduler-date-table-container\");\r\n        this._$groupTable = $(\"<div>\").addClass(WORKSPACE_VERTICAL_GROUP_TABLE_CLASS)\r\n    }\r\n    _initAllDayPanelElements() {\r\n        this._allDayTitles = [];\r\n        this._allDayTables = [];\r\n        this._allDayPanels = []\r\n    }\r\n    _initDateTableScrollable() {\r\n        var $dateTableScrollable = $(\"<div>\").addClass(SCHEDULER_DATE_TABLE_SCROLLABLE_CLASS);\r\n        this._dateTableScrollable = this._createComponent($dateTableScrollable, Scrollable, this._dateTableScrollableConfig())\r\n    }\r\n    _createWorkSpaceElements() {\r\n        if (this.option(\"crossScrollingEnabled\")) {\r\n            this._createWorkSpaceScrollableElements()\r\n        } else {\r\n            this._createWorkSpaceStaticElements()\r\n        }\r\n    }\r\n    _createWorkSpaceStaticElements() {\r\n        this._$dateTableContainer.append(this._$dateTable);\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            this._$dateTableContainer.append(this._$allDayContainer);\r\n            this._$dateTableScrollableContent.append(this._$groupTable, this._$timePanel, this._$dateTableContainer);\r\n            this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\r\n            this._$headerTablesContainer.append(this._$headerPanel)\r\n        } else {\r\n            this._$dateTableScrollableContent.append(this._$timePanel, this._$dateTableContainer);\r\n            this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\r\n            this._$headerTablesContainer.append(this._$allDayContainer, this._$headerPanel, this._$allDayPanel)\r\n        }\r\n        this._appendHeaderPanelEmptyCellIfNecessary();\r\n        this._$headerPanelContainer.append(this._$headerTablesContainer);\r\n        this.$element().append(this._$fixedContainer, this._$headerPanelContainer, this._dateTableScrollable.$element())\r\n    }\r\n    _createWorkSpaceScrollableElements() {\r\n        this.$element().append(this._$fixedContainer);\r\n        this._$flexContainer = $(\"<div>\").addClass(\"dx-scheduler-work-space-flex-container\");\r\n        this._createHeaderScrollable();\r\n        this._headerScrollable.$content().append(this._$headerPanel);\r\n        this._appendHeaderPanelEmptyCellIfNecessary();\r\n        this._$headerPanelContainer.append(this._$headerTablesContainer);\r\n        this.$element().append(this._$headerPanelContainer);\r\n        this.$element().append(this._$flexContainer);\r\n        this._createSidebarScrollable();\r\n        this._$flexContainer.append(this._dateTableScrollable.$element());\r\n        this._$dateTableContainer.append(this._$dateTable);\r\n        this._$dateTableScrollableContent.append(this._$dateTableContainer);\r\n        this._dateTableScrollable.$content().append(this._$dateTableScrollableContent);\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            this._$dateTableContainer.append(this._$allDayContainer);\r\n            this._$sidebarScrollableContent.append(this._$groupTable, this._$timePanel)\r\n        } else {\r\n            this._headerScrollable.$content().append(this._$allDayContainer, this._$allDayPanel);\r\n            this._$sidebarScrollableContent.append(this._$timePanel)\r\n        }\r\n        this._sidebarScrollable.$content().append(this._$sidebarScrollableContent)\r\n    }\r\n    _appendHeaderPanelEmptyCellIfNecessary() {\r\n        this._isRenderHeaderPanelEmptyCell() && this._$headerPanelContainer.append(this._$headerPanelEmptyCell)\r\n    }\r\n    _createHeaderScrollable() {\r\n        var $headerScrollable = $(\"<div>\").addClass(SCHEDULER_HEADER_SCROLLABLE_CLASS).appendTo(this._$headerTablesContainer);\r\n        this._headerScrollable = this._createComponent($headerScrollable, Scrollable, this._headerScrollableConfig())\r\n    }\r\n    _createSidebarScrollable() {\r\n        var $timePanelScrollable = $(\"<div>\").addClass(SCHEDULER_SIDEBAR_SCROLLABLE_CLASS).appendTo(this._$flexContainer);\r\n        this._sidebarScrollable = this._createComponent($timePanelScrollable, Scrollable, {\r\n            useKeyboard: false,\r\n            showScrollbar: \"never\",\r\n            direction: \"vertical\",\r\n            useNative: false,\r\n            updateManually: true,\r\n            bounceEnabled: false,\r\n            onScroll: e => {\r\n                this._sideBarSemaphore.take();\r\n                this._dataTableSemaphore.isFree() && this._dateTableScrollable.scrollTo({\r\n                    top: e.scrollOffset.top\r\n                });\r\n                this._sideBarSemaphore.release()\r\n            }\r\n        })\r\n    }\r\n    _attachTableClasses() {\r\n        this._addTableClass(this._$dateTable, DATE_TABLE_CLASS);\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            var groupCount = this._getGroupCount();\r\n            for (var i = 0; i < groupCount; i++) {\r\n                this._addTableClass(this._allDayTables[i], ALL_DAY_TABLE_CLASS)\r\n            }\r\n        } else {\r\n            this._addTableClass(this._$allDayTable, ALL_DAY_TABLE_CLASS)\r\n        }\r\n    }\r\n    _attachHeaderTableClasses() {\r\n        this._addTableClass(this._$headerPanel, HEADER_PANEL_CLASS)\r\n    }\r\n    _addTableClass($el, className) {\r\n        $el && !$el.hasClass(className) && $el.addClass(className)\r\n    }\r\n    _initMarkup() {\r\n        this.cache.clear();\r\n        this._initWorkSpaceUnits();\r\n        this._initVirtualScrolling();\r\n        this._initDateTableScrollable();\r\n        this._createWorkSpaceElements();\r\n        super._initMarkup();\r\n        if (!this.option(\"crossScrollingEnabled\")) {\r\n            this._attachTableClasses();\r\n            this._attachHeaderTableClasses()\r\n        }\r\n        this._toggleGroupedClass();\r\n        this._renderView();\r\n        this._attachEvents()\r\n    }\r\n    _render() {\r\n        super._render();\r\n        this._renderDateTimeIndication();\r\n        this._setIndicationUpdateInterval()\r\n    }\r\n    _toggleGroupedClass() {\r\n        this.$element().toggleClass(GROUPED_WORKSPACE_CLASS, this._getGroupCount() > 0)\r\n    }\r\n    _renderView() {\r\n        if (this.isRenovatedRender()) {\r\n            if (this._isVerticalGroupedWorkSpace()) {\r\n                this.renderRGroupPanel()\r\n            }\r\n        } else {\r\n            this._applyCellTemplates(this._renderGroupHeader())\r\n        }\r\n        this.renderWorkSpace();\r\n        this._updateGroupTableHeight();\r\n        this.updateHeaderEmptyCellWidth();\r\n        this._shader = new VerticalShader(this)\r\n    }\r\n    updateCellsSelection() {\r\n        var renderOptions = this.generateRenderOptions();\r\n        this.viewDataProvider.updateViewData(renderOptions);\r\n        this.renderRWorkSpace()\r\n    }\r\n    _renderDateTimeIndication() {\r\n        return noop()\r\n    }\r\n    _setIndicationUpdateInterval() {\r\n        return noop()\r\n    }\r\n    _refreshDateTimeIndication() {\r\n        return noop()\r\n    }\r\n    _detachGroupCountClass() {\r\n        [...VERTICAL_GROUP_COUNT_CLASSES].forEach(className => {\r\n            this.$element().removeClass(className)\r\n        })\r\n    }\r\n    _attachGroupCountClass() {\r\n        var className = this._groupedStrategy.getGroupCountClass(this.option(\"groups\"));\r\n        this.$element().addClass(className)\r\n    }\r\n    _getDateHeaderTemplate() {\r\n        return this.option(\"dateCellTemplate\")\r\n    }\r\n    _toggleAllDayVisibility(isUpdateScrollable) {\r\n        var showAllDayPanel = this._isShowAllDayPanel();\r\n        this.$element().toggleClass(WORKSPACE_WITH_ALL_DAY_CLASS, showAllDayPanel);\r\n        this._changeAllDayVisibility();\r\n        isUpdateScrollable && this._updateScrollable()\r\n    }\r\n    _changeAllDayVisibility() {\r\n        this.cache.clear();\r\n        this.$element().toggleClass(WORKSPACE_WITH_COLLAPSED_ALL_DAY_CLASS, !this.option(\"allDayExpanded\") && this._isShowAllDayPanel())\r\n    }\r\n    _getDateTables() {\r\n        return this._$dateTable.add(this._$allDayTable)\r\n    }\r\n    _getDateTable() {\r\n        return this._$dateTable\r\n    }\r\n    _removeAllDayElements() {\r\n        this._$allDayTable && this._$allDayTable.remove();\r\n        this._$allDayTitle && this._$allDayTitle.remove()\r\n    }\r\n    _cleanView() {\r\n        var _this$_shader;\r\n        this.cache.clear();\r\n        this._cleanTableWidths();\r\n        this.cellsSelectionState.clearSelectedAndFocusedCells();\r\n        if (!this.isRenovatedRender()) {\r\n            var _this$_$allDayTable, _this$_$sidebarTable;\r\n            this._$thead.empty();\r\n            this._$dateTable.empty();\r\n            this._$timePanel.empty();\r\n            this._$groupTable.empty();\r\n            null === (_this$_$allDayTable = this._$allDayTable) || void 0 === _this$_$allDayTable ? void 0 : _this$_$allDayTable.empty();\r\n            null === (_this$_$sidebarTable = this._$sidebarTable) || void 0 === _this$_$sidebarTable ? void 0 : _this$_$sidebarTable.empty()\r\n        }\r\n        null === (_this$_shader = this._shader) || void 0 === _this$_shader ? void 0 : _this$_shader.clean();\r\n        delete this._interval\r\n    }\r\n    _clean() {\r\n        eventsEngine.off(domAdapter.getDocument(), SCHEDULER_CELL_DXPOINTERUP_EVENT_NAME);\r\n        this._disposeRenovatedComponents();\r\n        super._clean()\r\n    }\r\n    _cleanTableWidths() {\r\n        this._$headerPanel.css(\"width\", \"\");\r\n        this._$dateTable.css(\"width\", \"\");\r\n        this._$allDayTable && this._$allDayTable.css(\"width\", \"\")\r\n    }\r\n    _disposeRenovatedComponents() {\r\n        var _this$renovatedAllDay, _this$renovatedDateTa, _this$renovatedTimePa, _this$renovatedGroupP, _this$renovatedHeader;\r\n        null === (_this$renovatedAllDay = this.renovatedAllDayPanel) || void 0 === _this$renovatedAllDay ? void 0 : _this$renovatedAllDay.dispose();\r\n        this.renovatedAllDayPanel = void 0;\r\n        null === (_this$renovatedDateTa = this.renovatedDateTable) || void 0 === _this$renovatedDateTa ? void 0 : _this$renovatedDateTa.dispose();\r\n        this.renovatedDateTable = void 0;\r\n        null === (_this$renovatedTimePa = this.renovatedTimePanel) || void 0 === _this$renovatedTimePa ? void 0 : _this$renovatedTimePa.dispose();\r\n        this.renovatedTimePanel = void 0;\r\n        null === (_this$renovatedGroupP = this.renovatedGroupPanel) || void 0 === _this$renovatedGroupP ? void 0 : _this$renovatedGroupP.dispose();\r\n        this.renovatedGroupPanel = void 0;\r\n        null === (_this$renovatedHeader = this.renovatedHeaderPanel) || void 0 === _this$renovatedHeader ? void 0 : _this$renovatedHeader.dispose();\r\n        this.renovatedHeaderPanel = void 0\r\n    }\r\n    getGroupedStrategy() {\r\n        return this._groupedStrategy\r\n    }\r\n    getFixedContainer() {\r\n        return this._$fixedContainer\r\n    }\r\n    getAllDayContainer() {\r\n        return this._$allDayContainer\r\n    }\r\n    updateRender() {\r\n        this.renderer.updateRender()\r\n    }\r\n    updateGrid() {\r\n        this.renderer._renderGrid()\r\n    }\r\n    updateAppointments() {\r\n        var _this$dragBehavior;\r\n        this.option(\"onVirtualScrollingUpdated\")();\r\n        null === (_this$dragBehavior = this.dragBehavior) || void 0 === _this$dragBehavior ? void 0 : _this$dragBehavior.updateDragSource()\r\n    }\r\n    _createAllDayPanelElements() {\r\n        var groupCount = this._getGroupCount();\r\n        if (this._isVerticalGroupedWorkSpace() && 0 !== groupCount) {\r\n            for (var i = 0; i < groupCount; i++) {\r\n                var $allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\"));\r\n                this._allDayTitles.push($allDayTitle);\r\n                this._$allDayTable = $(\"<table>\");\r\n                this._allDayTables.push(this._$allDayTable);\r\n                this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable);\r\n                this._allDayPanels.push(this._$allDayPanel)\r\n            }\r\n        } else {\r\n            this._$allDayTitle = $(\"<div>\").addClass(ALL_DAY_TITLE_CLASS).text(messageLocalization.format(\"dxScheduler-allDay\")).appendTo(this.$element());\r\n            this._$allDayTable = $(\"<table>\");\r\n            this._$allDayPanel = $(\"<div>\").addClass(ALL_DAY_PANEL_CLASS).append(this._$allDayTable)\r\n        }\r\n    }\r\n    renderWorkSpace() {\r\n        var isGenerateNewViewData = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : true;\r\n        this.cache.clear();\r\n        this.viewDataProvider.update(this.generateRenderOptions(), isGenerateNewViewData);\r\n        if (this.isRenovatedRender()) {\r\n            this.renderRWorkSpace();\r\n            this.virtualScrollingDispatcher.updateDimensions()\r\n        } else {\r\n            this._renderDateHeader();\r\n            this._renderTimePanel();\r\n            this._renderGroupAllDayPanel();\r\n            this._renderDateTable();\r\n            this._renderAllDayPanel()\r\n        }\r\n        this._initPositionHelper()\r\n    }\r\n    _renderGroupHeader() {\r\n        var $container = this._getGroupHeaderContainer();\r\n        var groupCount = this._getGroupCount();\r\n        var cellTemplates = [];\r\n        if (groupCount) {\r\n            var groupRows = this._makeGroupRows(this.option(\"groups\"), this.option(\"groupByDate\"));\r\n            this._attachGroupCountClass();\r\n            $container.append(groupRows.elements);\r\n            cellTemplates = groupRows.cellTemplates\r\n        } else {\r\n            this._detachGroupCountClass()\r\n        }\r\n        return cellTemplates\r\n    }\r\n    _applyCellTemplates(templates) {\r\n        null === templates || void 0 === templates ? void 0 : templates.forEach((function(template) {\r\n            template()\r\n        }))\r\n    }\r\n    _makeGroupRows(groups, groupByDate) {\r\n        var tableCreatorStrategy = this._isVerticalGroupedWorkSpace() ? tableCreator.VERTICAL : tableCreator.HORIZONTAL;\r\n        return tableCreator.makeGroupedTable(tableCreatorStrategy, groups, {\r\n            groupHeaderRowClass: GROUP_ROW_CLASS,\r\n            groupRowClass: GROUP_ROW_CLASS,\r\n            groupHeaderClass: this._getGroupHeaderClass.bind(this),\r\n            groupHeaderContentClass: GROUP_HEADER_CONTENT_CLASS\r\n        }, this._getCellCount() || 1, this.option(\"resourceCellTemplate\"), this._getGroupCount(), groupByDate)\r\n    }\r\n    _renderDateHeader() {\r\n        var container = this._getDateHeaderContainer();\r\n        var $headerRow = $(\"<tr>\").addClass(HEADER_ROW_CLASS);\r\n        var count = this._getCellCount();\r\n        var cellTemplate = this._getDateHeaderTemplate();\r\n        var repeatCount = this._getCalculateHeaderCellRepeatCount();\r\n        var templateCallbacks = [];\r\n        var groupByDate = this.isGroupedByDate();\r\n        if (!groupByDate) {\r\n            for (var rowIndex = 0; rowIndex < repeatCount; rowIndex++) {\r\n                for (var columnIndex = 0; columnIndex < count; columnIndex++) {\r\n                    var templateIndex = rowIndex * count + columnIndex;\r\n                    this._renderDateHeaderTemplate($headerRow, columnIndex, templateIndex, cellTemplate, templateCallbacks)\r\n                }\r\n            }\r\n            container.append($headerRow)\r\n        } else {\r\n            var colSpan = groupByDate ? this._getGroupCount() : 1;\r\n            for (var _columnIndex = 0; _columnIndex < count; _columnIndex++) {\r\n                var _templateIndex = _columnIndex * repeatCount;\r\n                var cellElement = this._renderDateHeaderTemplate($headerRow, _columnIndex, _templateIndex, cellTemplate, templateCallbacks);\r\n                cellElement.attr(\"colSpan\", colSpan)\r\n            }\r\n            container.prepend($headerRow)\r\n        }\r\n        this._applyCellTemplates(templateCallbacks);\r\n        return $headerRow\r\n    }\r\n    _renderDateHeaderTemplate(container, panelCellIndex, templateIndex, cellTemplate, templateCallbacks) {\r\n        var validTemplateIndex = this.isGroupedByDate() ? Math.floor(templateIndex / this._getGroupCount()) : templateIndex;\r\n        var completeDateHeaderMap = this.viewDataProvider.completeDateHeaderMap;\r\n        var {\r\n            text: text,\r\n            startDate: date\r\n        } = completeDateHeaderMap[completeDateHeaderMap.length - 1][validTemplateIndex];\r\n        var $cell = $(\"<th>\").addClass(this._getHeaderPanelCellClass(panelCellIndex)).attr(\"title\", text);\r\n        if (null !== cellTemplate && void 0 !== cellTemplate && cellTemplate.render) {\r\n            templateCallbacks.push(cellTemplate.render.bind(cellTemplate, {\r\n                model: _extends({\r\n                    text: text,\r\n                    date: date\r\n                }, this._getGroupsForDateHeaderTemplate(templateIndex)),\r\n                index: templateIndex,\r\n                container: getPublicElement($cell)\r\n            }))\r\n        } else {\r\n            $cell.text(text)\r\n        }\r\n        container.append($cell);\r\n        return $cell\r\n    }\r\n    _getGroupsForDateHeaderTemplate(templateIndex) {\r\n        var indexMultiplier = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;\r\n        var groupIndex;\r\n        var groups;\r\n        if (this._isHorizontalGroupedWorkSpace() && !this.isGroupedByDate()) {\r\n            groupIndex = this._getGroupIndex(0, templateIndex * indexMultiplier);\r\n            var groupsArray = getCellGroups(groupIndex, this.option(\"groups\"));\r\n            groups = getGroupsObjectFromGroupsArray(groupsArray)\r\n        }\r\n        return {\r\n            groups: groups,\r\n            groupIndex: groupIndex\r\n        }\r\n    }\r\n    _getHeaderPanelCellClass(i) {\r\n        var cellClass = HEADER_PANEL_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i + 1, void 0, void 0, this.isGroupedByDate())\r\n    }\r\n    _renderAllDayPanel(index) {\r\n        var cellCount = this._getCellCount();\r\n        if (!this._isVerticalGroupedWorkSpace()) {\r\n            cellCount *= this._getGroupCount() || 1\r\n        }\r\n        var cellTemplates = this._renderTableBody({\r\n            container: this._allDayPanels.length ? getPublicElement(this._allDayTables[index]) : getPublicElement(this._$allDayTable),\r\n            rowCount: 1,\r\n            cellCount: cellCount,\r\n            cellClass: this._getAllDayPanelCellClass.bind(this),\r\n            rowClass: ALL_DAY_TABLE_ROW_CLASS,\r\n            cellTemplate: this.option(\"dataCellTemplate\"),\r\n            getCellData: this._oldRender_getAllDayCellData(index),\r\n            groupIndex: index\r\n        }, true);\r\n        this._toggleAllDayVisibility(true);\r\n        this._applyCellTemplates(cellTemplates)\r\n    }\r\n    _renderGroupAllDayPanel() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            var groupCount = this._getGroupCount();\r\n            for (var i = 0; i < groupCount; i++) {\r\n                this._renderAllDayPanel(i)\r\n            }\r\n        }\r\n    }\r\n    _getAllDayPanelCellClass(i, j) {\r\n        var cellClass = ALL_DAY_TABLE_CELL_CLASS + \" \" + HORIZONTAL_SIZES_CLASS;\r\n        return this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, j + 1)\r\n    }\r\n    _renderTimePanel() {\r\n        var repeatCount = this._groupedStrategy.calculateTimeCellRepeatCount();\r\n        var getData = (rowIndex, field) => {\r\n            var allDayPanelsCount = 0;\r\n            if (this.isAllDayPanelVisible) {\r\n                allDayPanelsCount = 1\r\n            }\r\n            if (this.isGroupedAllDayPanel()) {\r\n                allDayPanelsCount = Math.ceil((rowIndex + 1) / this._getRowCount())\r\n            }\r\n            var validRowIndex = rowIndex + allDayPanelsCount;\r\n            return this.viewDataProvider.completeTimePanelMap[validRowIndex][field]\r\n        };\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$timePanel),\r\n            rowCount: this._getTimePanelRowCount() * repeatCount,\r\n            cellCount: 1,\r\n            cellClass: this._getTimeCellClass.bind(this),\r\n            rowClass: TIME_PANEL_ROW_CLASS,\r\n            cellTemplate: this.option(\"timeCellTemplate\"),\r\n            getCellText: rowIndex => getData(rowIndex, \"text\"),\r\n            getCellDate: rowIndex => getData(rowIndex, \"startDate\"),\r\n            groupCount: this._getGroupCount(),\r\n            allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayTitles : void 0,\r\n            getTemplateData: (rowIndex => {\r\n                if (!this._isVerticalGroupedWorkSpace()) {\r\n                    return {}\r\n                }\r\n                var groupIndex = this._getGroupIndex(rowIndex, 0);\r\n                var groupsArray = getCellGroups(groupIndex, this.option(\"groups\"));\r\n                var groups = getGroupsObjectFromGroupsArray(groupsArray);\r\n                return {\r\n                    groupIndex: groupIndex,\r\n                    groups: groups\r\n                }\r\n            }).bind(this)\r\n        })\r\n    }\r\n    _getTimeCellClass(i) {\r\n        var cellClass = TIME_PANEL_CELL_CLASS + \" \" + VERTICAL_SIZES_CLASS;\r\n        return this._isVerticalGroupedWorkSpace() ? this._groupedStrategy.addAdditionalGroupCellClasses(cellClass, i, i) : cellClass\r\n    }\r\n    _renderDateTable() {\r\n        var groupCount = this._getGroupCount();\r\n        this._renderTableBody({\r\n            container: getPublicElement(this._$dateTable),\r\n            rowCount: this._getTotalRowCount(groupCount),\r\n            cellCount: this._getTotalCellCount(groupCount),\r\n            cellClass: this._getDateTableCellClass.bind(this),\r\n            rowClass: DATE_TABLE_ROW_CLASS,\r\n            cellTemplate: this.option(\"dataCellTemplate\"),\r\n            getCellData: (_, rowIndex, columnIndex) => {\r\n                var isGroupedAllDayPanel = this.isGroupedAllDayPanel();\r\n                var validRowIndex = rowIndex;\r\n                if (isGroupedAllDayPanel) {\r\n                    var rowCount = this._getRowCount();\r\n                    var allDayPanelsCount = Math.ceil(rowIndex / rowCount);\r\n                    validRowIndex += allDayPanelsCount\r\n                }\r\n                var cellData = this.viewDataProvider.viewDataMap.dateTableMap[validRowIndex][columnIndex].cellData;\r\n                return {\r\n                    value: this._filterCellDataFields(cellData),\r\n                    fullValue: cellData,\r\n                    key: CELL_DATA\r\n                }\r\n            },\r\n            allDayElements: this._insertAllDayRowsIntoDateTable() ? this._allDayPanels : void 0,\r\n            groupCount: groupCount,\r\n            groupByDate: this.option(\"groupByDate\")\r\n        })\r\n    }\r\n    _insertAllDayRowsIntoDateTable() {\r\n        return this._groupedStrategy.insertAllDayRowsIntoDateTable()\r\n    }\r\n    _renderTableBody(options, delayCellTemplateRendering) {\r\n        var result = [];\r\n        if (!delayCellTemplateRendering) {\r\n            this._applyCellTemplates(tableCreator.makeTable(options))\r\n        } else {\r\n            result = tableCreator.makeTable(options)\r\n        }\r\n        return result\r\n    }\r\n}\r\nvar createDragBehaviorConfig = (container, isDefaultDraggingMode, dragBehavior, attachGeneralEvents, detachGeneralEvents, getDroppableCell, getDateTables, removeDroppableCellClass, getCellWidth, options) => {\r\n    var state = {\r\n        dragElement: void 0,\r\n        itemData: void 0\r\n    };\r\n    var isItemDisabled = () => {\r\n        var {\r\n            itemData: itemData\r\n        } = state;\r\n        if (itemData) {\r\n            var getter = compileGetter(\"disabled\");\r\n            return getter(itemData)\r\n        }\r\n        return true\r\n    };\r\n    var cursorOffset = options.isSetCursorOffset ? () => {\r\n        var $dragElement = $(state.dragElement);\r\n        return {\r\n            x: getWidth($dragElement) / 2,\r\n            y: getHeight($dragElement) / 2\r\n        }\r\n    } : void 0;\r\n    return {\r\n        container: container,\r\n        dragTemplate: () => state.dragElement,\r\n        onDragStart: e => {\r\n            if (!isDefaultDraggingMode) {\r\n                detachGeneralEvents()\r\n            }\r\n            var canceled = e.cancel;\r\n            var event = e.event;\r\n            var $itemElement = $(e.itemElement);\r\n            var appointments = e.component._appointments;\r\n            state.itemData = options.getItemData(e.itemElement, appointments);\r\n            var settings = options.getItemSettings($itemElement, e);\r\n            var initialPosition = options.initialPosition;\r\n            if (!isItemDisabled()) {\r\n                event.data = event.data || {};\r\n                if (!canceled) {\r\n                    if (!settings.isCompact) {\r\n                        dragBehavior.updateDragSource(state.itemData, settings)\r\n                    }\r\n                    state.dragElement = ((itemData, settings, appointments) => {\r\n                        var appointmentIndex = appointments.option(\"items\").length;\r\n                        settings.isCompact = false;\r\n                        settings.virtual = false;\r\n                        var items = appointments._renderItem(appointmentIndex, {\r\n                            itemData: itemData,\r\n                            settings: [settings]\r\n                        });\r\n                        return items[0]\r\n                    })(state.itemData, settings, appointments);\r\n                    event.data.itemElement = state.dragElement;\r\n                    event.data.initialPosition = null !== initialPosition && void 0 !== initialPosition ? initialPosition : locate($(state.dragElement));\r\n                    event.data.itemData = state.itemData;\r\n                    event.data.itemSettings = settings;\r\n                    dragBehavior.onDragStart(event.data);\r\n                    resetPosition($(state.dragElement))\r\n                }\r\n            }\r\n        },\r\n        onDragMove: () => {\r\n            if (isDefaultDraggingMode) {\r\n                return\r\n            }\r\n            var appointmentWidth = getWidth(state.dragElement);\r\n            var cellWidth = getCellWidth();\r\n            var isWideAppointment = appointmentWidth > cellWidth;\r\n            var dragElementContainer = $(state.dragElement).parent();\r\n            var boundingRect = getBoundingRect(dragElementContainer.get(0));\r\n            var newX = boundingRect.left + 10;\r\n            var newY = boundingRect.top + 10;\r\n            var elements = isWideAppointment ? domAdapter.elementsFromPoint(newX, newY) : domAdapter.elementsFromPoint(newX + appointmentWidth / 2, newY);\r\n            var dateTables = getDateTables();\r\n            var droppableCell = elements.find(el => {\r\n                var classList = el.classList;\r\n                var isCurrentSchedulerElement = 1 === dateTables.find(el).length;\r\n                return isCurrentSchedulerElement && (classList.contains(DATE_TABLE_CELL_CLASS) || classList.contains(ALL_DAY_TABLE_CELL_CLASS))\r\n            });\r\n            if (droppableCell) {\r\n                var oldDroppableCell = getDroppableCell();\r\n                if (!oldDroppableCell.is(droppableCell)) {\r\n                    removeDroppableCellClass()\r\n                }\r\n                $(droppableCell).addClass(DATE_TABLE_DROPPABLE_CELL_CLASS)\r\n            }\r\n        },\r\n        onDragEnd: e => {\r\n            var _state$dragElement;\r\n            if (!isDefaultDraggingMode) {\r\n                attachGeneralEvents()\r\n            }\r\n            if (!isItemDisabled()) {\r\n                dragBehavior.onDragEnd(e)\r\n            }\r\n            null === (_state$dragElement = state.dragElement) || void 0 === _state$dragElement ? void 0 : _state$dragElement.remove();\r\n            removeDroppableCellClass()\r\n        },\r\n        cursorOffset: cursorOffset,\r\n        filter: options.filter\r\n    }\r\n};\r\nexport default SchedulerWorkSpace;\r\n"]},"metadata":{},"sourceType":"module"}