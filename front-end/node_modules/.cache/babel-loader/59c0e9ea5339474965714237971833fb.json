{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/dataProvider/appointmentFilter.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport config from \"../../../../core/config\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { equalByValue } from \"../../../../core/utils/common\";\nimport dateSerialization from \"../../../../core/utils/date_serialization\";\nimport { getRecurrenceProcessor } from \"../../recurrence\";\nimport { inArray, wrapToArray } from \"../../../../core/utils/array\";\nimport { extend } from \"../../../../core/utils/extend\";\nimport { map, each } from \"../../../../core/utils/iterator\";\nimport { isFunction, isDefined, isString } from \"../../../../core/utils/type\";\nimport query from \"../../../../data/query\";\nimport { isDateAndTimeView as calculateIsDateAndTimeView, isSupportMultiDayAppointments } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { getResourcesDataByGroups } from \"../../resources/utils\";\nimport { compareDateWithStartDayHour, compareDateWithEndDayHour, getTrimDates, getAppointmentTakesSeveralDays, _appointmentPartInInterval, getRecurrenceException, getAppointmentTakesAllDay } from \"./utils\";\nimport { getPreparedDataItems, resolveDataItems } from \"../../../../renovation/ui/scheduler/utils/data\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar DATE_FILTER_POSITION = 0;\nvar USER_FILTER_POSITION = 1;\nvar FilterStrategies = {\n  virtual: \"virtual\",\n  standard: \"standard\"\n};\n\nclass FilterMaker {\n  constructor(dataAccessors) {\n    this._filterRegistry = null;\n    this.dataAccessors = dataAccessors;\n  }\n\n  isRegistered() {\n    return !!this._filterRegistry;\n  }\n\n  clearRegistry() {\n    delete this._filterRegistry;\n  }\n\n  make(type, args) {\n    if (!this._filterRegistry) {\n      this._filterRegistry = {};\n    }\n\n    this._make(type).apply(this, args);\n  }\n\n  _make(type) {\n    switch (type) {\n      case \"date\":\n        return (min, max, useAccessors) => {\n          var startDate = useAccessors ? this.dataAccessors.getter.startDate : this.dataAccessors.expr.startDateExpr;\n          var endDate = useAccessors ? this.dataAccessors.getter.endDate : this.dataAccessors.expr.endDateExpr;\n          var recurrenceRule = this.dataAccessors.expr.recurrenceRuleExpr;\n          this._filterRegistry.date = [[[endDate, \">=\", min], [startDate, \"<\", max]], \"or\", [recurrenceRule, \"startswith\", \"freq\"], \"or\", [[endDate, min], [startDate, min]]];\n\n          if (!recurrenceRule) {\n            this._filterRegistry.date.splice(1, 2);\n          }\n        };\n\n      case \"user\":\n        return userFilter => {\n          this._filterRegistry.user = userFilter;\n        };\n    }\n  }\n\n  combine() {\n    var filter = [];\n    this._filterRegistry.date && filter.push(this._filterRegistry.date);\n    this._filterRegistry.user && filter.push(this._filterRegistry.user);\n    return filter;\n  }\n\n  dateFilter() {\n    var _this$_filterRegistry;\n\n    return null === (_this$_filterRegistry = this._filterRegistry) || void 0 === _this$_filterRegistry ? void 0 : _this$_filterRegistry.date;\n  }\n\n}\n\nexport class AppointmentFilterBaseStrategy {\n  constructor(options) {\n    this.options = options;\n    this.dataSource = this.options.dataSource;\n    this.dataAccessors = this.options.dataAccessors;\n    this.preparedItems = [];\n\n    this._init();\n  }\n\n  get strategyName() {\n    return FilterStrategies.standard;\n  }\n\n  get timeZoneCalculator() {\n    return this.options.timeZoneCalculator;\n  }\n\n  get viewStartDayHour() {\n    return this.options.startDayHour;\n  }\n\n  get viewEndDayHour() {\n    return this.options.endDayHour;\n  }\n\n  get appointmentDuration() {\n    return this.options.appointmentDuration;\n  }\n\n  get timezone() {\n    return this.options.timezone;\n  }\n\n  get firstDayOfWeek() {\n    return this.options.firstDayOfWeek;\n  }\n\n  get showAllDayPanel() {\n    return this.options.showAllDayPanel;\n  }\n\n  get loadedResources() {\n    return this._resolveOption(\"loadedResources\");\n  }\n\n  get supportAllDayRow() {\n    return this._resolveOption(\"supportAllDayRow\");\n  }\n\n  get viewType() {\n    return this._resolveOption(\"viewType\");\n  }\n\n  get viewDirection() {\n    return this._resolveOption(\"viewDirection\");\n  }\n\n  get dateRange() {\n    return this._resolveOption(\"dateRange\");\n  }\n\n  get groupCount() {\n    return this._resolveOption(\"groupCount\");\n  }\n\n  get viewDataProvider() {\n    return this._resolveOption(\"viewDataProvider\");\n  }\n\n  _resolveOption(name) {\n    var result = this.options[name];\n    return \"function\" === typeof result ? result() : result;\n  }\n\n  _init() {\n    this.setDataAccessors(this.dataAccessors);\n    this.setDataSource(this.dataSource);\n  }\n\n  filter(preparedItems) {\n    var dateRange = this.dateRange;\n    var allDay;\n\n    if (!this.showAllDayPanel && this.supportAllDayRow) {\n      allDay = false;\n    }\n\n    return this.filterLoadedAppointments({\n      startDayHour: this.viewStartDayHour,\n      endDayHour: this.viewEndDayHour,\n      viewStartDayHour: this.viewStartDayHour,\n      viewEndDayHour: this.viewEndDayHour,\n      min: dateRange[0],\n      max: dateRange[1],\n      resources: this.loadedResources,\n      allDay: allDay,\n      supportMultiDayAppointments: isSupportMultiDayAppointments(this.viewType),\n      firstDayOfWeek: this.firstDayOfWeek\n    }, preparedItems);\n  }\n\n  filterByDate(min, max, remoteFiltering, dateSerializationFormat) {\n    if (!this.dataSource) {\n      return;\n    }\n\n    var [trimMin, trimMax] = getTrimDates(min, max);\n\n    if (!this.filterMaker.isRegistered()) {\n      this._createFilter(trimMin, trimMax, remoteFiltering, dateSerializationFormat);\n    } else {\n      var _this$dataSource$filt;\n\n      if ((null === (_this$dataSource$filt = this.dataSource.filter()) || void 0 === _this$dataSource$filt ? void 0 : _this$dataSource$filt.length) > 1) {\n        var userFilter = this._serializeRemoteFilter([this.dataSource.filter()[1]], dateSerializationFormat);\n\n        this.filterMaker.make(\"user\", userFilter);\n      }\n\n      if (remoteFiltering) {\n        this.filterMaker.make(\"date\", [trimMin, trimMax]);\n        this.dataSource.filter(this._combineRemoteFilter(dateSerializationFormat));\n      }\n    }\n  }\n\n  hasAllDayAppointments(appointments) {\n    var result = false;\n\n    if (appointments) {\n      each(appointments, (_, item) => {\n        if (getAppointmentTakesAllDay(item, this.viewStartDayHour, this.viewEndDayHour)) {\n          result = true;\n          return false;\n        }\n      });\n    }\n\n    return result;\n  }\n\n  setDataAccessors(dataAccessors) {\n    this.dataAccessors = dataAccessors;\n    this.filterMaker = new FilterMaker(this.dataAccessors);\n  }\n\n  setDataSource(dataSource) {\n    var _this$filterMaker;\n\n    this.dataSource = dataSource;\n\n    this._updatePreparedDataItems();\n\n    null === (_this$filterMaker = this.filterMaker) || void 0 === _this$filterMaker ? void 0 : _this$filterMaker.clearRegistry();\n  }\n\n  _updatePreparedDataItems() {\n    var updateItems = items => this.preparedItems = getPreparedDataItems(items, this.dataAccessors, this.appointmentDuration, this.timeZoneCalculator);\n\n    if (this.dataSource) {\n      var store = this.dataSource.store();\n      store.on(\"loaded\", options => {\n        updateItems(resolveDataItems(options));\n      });\n\n      if (this.dataSource.isLoaded()) {\n        updateItems(this.dataSource.items());\n      }\n    }\n  }\n\n  _createAllDayAppointmentFilter(filterOptions) {\n    var {\n      viewStartDayHour: viewStartDayHour,\n      viewEndDayHour: viewEndDayHour\n    } = filterOptions;\n    return [[appointment => getAppointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour)]];\n  }\n\n  _createCombinedFilter(filterOptions) {\n    var min = new Date(filterOptions.min);\n    var max = new Date(filterOptions.max);\n    var {\n      startDayHour: startDayHour,\n      endDayHour: endDayHour,\n      viewStartDayHour: viewStartDayHour,\n      viewEndDayHour: viewEndDayHour,\n      resources: resources,\n      firstDayOfWeek: firstDayOfWeek,\n      checkIntersectViewport: checkIntersectViewport,\n      supportMultiDayAppointments: supportMultiDayAppointments\n    } = filterOptions;\n    var [trimMin, trimMax] = getTrimDates(min, max);\n    var useRecurrence = isDefined(this.dataAccessors.getter.recurrenceRule);\n    return [[appointment => {\n      var _appointment$visible;\n\n      var appointmentVisible = null !== (_appointment$visible = appointment.visible) && void 0 !== _appointment$visible ? _appointment$visible : true;\n\n      if (!appointmentVisible) {\n        return false;\n      }\n\n      var {\n        startDate: startDate,\n        endDate: endDate,\n        hasRecurrenceRule: hasRecurrenceRule\n      } = appointment;\n\n      if (!hasRecurrenceRule) {\n        if (!(endDate >= trimMin && startDate < trimMax || dateUtils.sameDate(endDate, trimMin) && dateUtils.sameDate(startDate, trimMin))) {\n          return false;\n        }\n      }\n\n      var recurrenceRule;\n\n      if (useRecurrence) {\n        recurrenceRule = appointment.recurrenceRule;\n      }\n\n      var appointmentTakesAllDay = getAppointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour);\n      var appointmentTakesSeveralDays = getAppointmentTakesSeveralDays(appointment);\n      var isAllDay = appointment.allDay;\n      var isLongAppointment = appointmentTakesSeveralDays || appointmentTakesAllDay;\n\n      if (null !== resources && void 0 !== resources && resources.length && !this._filterAppointmentByResources(appointment.rawAppointment, resources)) {\n        return false;\n      }\n\n      if (appointmentTakesAllDay && false === filterOptions.allDay) {\n        return false;\n      }\n\n      if (hasRecurrenceRule) {\n        var recurrenceException = getRecurrenceException(appointment, this.timeZoneCalculator, this.timezone);\n\n        if (!this._filterAppointmentByRRule({\n          startDate: startDate,\n          endDate: endDate,\n          recurrenceRule: recurrenceRule,\n          recurrenceException: recurrenceException,\n          allDay: appointmentTakesAllDay\n        }, min, max, startDayHour, endDayHour, firstDayOfWeek)) {\n          return false;\n        }\n      }\n\n      if (!isAllDay && supportMultiDayAppointments && isLongAppointment) {\n        if (endDate < min && (!useRecurrence || useRecurrence && !hasRecurrenceRule)) {\n          return false;\n        }\n      }\n\n      if (isDefined(startDayHour) && (!useRecurrence || !filterOptions.isVirtualScrolling)) {\n        if (!compareDateWithStartDayHour(startDate, endDate, startDayHour, appointmentTakesAllDay, appointmentTakesSeveralDays)) {\n          return false;\n        }\n      }\n\n      if (isDefined(endDayHour)) {\n        if (!compareDateWithEndDayHour({\n          startDate: startDate,\n          endDate: endDate,\n          startDayHour: startDayHour,\n          endDayHour: endDayHour,\n          viewStartDayHour: viewStartDayHour,\n          viewEndDayHour: viewEndDayHour,\n          allDay: appointmentTakesAllDay,\n          severalDays: appointmentTakesSeveralDays,\n          min: min,\n          max: max,\n          checkIntersectViewport: checkIntersectViewport\n        })) {\n          return false;\n        }\n      }\n\n      if (!isAllDay && (!isLongAppointment || supportMultiDayAppointments)) {\n        if (endDate < min && useRecurrence && !hasRecurrenceRule) {\n          return false;\n        }\n      }\n\n      return true;\n    }]];\n  }\n\n  _createAppointmentFilter(filterOptions) {\n    if (this.filterMaker.isRegistered()) {\n      this.filterMaker.make(\"user\", void 0);\n    }\n\n    return this._createCombinedFilter(filterOptions);\n  }\n\n  _excessFiltering() {\n    var dateFilter = this.filterMaker.dateFilter();\n    var dataSourceFilter = this.dataSource.filter();\n    return dateFilter && dataSourceFilter && (equalByValue(dataSourceFilter, dateFilter) || dataSourceFilter.length && equalByValue(dataSourceFilter[DATE_FILTER_POSITION], dateFilter));\n  }\n\n  _combineRemoteFilter(dateSerializationFormat) {\n    var combinedFilter = this.filterMaker.combine();\n    return this._serializeRemoteFilter(combinedFilter, dateSerializationFormat);\n  }\n\n  _serializeRemoteFilter(filter, dateSerializationFormat) {\n    if (!Array.isArray(filter)) {\n      return filter;\n    }\n\n    filter = extend([], filter);\n    var startDate = this.dataAccessors.expr.startDateExpr;\n    var endDate = this.dataAccessors.expr.endDateExpr;\n\n    if (isString(filter[0])) {\n      if (config().forceIsoDateParsing && filter.length > 1) {\n        if (filter[0] === startDate || filter[0] === endDate) {\n          filter[filter.length - 1] = dateSerialization.serializeDate(new Date(filter[filter.length - 1]), dateSerializationFormat);\n        }\n      }\n    }\n\n    for (var i = 0; i < filter.length; i++) {\n      filter[i] = this._serializeRemoteFilter(filter[i], dateSerializationFormat);\n    }\n\n    return filter;\n  }\n\n  _createFilter(min, max, remoteFiltering, dateSerializationFormat) {\n    if (remoteFiltering) {\n      this.filterMaker.make(\"date\", [min, max]);\n      var userFilterPosition = this._excessFiltering() ? this.dataSource.filter()[USER_FILTER_POSITION] : this.dataSource.filter();\n      this.filterMaker.make(\"user\", [userFilterPosition]);\n      this.dataSource.filter(this._combineRemoteFilter(dateSerializationFormat));\n    }\n  }\n\n  _filterAppointmentByResources(appointment, resources) {\n    var checkAppointmentResourceValues = (resourceName, resourceIndex) => {\n      var resourceGetter = this.dataAccessors.resources.getter[resourceName];\n      var resource;\n\n      if (isFunction(resourceGetter)) {\n        resource = resourceGetter(appointment);\n      }\n\n      var appointmentResourceValues = wrapToArray(resource);\n      var resourceData = map(resources[resourceIndex].items, item => item.id);\n\n      for (var j = 0; j < appointmentResourceValues.length; j++) {\n        if (inArray(appointmentResourceValues[j], resourceData) > -1) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    var result = false;\n\n    for (var i = 0; i < resources.length; i++) {\n      var resourceName = resources[i].name;\n      result = checkAppointmentResourceValues(resourceName, i);\n\n      if (!result) {\n        return false;\n      }\n    }\n\n    return result;\n  }\n\n  _filterAppointmentByRRule(appointment, min, max, startDayHour, endDayHour, firstDayOfWeek) {\n    var recurrenceRule = appointment.recurrenceRule;\n    var recurrenceException = appointment.recurrenceException;\n    var allDay = appointment.allDay;\n    var result = true;\n    var appointmentStartDate = appointment.startDate;\n    var appointmentEndDate = appointment.endDate;\n    var recurrenceProcessor = getRecurrenceProcessor();\n\n    if (allDay || _appointmentPartInInterval(appointmentStartDate, appointmentEndDate, startDayHour, endDayHour)) {\n      var [trimMin, trimMax] = getTrimDates(min, max);\n      min = trimMin;\n      max = new Date(trimMax.getTime() - toMs(\"minute\"));\n    }\n\n    if (recurrenceRule && !recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\n      result = appointmentEndDate > min && appointmentStartDate <= max;\n    }\n\n    if (result && recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\n      result = recurrenceProcessor.hasRecurrence({\n        rule: recurrenceRule,\n        exception: recurrenceException,\n        start: appointmentStartDate,\n        end: appointmentEndDate,\n        min: min,\n        max: max,\n        firstDayOfWeek: firstDayOfWeek\n      });\n    }\n\n    return result;\n  }\n\n  filterLoadedAppointments(filterOptions, preparedItems) {\n    var filteredItems = this.filterPreparedItems(filterOptions, preparedItems);\n    return filteredItems.map(_ref => {\n      var {\n        rawAppointment: rawAppointment\n      } = _ref;\n      return rawAppointment;\n    });\n  }\n\n  filterPreparedItems(filterOptions, preparedItems) {\n    var combinedFilter = this._createAppointmentFilter(filterOptions);\n\n    return query(preparedItems || this.preparedItems).filter(combinedFilter).toArray();\n  }\n\n  filterAllDayAppointments(filterOptions) {\n    var combinedFilter = this._createAllDayAppointmentFilter(filterOptions);\n\n    return query(this.preparedItems).filter(combinedFilter).toArray().map(_ref2 => {\n      var {\n        rawAppointment: rawAppointment\n      } = _ref2;\n      return rawAppointment;\n    });\n  }\n\n}\nexport class AppointmentFilterVirtualStrategy extends AppointmentFilterBaseStrategy {\n  get strategyName() {\n    return FilterStrategies.virtual;\n  }\n\n  get resources() {\n    return this.options.resources;\n  }\n\n  filter(preparedItems) {\n    var hourMs = toMs(\"hour\");\n    var isCalculateStartAndEndDayHour = calculateIsDateAndTimeView(this.viewType);\n    var checkIntersectViewport = isCalculateStartAndEndDayHour && \"horizontal\" === this.viewDirection;\n    var isAllDayWorkspace = !this.supportAllDayRow;\n    var showAllDayAppointments = this.showAllDayPanel || isAllDayWorkspace;\n    var endViewDate = this.viewDataProvider.getLastViewDateByEndDayHour(this.viewEndDayHour);\n    var filterOptions = [];\n    var groupsInfo = this.viewDataProvider.getCompletedGroupsInfo();\n    groupsInfo.forEach(item => {\n      var groupIndex = item.groupIndex;\n      var groupStartDate = item.startDate;\n      var groupEndDate = new Date(Math.min(item.endDate, endViewDate));\n      var startDayHour = isCalculateStartAndEndDayHour ? groupStartDate.getHours() : this.viewStartDayHour;\n      var endDayHour = isCalculateStartAndEndDayHour ? startDayHour + groupStartDate.getMinutes() / 60 + (groupEndDate - groupStartDate) / hourMs : this.viewEndDayHour;\n\n      var resources = this._getPrerenderFilterResources(groupIndex);\n\n      var allDayPanel = this.viewDataProvider.getAllDayPanel(groupIndex);\n      var supportAllDayAppointment = isAllDayWorkspace || !!showAllDayAppointments && (null === allDayPanel || void 0 === allDayPanel ? void 0 : allDayPanel.length) > 0;\n      filterOptions.push({\n        isVirtualScrolling: true,\n        startDayHour: startDayHour,\n        endDayHour: endDayHour,\n        viewStartDayHour: this.viewStartDayHour,\n        viewEndDayHour: this.viewEndDayHour,\n        min: groupStartDate,\n        max: groupEndDate,\n        supportMultiDayAppointments: isSupportMultiDayAppointments(this.viewType),\n        allDay: supportAllDayAppointment,\n        resources: resources,\n        firstDayOfWeek: this.firstDayOfWeek,\n        checkIntersectViewport: checkIntersectViewport\n      });\n    });\n    return this.filterLoadedAppointments({\n      filterOptions: filterOptions,\n      groupCount: this.groupCount\n    }, preparedItems);\n  }\n\n  filterPreparedItems(_ref3, preparedItems) {\n    var {\n      filterOptions: filterOptions,\n      groupCount: groupCount\n    } = _ref3;\n    var combinedFilters = [];\n    var itemsToFilter = preparedItems || this.preparedItems;\n    var needPreFilter = groupCount > 0;\n\n    if (needPreFilter) {\n      itemsToFilter = itemsToFilter.filter(_ref4 => {\n        var {\n          rawAppointment: rawAppointment\n        } = _ref4;\n\n        for (var i = 0; i < filterOptions.length; ++i) {\n          var {\n            resources: resources\n          } = filterOptions[i];\n\n          if (this._filterAppointmentByResources(rawAppointment, resources)) {\n            return true;\n          }\n        }\n      });\n    }\n\n    filterOptions.forEach(option => {\n      combinedFilters.length && combinedFilters.push(\"or\");\n\n      var filter = this._createAppointmentFilter(option);\n\n      combinedFilters.push(filter);\n    });\n    return query(itemsToFilter).filter(combinedFilters).toArray();\n  }\n\n  hasAllDayAppointments() {\n    return this.filterAllDayAppointments({\n      viewStartDayHour: this.viewStartDayHour,\n      viewEndDayHour: this.viewEndDayHour\n    }).length > 0;\n  }\n\n  _getPrerenderFilterResources(groupIndex) {\n    var cellGroup = this.viewDataProvider.getCellsGroup(groupIndex);\n    return getResourcesDataByGroups(this.loadedResources, this.resources, [cellGroup]);\n  }\n\n}","map":{"version":3,"sources":["/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/node_modules/devextreme/esm/ui/scheduler/appointments/dataProvider/appointmentFilter.js"],"names":["config","dateUtils","equalByValue","dateSerialization","getRecurrenceProcessor","inArray","wrapToArray","extend","map","each","isFunction","isDefined","isString","query","isDateAndTimeView","calculateIsDateAndTimeView","isSupportMultiDayAppointments","getResourcesDataByGroups","compareDateWithStartDayHour","compareDateWithEndDayHour","getTrimDates","getAppointmentTakesSeveralDays","_appointmentPartInInterval","getRecurrenceException","getAppointmentTakesAllDay","getPreparedDataItems","resolveDataItems","toMs","dateToMilliseconds","DATE_FILTER_POSITION","USER_FILTER_POSITION","FilterStrategies","virtual","standard","FilterMaker","constructor","dataAccessors","_filterRegistry","isRegistered","clearRegistry","make","type","args","_make","apply","min","max","useAccessors","startDate","getter","expr","startDateExpr","endDate","endDateExpr","recurrenceRule","recurrenceRuleExpr","date","splice","userFilter","user","combine","filter","push","dateFilter","_this$_filterRegistry","AppointmentFilterBaseStrategy","options","dataSource","preparedItems","_init","strategyName","timeZoneCalculator","viewStartDayHour","startDayHour","viewEndDayHour","endDayHour","appointmentDuration","timezone","firstDayOfWeek","showAllDayPanel","loadedResources","_resolveOption","supportAllDayRow","viewType","viewDirection","dateRange","groupCount","viewDataProvider","name","result","setDataAccessors","setDataSource","allDay","filterLoadedAppointments","resources","supportMultiDayAppointments","filterByDate","remoteFiltering","dateSerializationFormat","trimMin","trimMax","filterMaker","_createFilter","_this$dataSource$filt","length","_serializeRemoteFilter","_combineRemoteFilter","hasAllDayAppointments","appointments","_","item","_this$filterMaker","_updatePreparedDataItems","updateItems","items","store","on","isLoaded","_createAllDayAppointmentFilter","filterOptions","appointment","_createCombinedFilter","Date","checkIntersectViewport","useRecurrence","_appointment$visible","appointmentVisible","visible","hasRecurrenceRule","sameDate","appointmentTakesAllDay","appointmentTakesSeveralDays","isAllDay","isLongAppointment","_filterAppointmentByResources","rawAppointment","recurrenceException","_filterAppointmentByRRule","isVirtualScrolling","severalDays","_createAppointmentFilter","_excessFiltering","dataSourceFilter","combinedFilter","Array","isArray","forceIsoDateParsing","serializeDate","i","userFilterPosition","checkAppointmentResourceValues","resourceName","resourceIndex","resourceGetter","resource","appointmentResourceValues","resourceData","id","j","appointmentStartDate","appointmentEndDate","recurrenceProcessor","getTime","isValidRecurrenceRule","hasRecurrence","rule","exception","start","end","filteredItems","filterPreparedItems","_ref","toArray","filterAllDayAppointments","_ref2","AppointmentFilterVirtualStrategy","hourMs","isCalculateStartAndEndDayHour","isAllDayWorkspace","showAllDayAppointments","endViewDate","getLastViewDateByEndDayHour","groupsInfo","getCompletedGroupsInfo","forEach","groupIndex","groupStartDate","groupEndDate","Math","getHours","getMinutes","_getPrerenderFilterResources","allDayPanel","getAllDayPanel","supportAllDayAppointment","_ref3","combinedFilters","itemsToFilter","needPreFilter","_ref4","option","cellGroup","getCellsGroup"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments/dataProvider/appointmentFilter.js)\r\n * Version: 21.2.4\r\n * Build date: Mon Dec 06 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport config from \"../../../../core/config\";\r\nimport dateUtils from \"../../../../core/utils/date\";\r\nimport {\r\n    equalByValue\r\n} from \"../../../../core/utils/common\";\r\nimport dateSerialization from \"../../../../core/utils/date_serialization\";\r\nimport {\r\n    getRecurrenceProcessor\r\n} from \"../../recurrence\";\r\nimport {\r\n    inArray,\r\n    wrapToArray\r\n} from \"../../../../core/utils/array\";\r\nimport {\r\n    extend\r\n} from \"../../../../core/utils/extend\";\r\nimport {\r\n    map,\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport {\r\n    isFunction,\r\n    isDefined,\r\n    isString\r\n} from \"../../../../core/utils/type\";\r\nimport query from \"../../../../data/query\";\r\nimport {\r\n    isDateAndTimeView as calculateIsDateAndTimeView,\r\n    isSupportMultiDayAppointments\r\n} from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    getResourcesDataByGroups\r\n} from \"../../resources/utils\";\r\nimport {\r\n    compareDateWithStartDayHour,\r\n    compareDateWithEndDayHour,\r\n    getTrimDates,\r\n    getAppointmentTakesSeveralDays,\r\n    _appointmentPartInInterval,\r\n    getRecurrenceException,\r\n    getAppointmentTakesAllDay\r\n} from \"./utils\";\r\nimport {\r\n    getPreparedDataItems,\r\n    resolveDataItems\r\n} from \"../../../../renovation/ui/scheduler/utils/data\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar DATE_FILTER_POSITION = 0;\r\nvar USER_FILTER_POSITION = 1;\r\nvar FilterStrategies = {\r\n    virtual: \"virtual\",\r\n    standard: \"standard\"\r\n};\r\nclass FilterMaker {\r\n    constructor(dataAccessors) {\r\n        this._filterRegistry = null;\r\n        this.dataAccessors = dataAccessors\r\n    }\r\n    isRegistered() {\r\n        return !!this._filterRegistry\r\n    }\r\n    clearRegistry() {\r\n        delete this._filterRegistry\r\n    }\r\n    make(type, args) {\r\n        if (!this._filterRegistry) {\r\n            this._filterRegistry = {}\r\n        }\r\n        this._make(type).apply(this, args)\r\n    }\r\n    _make(type) {\r\n        switch (type) {\r\n            case \"date\":\r\n                return (min, max, useAccessors) => {\r\n                    var startDate = useAccessors ? this.dataAccessors.getter.startDate : this.dataAccessors.expr.startDateExpr;\r\n                    var endDate = useAccessors ? this.dataAccessors.getter.endDate : this.dataAccessors.expr.endDateExpr;\r\n                    var recurrenceRule = this.dataAccessors.expr.recurrenceRuleExpr;\r\n                    this._filterRegistry.date = [\r\n                        [\r\n                            [endDate, \">=\", min],\r\n                            [startDate, \"<\", max]\r\n                        ], \"or\", [recurrenceRule, \"startswith\", \"freq\"], \"or\", [\r\n                            [endDate, min],\r\n                            [startDate, min]\r\n                        ]\r\n                    ];\r\n                    if (!recurrenceRule) {\r\n                        this._filterRegistry.date.splice(1, 2)\r\n                    }\r\n                };\r\n            case \"user\":\r\n                return userFilter => {\r\n                    this._filterRegistry.user = userFilter\r\n                }\r\n        }\r\n    }\r\n    combine() {\r\n        var filter = [];\r\n        this._filterRegistry.date && filter.push(this._filterRegistry.date);\r\n        this._filterRegistry.user && filter.push(this._filterRegistry.user);\r\n        return filter\r\n    }\r\n    dateFilter() {\r\n        var _this$_filterRegistry;\r\n        return null === (_this$_filterRegistry = this._filterRegistry) || void 0 === _this$_filterRegistry ? void 0 : _this$_filterRegistry.date\r\n    }\r\n}\r\nexport class AppointmentFilterBaseStrategy {\r\n    constructor(options) {\r\n        this.options = options;\r\n        this.dataSource = this.options.dataSource;\r\n        this.dataAccessors = this.options.dataAccessors;\r\n        this.preparedItems = [];\r\n        this._init()\r\n    }\r\n    get strategyName() {\r\n        return FilterStrategies.standard\r\n    }\r\n    get timeZoneCalculator() {\r\n        return this.options.timeZoneCalculator\r\n    }\r\n    get viewStartDayHour() {\r\n        return this.options.startDayHour\r\n    }\r\n    get viewEndDayHour() {\r\n        return this.options.endDayHour\r\n    }\r\n    get appointmentDuration() {\r\n        return this.options.appointmentDuration\r\n    }\r\n    get timezone() {\r\n        return this.options.timezone\r\n    }\r\n    get firstDayOfWeek() {\r\n        return this.options.firstDayOfWeek\r\n    }\r\n    get showAllDayPanel() {\r\n        return this.options.showAllDayPanel\r\n    }\r\n    get loadedResources() {\r\n        return this._resolveOption(\"loadedResources\")\r\n    }\r\n    get supportAllDayRow() {\r\n        return this._resolveOption(\"supportAllDayRow\")\r\n    }\r\n    get viewType() {\r\n        return this._resolveOption(\"viewType\")\r\n    }\r\n    get viewDirection() {\r\n        return this._resolveOption(\"viewDirection\")\r\n    }\r\n    get dateRange() {\r\n        return this._resolveOption(\"dateRange\")\r\n    }\r\n    get groupCount() {\r\n        return this._resolveOption(\"groupCount\")\r\n    }\r\n    get viewDataProvider() {\r\n        return this._resolveOption(\"viewDataProvider\")\r\n    }\r\n    _resolveOption(name) {\r\n        var result = this.options[name];\r\n        return \"function\" === typeof result ? result() : result\r\n    }\r\n    _init() {\r\n        this.setDataAccessors(this.dataAccessors);\r\n        this.setDataSource(this.dataSource)\r\n    }\r\n    filter(preparedItems) {\r\n        var dateRange = this.dateRange;\r\n        var allDay;\r\n        if (!this.showAllDayPanel && this.supportAllDayRow) {\r\n            allDay = false\r\n        }\r\n        return this.filterLoadedAppointments({\r\n            startDayHour: this.viewStartDayHour,\r\n            endDayHour: this.viewEndDayHour,\r\n            viewStartDayHour: this.viewStartDayHour,\r\n            viewEndDayHour: this.viewEndDayHour,\r\n            min: dateRange[0],\r\n            max: dateRange[1],\r\n            resources: this.loadedResources,\r\n            allDay: allDay,\r\n            supportMultiDayAppointments: isSupportMultiDayAppointments(this.viewType),\r\n            firstDayOfWeek: this.firstDayOfWeek\r\n        }, preparedItems)\r\n    }\r\n    filterByDate(min, max, remoteFiltering, dateSerializationFormat) {\r\n        if (!this.dataSource) {\r\n            return\r\n        }\r\n        var [trimMin, trimMax] = getTrimDates(min, max);\r\n        if (!this.filterMaker.isRegistered()) {\r\n            this._createFilter(trimMin, trimMax, remoteFiltering, dateSerializationFormat)\r\n        } else {\r\n            var _this$dataSource$filt;\r\n            if ((null === (_this$dataSource$filt = this.dataSource.filter()) || void 0 === _this$dataSource$filt ? void 0 : _this$dataSource$filt.length) > 1) {\r\n                var userFilter = this._serializeRemoteFilter([this.dataSource.filter()[1]], dateSerializationFormat);\r\n                this.filterMaker.make(\"user\", userFilter)\r\n            }\r\n            if (remoteFiltering) {\r\n                this.filterMaker.make(\"date\", [trimMin, trimMax]);\r\n                this.dataSource.filter(this._combineRemoteFilter(dateSerializationFormat))\r\n            }\r\n        }\r\n    }\r\n    hasAllDayAppointments(appointments) {\r\n        var result = false;\r\n        if (appointments) {\r\n            each(appointments, (_, item) => {\r\n                if (getAppointmentTakesAllDay(item, this.viewStartDayHour, this.viewEndDayHour)) {\r\n                    result = true;\r\n                    return false\r\n                }\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    setDataAccessors(dataAccessors) {\r\n        this.dataAccessors = dataAccessors;\r\n        this.filterMaker = new FilterMaker(this.dataAccessors)\r\n    }\r\n    setDataSource(dataSource) {\r\n        var _this$filterMaker;\r\n        this.dataSource = dataSource;\r\n        this._updatePreparedDataItems();\r\n        null === (_this$filterMaker = this.filterMaker) || void 0 === _this$filterMaker ? void 0 : _this$filterMaker.clearRegistry()\r\n    }\r\n    _updatePreparedDataItems() {\r\n        var updateItems = items => this.preparedItems = getPreparedDataItems(items, this.dataAccessors, this.appointmentDuration, this.timeZoneCalculator);\r\n        if (this.dataSource) {\r\n            var store = this.dataSource.store();\r\n            store.on(\"loaded\", options => {\r\n                updateItems(resolveDataItems(options))\r\n            });\r\n            if (this.dataSource.isLoaded()) {\r\n                updateItems(this.dataSource.items())\r\n            }\r\n        }\r\n    }\r\n    _createAllDayAppointmentFilter(filterOptions) {\r\n        var {\r\n            viewStartDayHour: viewStartDayHour,\r\n            viewEndDayHour: viewEndDayHour\r\n        } = filterOptions;\r\n        return [\r\n            [appointment => getAppointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour)]\r\n        ]\r\n    }\r\n    _createCombinedFilter(filterOptions) {\r\n        var min = new Date(filterOptions.min);\r\n        var max = new Date(filterOptions.max);\r\n        var {\r\n            startDayHour: startDayHour,\r\n            endDayHour: endDayHour,\r\n            viewStartDayHour: viewStartDayHour,\r\n            viewEndDayHour: viewEndDayHour,\r\n            resources: resources,\r\n            firstDayOfWeek: firstDayOfWeek,\r\n            checkIntersectViewport: checkIntersectViewport,\r\n            supportMultiDayAppointments: supportMultiDayAppointments\r\n        } = filterOptions;\r\n        var [trimMin, trimMax] = getTrimDates(min, max);\r\n        var useRecurrence = isDefined(this.dataAccessors.getter.recurrenceRule);\r\n        return [\r\n            [appointment => {\r\n                var _appointment$visible;\r\n                var appointmentVisible = null !== (_appointment$visible = appointment.visible) && void 0 !== _appointment$visible ? _appointment$visible : true;\r\n                if (!appointmentVisible) {\r\n                    return false\r\n                }\r\n                var {\r\n                    startDate: startDate,\r\n                    endDate: endDate,\r\n                    hasRecurrenceRule: hasRecurrenceRule\r\n                } = appointment;\r\n                if (!hasRecurrenceRule) {\r\n                    if (!(endDate >= trimMin && startDate < trimMax || dateUtils.sameDate(endDate, trimMin) && dateUtils.sameDate(startDate, trimMin))) {\r\n                        return false\r\n                    }\r\n                }\r\n                var recurrenceRule;\r\n                if (useRecurrence) {\r\n                    recurrenceRule = appointment.recurrenceRule\r\n                }\r\n                var appointmentTakesAllDay = getAppointmentTakesAllDay(appointment, viewStartDayHour, viewEndDayHour);\r\n                var appointmentTakesSeveralDays = getAppointmentTakesSeveralDays(appointment);\r\n                var isAllDay = appointment.allDay;\r\n                var isLongAppointment = appointmentTakesSeveralDays || appointmentTakesAllDay;\r\n                if (null !== resources && void 0 !== resources && resources.length && !this._filterAppointmentByResources(appointment.rawAppointment, resources)) {\r\n                    return false\r\n                }\r\n                if (appointmentTakesAllDay && false === filterOptions.allDay) {\r\n                    return false\r\n                }\r\n                if (hasRecurrenceRule) {\r\n                    var recurrenceException = getRecurrenceException(appointment, this.timeZoneCalculator, this.timezone);\r\n                    if (!this._filterAppointmentByRRule({\r\n                            startDate: startDate,\r\n                            endDate: endDate,\r\n                            recurrenceRule: recurrenceRule,\r\n                            recurrenceException: recurrenceException,\r\n                            allDay: appointmentTakesAllDay\r\n                        }, min, max, startDayHour, endDayHour, firstDayOfWeek)) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (!isAllDay && supportMultiDayAppointments && isLongAppointment) {\r\n                    if (endDate < min && (!useRecurrence || useRecurrence && !hasRecurrenceRule)) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (isDefined(startDayHour) && (!useRecurrence || !filterOptions.isVirtualScrolling)) {\r\n                    if (!compareDateWithStartDayHour(startDate, endDate, startDayHour, appointmentTakesAllDay, appointmentTakesSeveralDays)) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (isDefined(endDayHour)) {\r\n                    if (!compareDateWithEndDayHour({\r\n                            startDate: startDate,\r\n                            endDate: endDate,\r\n                            startDayHour: startDayHour,\r\n                            endDayHour: endDayHour,\r\n                            viewStartDayHour: viewStartDayHour,\r\n                            viewEndDayHour: viewEndDayHour,\r\n                            allDay: appointmentTakesAllDay,\r\n                            severalDays: appointmentTakesSeveralDays,\r\n                            min: min,\r\n                            max: max,\r\n                            checkIntersectViewport: checkIntersectViewport\r\n                        })) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (!isAllDay && (!isLongAppointment || supportMultiDayAppointments)) {\r\n                    if (endDate < min && useRecurrence && !hasRecurrenceRule) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true\r\n            }]\r\n        ]\r\n    }\r\n    _createAppointmentFilter(filterOptions) {\r\n        if (this.filterMaker.isRegistered()) {\r\n            this.filterMaker.make(\"user\", void 0)\r\n        }\r\n        return this._createCombinedFilter(filterOptions)\r\n    }\r\n    _excessFiltering() {\r\n        var dateFilter = this.filterMaker.dateFilter();\r\n        var dataSourceFilter = this.dataSource.filter();\r\n        return dateFilter && dataSourceFilter && (equalByValue(dataSourceFilter, dateFilter) || dataSourceFilter.length && equalByValue(dataSourceFilter[DATE_FILTER_POSITION], dateFilter))\r\n    }\r\n    _combineRemoteFilter(dateSerializationFormat) {\r\n        var combinedFilter = this.filterMaker.combine();\r\n        return this._serializeRemoteFilter(combinedFilter, dateSerializationFormat)\r\n    }\r\n    _serializeRemoteFilter(filter, dateSerializationFormat) {\r\n        if (!Array.isArray(filter)) {\r\n            return filter\r\n        }\r\n        filter = extend([], filter);\r\n        var startDate = this.dataAccessors.expr.startDateExpr;\r\n        var endDate = this.dataAccessors.expr.endDateExpr;\r\n        if (isString(filter[0])) {\r\n            if (config().forceIsoDateParsing && filter.length > 1) {\r\n                if (filter[0] === startDate || filter[0] === endDate) {\r\n                    filter[filter.length - 1] = dateSerialization.serializeDate(new Date(filter[filter.length - 1]), dateSerializationFormat)\r\n                }\r\n            }\r\n        }\r\n        for (var i = 0; i < filter.length; i++) {\r\n            filter[i] = this._serializeRemoteFilter(filter[i], dateSerializationFormat)\r\n        }\r\n        return filter\r\n    }\r\n    _createFilter(min, max, remoteFiltering, dateSerializationFormat) {\r\n        if (remoteFiltering) {\r\n            this.filterMaker.make(\"date\", [min, max]);\r\n            var userFilterPosition = this._excessFiltering() ? this.dataSource.filter()[USER_FILTER_POSITION] : this.dataSource.filter();\r\n            this.filterMaker.make(\"user\", [userFilterPosition]);\r\n            this.dataSource.filter(this._combineRemoteFilter(dateSerializationFormat))\r\n        }\r\n    }\r\n    _filterAppointmentByResources(appointment, resources) {\r\n        var checkAppointmentResourceValues = (resourceName, resourceIndex) => {\r\n            var resourceGetter = this.dataAccessors.resources.getter[resourceName];\r\n            var resource;\r\n            if (isFunction(resourceGetter)) {\r\n                resource = resourceGetter(appointment)\r\n            }\r\n            var appointmentResourceValues = wrapToArray(resource);\r\n            var resourceData = map(resources[resourceIndex].items, item => item.id);\r\n            for (var j = 0; j < appointmentResourceValues.length; j++) {\r\n                if (inArray(appointmentResourceValues[j], resourceData) > -1) {\r\n                    return true\r\n                }\r\n            }\r\n            return false\r\n        };\r\n        var result = false;\r\n        for (var i = 0; i < resources.length; i++) {\r\n            var resourceName = resources[i].name;\r\n            result = checkAppointmentResourceValues(resourceName, i);\r\n            if (!result) {\r\n                return false\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _filterAppointmentByRRule(appointment, min, max, startDayHour, endDayHour, firstDayOfWeek) {\r\n        var recurrenceRule = appointment.recurrenceRule;\r\n        var recurrenceException = appointment.recurrenceException;\r\n        var allDay = appointment.allDay;\r\n        var result = true;\r\n        var appointmentStartDate = appointment.startDate;\r\n        var appointmentEndDate = appointment.endDate;\r\n        var recurrenceProcessor = getRecurrenceProcessor();\r\n        if (allDay || _appointmentPartInInterval(appointmentStartDate, appointmentEndDate, startDayHour, endDayHour)) {\r\n            var [trimMin, trimMax] = getTrimDates(min, max);\r\n            min = trimMin;\r\n            max = new Date(trimMax.getTime() - toMs(\"minute\"))\r\n        }\r\n        if (recurrenceRule && !recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\r\n            result = appointmentEndDate > min && appointmentStartDate <= max\r\n        }\r\n        if (result && recurrenceProcessor.isValidRecurrenceRule(recurrenceRule)) {\r\n            result = recurrenceProcessor.hasRecurrence({\r\n                rule: recurrenceRule,\r\n                exception: recurrenceException,\r\n                start: appointmentStartDate,\r\n                end: appointmentEndDate,\r\n                min: min,\r\n                max: max,\r\n                firstDayOfWeek: firstDayOfWeek\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    filterLoadedAppointments(filterOptions, preparedItems) {\r\n        var filteredItems = this.filterPreparedItems(filterOptions, preparedItems);\r\n        return filteredItems.map(_ref => {\r\n            var {\r\n                rawAppointment: rawAppointment\r\n            } = _ref;\r\n            return rawAppointment\r\n        })\r\n    }\r\n    filterPreparedItems(filterOptions, preparedItems) {\r\n        var combinedFilter = this._createAppointmentFilter(filterOptions);\r\n        return query(preparedItems || this.preparedItems).filter(combinedFilter).toArray()\r\n    }\r\n    filterAllDayAppointments(filterOptions) {\r\n        var combinedFilter = this._createAllDayAppointmentFilter(filterOptions);\r\n        return query(this.preparedItems).filter(combinedFilter).toArray().map(_ref2 => {\r\n            var {\r\n                rawAppointment: rawAppointment\r\n            } = _ref2;\r\n            return rawAppointment\r\n        })\r\n    }\r\n}\r\nexport class AppointmentFilterVirtualStrategy extends AppointmentFilterBaseStrategy {\r\n    get strategyName() {\r\n        return FilterStrategies.virtual\r\n    }\r\n    get resources() {\r\n        return this.options.resources\r\n    }\r\n    filter(preparedItems) {\r\n        var hourMs = toMs(\"hour\");\r\n        var isCalculateStartAndEndDayHour = calculateIsDateAndTimeView(this.viewType);\r\n        var checkIntersectViewport = isCalculateStartAndEndDayHour && \"horizontal\" === this.viewDirection;\r\n        var isAllDayWorkspace = !this.supportAllDayRow;\r\n        var showAllDayAppointments = this.showAllDayPanel || isAllDayWorkspace;\r\n        var endViewDate = this.viewDataProvider.getLastViewDateByEndDayHour(this.viewEndDayHour);\r\n        var filterOptions = [];\r\n        var groupsInfo = this.viewDataProvider.getCompletedGroupsInfo();\r\n        groupsInfo.forEach(item => {\r\n            var groupIndex = item.groupIndex;\r\n            var groupStartDate = item.startDate;\r\n            var groupEndDate = new Date(Math.min(item.endDate, endViewDate));\r\n            var startDayHour = isCalculateStartAndEndDayHour ? groupStartDate.getHours() : this.viewStartDayHour;\r\n            var endDayHour = isCalculateStartAndEndDayHour ? startDayHour + groupStartDate.getMinutes() / 60 + (groupEndDate - groupStartDate) / hourMs : this.viewEndDayHour;\r\n            var resources = this._getPrerenderFilterResources(groupIndex);\r\n            var allDayPanel = this.viewDataProvider.getAllDayPanel(groupIndex);\r\n            var supportAllDayAppointment = isAllDayWorkspace || !!showAllDayAppointments && (null === allDayPanel || void 0 === allDayPanel ? void 0 : allDayPanel.length) > 0;\r\n            filterOptions.push({\r\n                isVirtualScrolling: true,\r\n                startDayHour: startDayHour,\r\n                endDayHour: endDayHour,\r\n                viewStartDayHour: this.viewStartDayHour,\r\n                viewEndDayHour: this.viewEndDayHour,\r\n                min: groupStartDate,\r\n                max: groupEndDate,\r\n                supportMultiDayAppointments: isSupportMultiDayAppointments(this.viewType),\r\n                allDay: supportAllDayAppointment,\r\n                resources: resources,\r\n                firstDayOfWeek: this.firstDayOfWeek,\r\n                checkIntersectViewport: checkIntersectViewport\r\n            })\r\n        });\r\n        return this.filterLoadedAppointments({\r\n            filterOptions: filterOptions,\r\n            groupCount: this.groupCount\r\n        }, preparedItems)\r\n    }\r\n    filterPreparedItems(_ref3, preparedItems) {\r\n        var {\r\n            filterOptions: filterOptions,\r\n            groupCount: groupCount\r\n        } = _ref3;\r\n        var combinedFilters = [];\r\n        var itemsToFilter = preparedItems || this.preparedItems;\r\n        var needPreFilter = groupCount > 0;\r\n        if (needPreFilter) {\r\n            itemsToFilter = itemsToFilter.filter(_ref4 => {\r\n                var {\r\n                    rawAppointment: rawAppointment\r\n                } = _ref4;\r\n                for (var i = 0; i < filterOptions.length; ++i) {\r\n                    var {\r\n                        resources: resources\r\n                    } = filterOptions[i];\r\n                    if (this._filterAppointmentByResources(rawAppointment, resources)) {\r\n                        return true\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        filterOptions.forEach(option => {\r\n            combinedFilters.length && combinedFilters.push(\"or\");\r\n            var filter = this._createAppointmentFilter(option);\r\n            combinedFilters.push(filter)\r\n        });\r\n        return query(itemsToFilter).filter(combinedFilters).toArray()\r\n    }\r\n    hasAllDayAppointments() {\r\n        return this.filterAllDayAppointments({\r\n            viewStartDayHour: this.viewStartDayHour,\r\n            viewEndDayHour: this.viewEndDayHour\r\n        }).length > 0\r\n    }\r\n    _getPrerenderFilterResources(groupIndex) {\r\n        var cellGroup = this.viewDataProvider.getCellsGroup(groupIndex);\r\n        return getResourcesDataByGroups(this.loadedResources, this.resources, [cellGroup])\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}