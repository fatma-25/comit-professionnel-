{"ast":null,"code":"var _jsxFileName = \"/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/src/components/views/ListContact.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState } from \"react\";\n// import Search from \"../Search\";\n// import Contact from \"./Contact\";\n// const ListContact = () => {\n//   const [searchedName, setSearchedName] = useState(\"\");\n//   const searcheditem = (search) => {\n//     setSearchedName(search);\n//     console.log(searchedName);\n//   };\n//   return (\n//     <>\n//       <Search searcheditem={searcheditem} />\n//       <Contact searchedName={searchedName} />\n//     </>\n//   );\n// };\n// export default ListContact;\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\"; // import firebase from \"../../server/firebase\";\n\nimport firebase from \"../../server/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateChat = props => {\n  _s();\n\n  const [usersState, setUsersState] = useState([]);\n  const [connectedUsersState, setConnectedUsersState] = useState([]);\n  const usersRef = firebase.database().ref(\"users\");\n  const connectedRef = firebase.database().ref(\".info/connected\");\n  const statusRef = firebase.database().ref(\"status\");\n  useEffect(() => {\n    // usersRef.on(\"child_added\", (snap) => {\n    //   setUsersState((currentState) => {\n    //     let updatedState = [...currentState];\n    //     let user = snap.val();\n    //     user.name = user.displayName;\n    //     user.email = user.email;\n    //     user.id = snap.key;\n    //     user.isPrivateChat = true;\n    //     updatedState.push(user);\n    //     return updatedState;\n    //   });\n    // });\n    // connectedRef.on(\"value\", (snap) => {\n    //   if (props.user && snap.val()) {\n    //     const userStatusRef = statusRef.child(props.user.uid);\n    //     userStatusRef.set(true);\n    //     userStatusRef.onDisconnect().remove();\n    //   }\n    // });\n    return () => {\n      usersRef.off();\n      connectedRef.off();\n    };\n  }, [props.user]);\n  useEffect(() => {\n    statusRef.on(\"child_added\", snap => {\n      setConnectedUsersState(currentState => {\n        let updatedState = [...currentState];\n        updatedState.push(snap.key);\n        return updatedState;\n      });\n    });\n    statusRef.on(\"child_removed\", snap => {\n      setConnectedUsersState(currentState => {\n        let updatedState = [...currentState];\n        let index = updatedState.indexOf(snap.key);\n        updatedState.splice(index, 1);\n        return updatedState;\n      });\n    });\n    return () => statusRef.off();\n  }, [usersState]);\n\n  const displayUsers = () => {\n    if (usersState.length > 0) {\n      return usersState.filter(user => user.id !== props.user.uid).map(user => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"space-around\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [console.log(user, \"uuuuusre\"), user.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\" \", props.user.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this);\n      });\n    }\n  }; // const selectUser = (user) => {\n  //   let userTemp = { ...user };\n  //   userTemp.id = generateChannelId(user.id);\n  //   setLastVisited(props.user, props.channel);\n  //   setLastVisited(props.user, userTemp);\n  //   props.selectChannel(userTemp);\n  // };\n  // const setLastVisited = (user, channel) => {\n  //   const lastVisited = usersRef\n  //     .child(user.uid)\n  //     .child(\"lastVisited\")\n  //     .child(channel.id);\n  //   lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n  //   lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n  // };\n  // const generateChannelId = (userId) => {\n  //   if (props.user.uid < userId) {\n  //     return props.user.uid + userId;\n  //   } else {\n  //     return userId + props.user.uid;\n  //   }\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: displayUsers()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PrivateChat, \"6U/V5/w1SKMexB1MZPyGIwXk8Wk=\");\n\n_c = PrivateChat;\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user.currentUser,\n    channel: state.channel.currentChannel\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {// selectChannel: (channel) => dispatch(setChannel(channel)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateChat);\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateChat\");","map":{"version":3,"sources":["/Users/fatmaamara/Desktop/projetetude/authentification-main/front-end/src/components/views/ListContact.js"],"names":["React","useState","useEffect","connect","firebase","PrivateChat","props","usersState","setUsersState","connectedUsersState","setConnectedUsersState","usersRef","database","ref","connectedRef","statusRef","off","user","on","snap","currentState","updatedState","push","key","index","indexOf","splice","displayUsers","length","filter","id","uid","map","display","justifyContent","console","log","name","email","mapStateToProps","state","currentUser","channel","currentChannel","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// import React, { useState } from \"react\";\n\n// import Search from \"../Search\";\n// import Contact from \"./Contact\";\n// const ListContact = () => {\n//   const [searchedName, setSearchedName] = useState(\"\");\n\n//   const searcheditem = (search) => {\n//     setSearchedName(search);\n//     console.log(searchedName);\n//   };\n//   return (\n//     <>\n//       <Search searcheditem={searcheditem} />\n\n//       <Contact searchedName={searchedName} />\n//     </>\n//   );\n// };\n\n// export default ListContact;\n\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n// import firebase from \"../../server/firebase\";\nimport firebase from \"../../server/firebase\";\n\nconst PrivateChat = (props) => {\n  const [usersState, setUsersState] = useState([]);\n\n  const [connectedUsersState, setConnectedUsersState] = useState([]);\n\n  const usersRef = firebase.database().ref(\"users\");\n\n  const connectedRef = firebase.database().ref(\".info/connected\");\n\n  const statusRef = firebase.database().ref(\"status\");\n\n  useEffect(() => {\n    // usersRef.on(\"child_added\", (snap) => {\n    //   setUsersState((currentState) => {\n    //     let updatedState = [...currentState];\n\n    //     let user = snap.val();\n    //     user.name = user.displayName;\n    //     user.email = user.email;\n    //     user.id = snap.key;\n    //     user.isPrivateChat = true;\n    //     updatedState.push(user);\n\n    //     return updatedState;\n    //   });\n    // });\n\n    // connectedRef.on(\"value\", (snap) => {\n    //   if (props.user && snap.val()) {\n    //     const userStatusRef = statusRef.child(props.user.uid);\n    //     userStatusRef.set(true);\n    //     userStatusRef.onDisconnect().remove();\n    //   }\n    // });\n\n    return () => {\n      usersRef.off();\n      connectedRef.off();\n    };\n  }, [props.user]);\n\n  useEffect(() => {\n    statusRef.on(\"child_added\", (snap) => {\n      setConnectedUsersState((currentState) => {\n        let updatedState = [...currentState];\n        updatedState.push(snap.key);\n        return updatedState;\n      });\n    });\n\n    statusRef.on(\"child_removed\", (snap) => {\n      setConnectedUsersState((currentState) => {\n        let updatedState = [...currentState];\n\n        let index = updatedState.indexOf(snap.key);\n        updatedState.splice(index, 1);\n        return updatedState;\n      });\n    });\n\n    return () => statusRef.off();\n  }, [usersState]);\n\n  const displayUsers = () => {\n    if (usersState.length > 0) {\n      return usersState\n        .filter((user) => user.id !== props.user.uid)\n        .map((user) => {\n          return (\n            <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\n              <div>\n                {console.log(user, \"uuuuusre\")}\n                {user.name}\n              </div>\n              <div> {props.user.email}</div>\n            </div>\n          );\n        });\n    }\n  };\n\n  // const selectUser = (user) => {\n  //   let userTemp = { ...user };\n  //   userTemp.id = generateChannelId(user.id);\n  //   setLastVisited(props.user, props.channel);\n  //   setLastVisited(props.user, userTemp);\n  //   props.selectChannel(userTemp);\n  // };\n\n  // const setLastVisited = (user, channel) => {\n  //   const lastVisited = usersRef\n  //     .child(user.uid)\n  //     .child(\"lastVisited\")\n  //     .child(channel.id);\n  //   lastVisited.set(firebase.database.ServerValue.TIMESTAMP);\n  //   lastVisited.onDisconnect().set(firebase.database.ServerValue.TIMESTAMP);\n  // };\n\n  // const generateChannelId = (userId) => {\n  //   if (props.user.uid < userId) {\n  //     return props.user.uid + userId;\n  //   } else {\n  //     return userId + props.user.uid;\n  //   }\n  // };\n\n  return <div>{displayUsers()}</div>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user.currentUser,\n    channel: state.channel.currentChannel,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // selectChannel: (channel) => dispatch(setChannel(channel)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateChat);\n"]},"metadata":{},"sourceType":"module"}